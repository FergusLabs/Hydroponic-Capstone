
c:/Users/School/Documents/IoT/Hydroponic-Capstone/sensorTest/target/3.1.0/argon/sensorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000021e0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b6200  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e598  000b6204  0001e598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001f0  2003e600  2003e600  0002e600  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b626c  000b626c  0002626c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b6294  000b6294  00026294  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00104457  00000000  00000000  00026298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001253f  00000000  00000000  0012a6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00031f4b  00000000  00000000  0013cc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000028e8  00000000  00000000  0016eb79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000094e8  00000000  00000000  00171461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000387af  00000000  00000000  0017a949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003b231  00000000  00000000  001b30f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00123bfb  00000000  00000000  001ee329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000070e0  00000000  00000000  00311f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f001 ff67 	bl	b5f04 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f001 ff6f 	bl	b5f20 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e598 	.word	0x2003e598
   b404c:	000b6204 	.word	0x000b6204
   b4050:	2003e600 	.word	0x2003e600
   b4054:	2003e600 	.word	0x2003e600
   b4058:	2003e7f0 	.word	0x2003e7f0

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 ffaf 	bl	b4fc4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42a5      	cmp	r5, r4
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b61d4 	.word	0x000b61d4
   b4080:	000b61f8 	.word	0x000b61f8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b829 	b.w	b40da <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f861 	bl	b4150 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 bf4f 	b.w	b4f34 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 bdc1 	b.w	b4c1c <malloc>

000b409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409a:	f000 bdc7 	b.w	b4c2c <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b40ae:	b510      	push	{r4, lr}
   b40b0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b40b2:	6800      	ldr	r0, [r0, #0]
   b40b4:	b108      	cbz	r0, b40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   b40b6:	f000 fdb9 	bl	b4c2c <free>
class SystemClass {
   b40ba:	4620      	mov	r0, r4
   b40bc:	bd10      	pop	{r4, pc}

000b40be <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40be:	b40e      	push	{r1, r2, r3}
   b40c0:	b503      	push	{r0, r1, lr}
   b40c2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40c4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ca:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40cc:	f000 feaf 	bl	b4e2e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d0:	b002      	add	sp, #8
   b40d2:	f85d eb04 	ldr.w	lr, [sp], #4
   b40d6:	b003      	add	sp, #12
   b40d8:	4770      	bx	lr

000b40da <setup>:
int analogBufferIndex = 0, copyIndex = 0;
float averageVoltage = 0, tdsValue = 0, Celsius = 0, Fahrenheit = 0, temperature = 25;

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   b40da:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b40dc:	f001 f87a 	bl	b51d4 <_Z16_fetch_usbserialv>
   b40e0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40e4:	f001 f86a 	bl	b51bc <_ZN9USBSerial5beginEl>
  pinMode(PHpin, INPUT);
   b40e8:	2100      	movs	r1, #0
   b40ea:	2013      	movs	r0, #19
   b40ec:	f001 fa84 	bl	b55f8 <pinMode>
  pinMode(TDSpin, INPUT);
}
   b40f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(TDSpin, INPUT);
   b40f4:	2100      	movs	r1, #0
   b40f6:	2011      	movs	r0, #17
   b40f8:	f001 ba7e 	b.w	b55f8 <pinMode>

000b40fc <_Z7getTempv>:
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
  }
  return bTemp;
}

void getTemp () {
   b40fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (tempSensor.read()) {
   b40fe:	4812      	ldr	r0, [pc, #72]	; (b4148 <_Z7getTempv+0x4c>)
   b4100:	f000 fb88 	bl	b4814 <_ZN4DS184readEv>
   b4104:	b1f0      	cbz	r0, b4144 <_Z7getTempv+0x48>
    Serial.printf("Temperature %.2f C %.2f F ", tempSensor.celsius(), tempSensor.fahrenheit());
   b4106:	f001 f865 	bl	b51d4 <_Z16_fetch_usbserialv>
   b410a:	4604      	mov	r4, r0
   b410c:	480e      	ldr	r0, [pc, #56]	; (b4148 <_Z7getTempv+0x4c>)
   b410e:	f000 fba4 	bl	b485a <_ZN4DS187celsiusEv>
   b4112:	480d      	ldr	r0, [pc, #52]	; (b4148 <_Z7getTempv+0x4c>)
   b4114:	ee10 6a10 	vmov	r6, s0
   b4118:	f000 fba2 	bl	b4860 <_ZN4DS1810fahrenheitEv>
   b411c:	4630      	mov	r0, r6
   b411e:	ee10 5a10 	vmov	r5, s0
   b4122:	f001 fc27 	bl	b5974 <__aeabi_f2d>
   b4126:	4602      	mov	r2, r0
   b4128:	460b      	mov	r3, r1
   b412a:	4628      	mov	r0, r5
   b412c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b4130:	f001 fc20 	bl	b5974 <__aeabi_f2d>
   b4134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4138:	e9cd 0100 	strd	r0, r1, [sp]
   b413c:	4903      	ldr	r1, [pc, #12]	; (b414c <_Z7getTempv+0x50>)
   b413e:	4620      	mov	r0, r4
   b4140:	f7ff ffbd 	bl	b40be <_ZN5Print6printfEPKcz>
  }
   b4144:	b004      	add	sp, #16
   b4146:	bd70      	pop	{r4, r5, r6, pc}
   b4148:	2003e610 	.word	0x2003e610
   b414c:	000b5fb0 	.word	0x000b5fb0

000b4150 <loop>:
  getTemp();
   b4150:	f7ff bfd4 	b.w	b40fc <_Z7getTempv>

000b4154 <_GLOBAL__sub_I_tempSensor>:
   b4154:	b510      	push	{r4, lr}
DS18 tempSensor(18);
   b4156:	2200      	movs	r2, #0
              error_(SYSTEM_ERROR_NONE) {
   b4158:	4c0a      	ldr	r4, [pc, #40]	; (b4184 <_GLOBAL__sub_I_tempSensor+0x30>)
   b415a:	480b      	ldr	r0, [pc, #44]	; (b4188 <_GLOBAL__sub_I_tempSensor+0x34>)
   b415c:	2112      	movs	r1, #18
   b415e:	f000 fa6e 	bl	b463e <_ZN4DS18C1Etb>
   b4162:	2300      	movs	r3, #0
   b4164:	e9c4 3300 	strd	r3, r3, [r4]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4168:	2002      	movs	r0, #2
    SleepResult() {}
   b416a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   b416e:	60a3      	str	r3, [r4, #8]
        set_system_mode(mode);
   b4170:	f000 fcc8 	bl	b4b04 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   b4174:	4620      	mov	r0, r4
   b4176:	4a05      	ldr	r2, [pc, #20]	; (b418c <_GLOBAL__sub_I_tempSensor+0x38>)
   b4178:	4905      	ldr	r1, [pc, #20]	; (b4190 <_GLOBAL__sub_I_tempSensor+0x3c>)
   b417a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(SEMI_AUTOMATIC);
   b417e:	f001 ba8b 	b.w	b5698 <__aeabi_atexit>
   b4182:	bf00      	nop
   b4184:	2003e604 	.word	0x2003e604
   b4188:	2003e610 	.word	0x2003e610
   b418c:	2003e600 	.word	0x2003e600
   b4190:	000b40af 	.word	0x000b40af

000b4194 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b4194:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b4196:	6803      	ldr	r3, [r0, #0]
   b4198:	2b2f      	cmp	r3, #47	; 0x2f
{
   b419a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b419c:	d904      	bls.n	b41a8 <nrf_gpio_pin_port_decode+0x14>
   b419e:	4a07      	ldr	r2, [pc, #28]	; (b41bc <nrf_gpio_pin_port_decode+0x28>)
   b41a0:	2100      	movs	r1, #0
   b41a2:	200a      	movs	r0, #10
   b41a4:	f000 fca6 	bl	b4af4 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b41a8:	6823      	ldr	r3, [r4, #0]
   b41aa:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b41ac:	bf83      	ittte	hi
   b41ae:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b41b2:	4803      	ldrhi	r0, [pc, #12]	; (b41c0 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b41b4:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b41b6:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b41ba:	bd10      	pop	{r4, pc}
   b41bc:	000b4905 	.word	0x000b4905
   b41c0:	50000300 	.word	0x50000300

000b41c4 <_ZN7OneWire16pinModeFastInputEv.isra.0>:
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   b41c4:	2100      	movs	r1, #0
   b41c6:	f000 bb7d 	b.w	b48c4 <HAL_Pin_Mode>

000b41ca <_ZN7OneWire17pinModeFastOutputEv.isra.0>:
      HAL_Pin_Mode(_pin, OUTPUT);
   b41ca:	2101      	movs	r1, #1
   b41cc:	f000 bb7a 	b.w	b48c4 <HAL_Pin_Mode>

000b41d0 <_ZN7OneWire11write_bytesEPKhtb.part.0>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
   b41d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b41d4:	4604      	mov	r4, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b41d6:	4f20      	ldr	r7, [pc, #128]	; (b4258 <_ZN7OneWire11write_bytesEPKhtb.part.0+0x88>)
   b41d8:	4e20      	ldr	r6, [pc, #128]	; (b425c <_ZN7OneWire11write_bytesEPKhtb.part.0+0x8c>)
        OneWire::write_bit((bitMask & v) ? 1 : 0);
    }

    if (power)
    {
        noInterrupts();
   b41da:	f001 f825 	bl	b5228 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   b41de:	8825      	ldrh	r5, [r4, #0]
   b41e0:	783b      	ldrb	r3, [r7, #0]
   b41e2:	f3bf 8f5b 	dmb	ish
   b41e6:	f013 0f01 	tst.w	r3, #1
   b41ea:	d109      	bne.n	b4200 <_ZN7OneWire11write_bytesEPKhtb.part.0+0x30>
   b41ec:	4638      	mov	r0, r7
   b41ee:	f7ff ff56 	bl	b409e <__cxa_guard_acquire>
   b41f2:	b128      	cbz	r0, b4200 <_ZN7OneWire11write_bytesEPKhtb.part.0+0x30>
   b41f4:	f000 fb5e 	bl	b48b4 <HAL_Pin_Map>
   b41f8:	6030      	str	r0, [r6, #0]
   b41fa:	4638      	mov	r0, r7
   b41fc:	f7ff ff54 	bl	b40a8 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4200:	6833      	ldr	r3, [r6, #0]
   b4202:	012d      	lsls	r5, r5, #4
   b4204:	5d5b      	ldrb	r3, [r3, r5]
   b4206:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b420a:	783b      	ldrb	r3, [r7, #0]
   b420c:	f3bf 8f5b 	dmb	ish
   b4210:	07db      	lsls	r3, r3, #31
   b4212:	d409      	bmi.n	b4228 <_ZN7OneWire11write_bytesEPKhtb.part.0+0x58>
   b4214:	4810      	ldr	r0, [pc, #64]	; (b4258 <_ZN7OneWire11write_bytesEPKhtb.part.0+0x88>)
   b4216:	f7ff ff42 	bl	b409e <__cxa_guard_acquire>
   b421a:	b128      	cbz	r0, b4228 <_ZN7OneWire11write_bytesEPKhtb.part.0+0x58>
   b421c:	f000 fb4a 	bl	b48b4 <HAL_Pin_Map>
   b4220:	6030      	str	r0, [r6, #0]
   b4222:	480d      	ldr	r0, [pc, #52]	; (b4258 <_ZN7OneWire11write_bytesEPKhtb.part.0+0x88>)
   b4224:	f7ff ff40 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4228:	6833      	ldr	r3, [r6, #0]
   b422a:	441d      	add	r5, r3
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b422c:	a801      	add	r0, sp, #4
   b422e:	786b      	ldrb	r3, [r5, #1]
   b4230:	f003 031f 	and.w	r3, r3, #31
   b4234:	ea43 0308 	orr.w	r3, r3, r8
   b4238:	9301      	str	r3, [sp, #4]
   b423a:	f7ff ffab 	bl	b4194 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b423e:	9a01      	ldr	r2, [sp, #4]
   b4240:	2301      	movs	r3, #1
   b4242:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b4244:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        pinModeFastOutput(); // Drive pin High when power is True
   b4248:	8820      	ldrh	r0, [r4, #0]
   b424a:	f7ff ffbe 	bl	b41ca <_ZN7OneWire17pinModeFastOutputEv.isra.0>

        interrupts();
    }
}
   b424e:	b002      	add	sp, #8
   b4250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        interrupts();
   b4254:	f000 bfea 	b.w	b522c <_Z10interruptsv>
   b4258:	2003e63c 	.word	0x2003e63c
   b425c:	2003e640 	.word	0x2003e640

000b4260 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
    inline void digitalWriteFastLow() {
   b4260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4262:	4d1b      	ldr	r5, [pc, #108]	; (b42d0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x70>)
   b4264:	4e1b      	ldr	r6, [pc, #108]	; (b42d4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x74>)
   b4266:	782b      	ldrb	r3, [r5, #0]
   b4268:	f3bf 8f5b 	dmb	ish
   b426c:	f013 0f01 	tst.w	r3, #1
   b4270:	4604      	mov	r4, r0
   b4272:	d109      	bne.n	b4288 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x28>
   b4274:	4628      	mov	r0, r5
   b4276:	f7ff ff12 	bl	b409e <__cxa_guard_acquire>
   b427a:	b128      	cbz	r0, b4288 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x28>
   b427c:	f000 fb1a 	bl	b48b4 <HAL_Pin_Map>
   b4280:	6030      	str	r0, [r6, #0]
   b4282:	4628      	mov	r0, r5
   b4284:	f7ff ff10 	bl	b40a8 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4288:	6833      	ldr	r3, [r6, #0]
   b428a:	0124      	lsls	r4, r4, #4
   b428c:	5d1b      	ldrb	r3, [r3, r4]
   b428e:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4290:	782b      	ldrb	r3, [r5, #0]
   b4292:	f3bf 8f5b 	dmb	ish
   b4296:	07db      	lsls	r3, r3, #31
   b4298:	d409      	bmi.n	b42ae <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x4e>
   b429a:	480d      	ldr	r0, [pc, #52]	; (b42d0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x70>)
   b429c:	f7ff feff 	bl	b409e <__cxa_guard_acquire>
   b42a0:	b128      	cbz	r0, b42ae <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x4e>
   b42a2:	f000 fb07 	bl	b48b4 <HAL_Pin_Map>
   b42a6:	6030      	str	r0, [r6, #0]
   b42a8:	4809      	ldr	r0, [pc, #36]	; (b42d0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x70>)
   b42aa:	f7ff fefd 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b42ae:	6830      	ldr	r0, [r6, #0]
   b42b0:	4404      	add	r4, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b42b2:	a801      	add	r0, sp, #4
   b42b4:	7863      	ldrb	r3, [r4, #1]
   b42b6:	f003 031f 	and.w	r3, r3, #31
   b42ba:	433b      	orrs	r3, r7
   b42bc:	9301      	str	r3, [sp, #4]
   b42be:	f7ff ff69 	bl	b4194 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b42c2:	9a01      	ldr	r2, [sp, #4]
   b42c4:	2301      	movs	r3, #1
   b42c6:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b42c8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    }
   b42cc:	b003      	add	sp, #12
   b42ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b42d0:	2003e63c 	.word	0x2003e63c
   b42d4:	2003e640 	.word	0x2003e640

000b42d8 <_ZN7OneWire15digitalReadFastEv.isra.0>:
    }

    inline uint8_t digitalReadFast(void){
   b42d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b42dc:	4e20      	ldr	r6, [pc, #128]	; (b4360 <_ZN7OneWire15digitalReadFastEv.isra.0+0x88>)
   b42de:	4f21      	ldr	r7, [pc, #132]	; (b4364 <_ZN7OneWire15digitalReadFastEv.isra.0+0x8c>)
   b42e0:	7833      	ldrb	r3, [r6, #0]
   b42e2:	f3bf 8f5b 	dmb	ish
   b42e6:	f013 0f01 	tst.w	r3, #1
   b42ea:	4605      	mov	r5, r0
   b42ec:	d109      	bne.n	b4302 <_ZN7OneWire15digitalReadFastEv.isra.0+0x2a>
   b42ee:	4630      	mov	r0, r6
   b42f0:	f7ff fed5 	bl	b409e <__cxa_guard_acquire>
   b42f4:	b128      	cbz	r0, b4302 <_ZN7OneWire15digitalReadFastEv.isra.0+0x2a>
   b42f6:	f000 fadd 	bl	b48b4 <HAL_Pin_Map>
   b42fa:	6038      	str	r0, [r7, #0]
   b42fc:	4630      	mov	r0, r6
   b42fe:	f7ff fed3 	bl	b40a8 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4302:	683b      	ldr	r3, [r7, #0]
   b4304:	012d      	lsls	r5, r5, #4
   b4306:	5d5c      	ldrb	r4, [r3, r5]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4308:	7833      	ldrb	r3, [r6, #0]
   b430a:	f3bf 8f5b 	dmb	ish
   b430e:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4310:	ea4f 1844 	mov.w	r8, r4, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4314:	d409      	bmi.n	b432a <_ZN7OneWire15digitalReadFastEv.isra.0+0x52>
   b4316:	4812      	ldr	r0, [pc, #72]	; (b4360 <_ZN7OneWire15digitalReadFastEv.isra.0+0x88>)
   b4318:	f7ff fec1 	bl	b409e <__cxa_guard_acquire>
   b431c:	b128      	cbz	r0, b432a <_ZN7OneWire15digitalReadFastEv.isra.0+0x52>
   b431e:	f000 fac9 	bl	b48b4 <HAL_Pin_Map>
   b4322:	6038      	str	r0, [r7, #0]
   b4324:	480e      	ldr	r0, [pc, #56]	; (b4360 <_ZN7OneWire15digitalReadFastEv.isra.0+0x88>)
   b4326:	f7ff febf 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b432a:	6838      	ldr	r0, [r7, #0]
   b432c:	4405      	add	r5, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b432e:	a801      	add	r0, sp, #4
   b4330:	786c      	ldrb	r4, [r5, #1]
   b4332:	f004 041f 	and.w	r4, r4, #31
   b4336:	ea44 0408 	orr.w	r4, r4, r8
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   b433a:	9401      	str	r4, [sp, #4]
   b433c:	f7ff ff2a 	bl	b4194 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   b4340:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return nrf_gpio_pin_read(nrf_pin);
   b4344:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b4346:	a801      	add	r0, sp, #4
   b4348:	f7ff ff24 	bl	b4194 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b434c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   b434e:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b4352:	40d8      	lsrs	r0, r3
      return pinReadFast(_pin);
    }
   b4354:	f000 0001 	and.w	r0, r0, #1
   b4358:	b002      	add	sp, #8
   b435a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b435e:	bf00      	nop
   b4360:	2003e63c 	.word	0x2003e63c
   b4364:	2003e640 	.word	0x2003e640

000b4368 <_ZN7OneWireC1Et>:
OneWire::OneWire(uint16_t pin)
   b4368:	b538      	push	{r3, r4, r5, lr}
   b436a:	4604      	mov	r4, r0
   b436c:	460d      	mov	r5, r1
    pinMode(pin, INPUT);
   b436e:	4628      	mov	r0, r5
   b4370:	2100      	movs	r1, #0
   b4372:	f001 f941 	bl	b55f8 <pinMode>
    _pin = pin;
   b4376:	8025      	strh	r5, [r4, #0]
}
   b4378:	4620      	mov	r0, r4
   b437a:	bd38      	pop	{r3, r4, r5, pc}

000b437c <_ZN7OneWire5resetEv>:
{
   b437c:	b570      	push	{r4, r5, r6, lr}
   b437e:	4605      	mov	r5, r0
    noInterrupts();
   b4380:	f000 ff52 	bl	b5228 <_Z12noInterruptsv>
    pinModeFastInput();
   b4384:	8828      	ldrh	r0, [r5, #0]
   b4386:	f7ff ff1d 	bl	b41c4 <_ZN7OneWire16pinModeFastInputEv.isra.0>
    interrupts();
   b438a:	f000 ff4f 	bl	b522c <_Z10interruptsv>
   b438e:	247d      	movs	r4, #125	; 0x7d
        if (--retries == 0)
   b4390:	3c01      	subs	r4, #1
   b4392:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   b4396:	d02b      	beq.n	b43f0 <_ZN7OneWire5resetEv+0x74>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4398:	2002      	movs	r0, #2
   b439a:	f000 fab3 	bl	b4904 <HAL_Delay_Microseconds>
    } while (!digitalReadFast());
   b439e:	8828      	ldrh	r0, [r5, #0]
   b43a0:	f7ff ff9a 	bl	b42d8 <_ZN7OneWire15digitalReadFastEv.isra.0>
   b43a4:	2800      	cmp	r0, #0
   b43a6:	d0f3      	beq.n	b4390 <_ZN7OneWire5resetEv+0x14>
    noInterrupts();
   b43a8:	f000 ff3e 	bl	b5228 <_Z12noInterruptsv>
    digitalWriteFastLow();
   b43ac:	8828      	ldrh	r0, [r5, #0]
   b43ae:	f7ff ff57 	bl	b4260 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    pinModeFastOutput(); // drive output low
   b43b2:	8828      	ldrh	r0, [r5, #0]
   b43b4:	f7ff ff09 	bl	b41ca <_ZN7OneWire17pinModeFastOutputEv.isra.0>
    interrupts();
   b43b8:	f000 ff38 	bl	b522c <_Z10interruptsv>
   b43bc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   b43c0:	f000 faa0 	bl	b4904 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   b43c4:	f000 faae 	bl	b4924 <HAL_disable_irq>
   b43c8:	4606      	mov	r6, r0
        pinModeFastInput(); // allow it to float
   b43ca:	8828      	ldrh	r0, [r5, #0]
   b43cc:	f7ff fefa 	bl	b41c4 <_ZN7OneWire16pinModeFastInputEv.isra.0>
   b43d0:	2046      	movs	r0, #70	; 0x46
   b43d2:	f000 fa97 	bl	b4904 <HAL_Delay_Microseconds>
        r = !digitalReadFast();
   b43d6:	8828      	ldrh	r0, [r5, #0]
   b43d8:	f7ff ff7e 	bl	b42d8 <_ZN7OneWire15digitalReadFastEv.isra.0>
   b43dc:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   b43e0:	4630      	mov	r0, r6
   b43e2:	f000 faa7 	bl	b4934 <HAL_enable_irq>
   b43e6:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   b43ea:	0964      	lsrs	r4, r4, #5
   b43ec:	f000 fa8a 	bl	b4904 <HAL_Delay_Microseconds>
}
   b43f0:	4620      	mov	r0, r4
   b43f2:	bd70      	pop	{r4, r5, r6, pc}

000b43f4 <_ZN7OneWire9write_bitEh>:
{
   b43f4:	b538      	push	{r3, r4, r5, lr}
    if (v & 1)
   b43f6:	07cb      	lsls	r3, r1, #31
{
   b43f8:	4604      	mov	r4, r0
    if (v & 1)
   b43fa:	d516      	bpl.n	b442a <_ZN7OneWire9write_bitEh+0x36>
		prev = HAL_disable_irq();
   b43fc:	f000 fa92 	bl	b4924 <HAL_disable_irq>
   b4400:	4605      	mov	r5, r0
            digitalWriteFastLow();
   b4402:	8820      	ldrh	r0, [r4, #0]
   b4404:	f7ff ff2c 	bl	b4260 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
            pinModeFastOutput(); // drive output low
   b4408:	8820      	ldrh	r0, [r4, #0]
   b440a:	f7ff fede 	bl	b41ca <_ZN7OneWire17pinModeFastOutputEv.isra.0>
   b440e:	2001      	movs	r0, #1
   b4410:	f000 fa78 	bl	b4904 <HAL_Delay_Microseconds>
            pinModeFastInput(); // float high
   b4414:	8820      	ldrh	r0, [r4, #0]
   b4416:	f7ff fed5 	bl	b41c4 <_ZN7OneWire16pinModeFastInputEv.isra.0>
		HAL_enable_irq(prev);
   b441a:	4628      	mov	r0, r5
   b441c:	f000 fa8a 	bl	b4934 <HAL_enable_irq>
   b4420:	203b      	movs	r0, #59	; 0x3b
}
   b4422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4426:	f000 ba6d 	b.w	b4904 <HAL_Delay_Microseconds>
		prev = HAL_disable_irq();
   b442a:	f000 fa7b 	bl	b4924 <HAL_disable_irq>
   b442e:	4605      	mov	r5, r0
            digitalWriteFastLow();
   b4430:	8820      	ldrh	r0, [r4, #0]
   b4432:	f7ff ff15 	bl	b4260 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
            pinModeFastOutput(); // drive output low
   b4436:	8820      	ldrh	r0, [r4, #0]
   b4438:	f7ff fec7 	bl	b41ca <_ZN7OneWire17pinModeFastOutputEv.isra.0>
   b443c:	2041      	movs	r0, #65	; 0x41
   b443e:	f000 fa61 	bl	b4904 <HAL_Delay_Microseconds>
            pinModeFastInput(); // float high
   b4442:	8820      	ldrh	r0, [r4, #0]
   b4444:	f7ff febe 	bl	b41c4 <_ZN7OneWire16pinModeFastInputEv.isra.0>
		HAL_enable_irq(prev);
   b4448:	4628      	mov	r0, r5
   b444a:	f000 fa73 	bl	b4934 <HAL_enable_irq>
   b444e:	2005      	movs	r0, #5
   b4450:	e7e7      	b.n	b4422 <_ZN7OneWire9write_bitEh+0x2e>

000b4452 <_ZN7OneWire8read_bitEv>:
{
   b4452:	b538      	push	{r3, r4, r5, lr}
   b4454:	4604      	mov	r4, r0
		prev = HAL_disable_irq();
   b4456:	f000 fa65 	bl	b4924 <HAL_disable_irq>
   b445a:	4605      	mov	r5, r0
        digitalWriteFastLow();
   b445c:	8820      	ldrh	r0, [r4, #0]
   b445e:	f7ff feff 	bl	b4260 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
        pinModeFastOutput();
   b4462:	8820      	ldrh	r0, [r4, #0]
   b4464:	f7ff feb1 	bl	b41ca <_ZN7OneWire17pinModeFastOutputEv.isra.0>
   b4468:	2001      	movs	r0, #1
   b446a:	f000 fa4b 	bl	b4904 <HAL_Delay_Microseconds>
        pinModeFastInput(); // let pin float, pull up will raise
   b446e:	8820      	ldrh	r0, [r4, #0]
   b4470:	f7ff fea8 	bl	b41c4 <_ZN7OneWire16pinModeFastInputEv.isra.0>
   b4474:	200d      	movs	r0, #13
   b4476:	f000 fa45 	bl	b4904 <HAL_Delay_Microseconds>
        r = digitalReadFast();
   b447a:	8820      	ldrh	r0, [r4, #0]
   b447c:	f7ff ff2c 	bl	b42d8 <_ZN7OneWire15digitalReadFastEv.isra.0>
   b4480:	4604      	mov	r4, r0
		HAL_enable_irq(prev);
   b4482:	4628      	mov	r0, r5
   b4484:	f000 fa56 	bl	b4934 <HAL_enable_irq>
   b4488:	202e      	movs	r0, #46	; 0x2e
   b448a:	f000 fa3b 	bl	b4904 <HAL_Delay_Microseconds>
}
   b448e:	4620      	mov	r0, r4
   b4490:	bd38      	pop	{r3, r4, r5, pc}

000b4492 <_ZN7OneWire5writeEhh>:
{
   b4492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4494:	460f      	mov	r7, r1
   b4496:	4615      	mov	r5, r2
   b4498:	2608      	movs	r6, #8
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   b449a:	2401      	movs	r4, #1
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   b449c:	4227      	tst	r7, r4
   b449e:	bf14      	ite	ne
   b44a0:	2101      	movne	r1, #1
   b44a2:	2100      	moveq	r1, #0
   b44a4:	9001      	str	r0, [sp, #4]
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   b44a6:	0064      	lsls	r4, r4, #1
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   b44a8:	f7ff ffa4 	bl	b43f4 <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   b44ac:	3e01      	subs	r6, #1
   b44ae:	9801      	ldr	r0, [sp, #4]
   b44b0:	b2e4      	uxtb	r4, r4
   b44b2:	d1f3      	bne.n	b449c <_ZN7OneWire5writeEhh+0xa>
    if (power)
   b44b4:	b125      	cbz	r5, b44c0 <_ZN7OneWire5writeEhh+0x2e>
}
   b44b6:	b003      	add	sp, #12
   b44b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b44bc:	f7ff be88 	b.w	b41d0 <_ZN7OneWire11write_bytesEPKhtb.part.0>
   b44c0:	b003      	add	sp, #12
   b44c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b44c4 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   b44c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b44c6:	4607      	mov	r7, r0
   b44c8:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   b44ca:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   b44cc:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   b44ce:	4638      	mov	r0, r7
   b44d0:	f7ff ffbf 	bl	b4452 <_ZN7OneWire8read_bitEv>
   b44d4:	b100      	cbz	r0, b44d8 <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   b44d6:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   b44d8:	0064      	lsls	r4, r4, #1
   b44da:	3e01      	subs	r6, #1
   b44dc:	b2e4      	uxtb	r4, r4
   b44de:	d1f6      	bne.n	b44ce <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
   b44e0:	4628      	mov	r0, r5
   b44e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b44e4 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   b44e4:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   b44e6:	2200      	movs	r2, #0
{
   b44e8:	460c      	mov	r4, r1
    write(0x55); // Choose ROM
   b44ea:	2155      	movs	r1, #85	; 0x55
{
   b44ec:	4606      	mov	r6, r0
    write(0x55); // Choose ROM
   b44ee:	f7ff ffd0 	bl	b4492 <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++)
   b44f2:	1e65      	subs	r5, r4, #1
   b44f4:	3407      	adds	r4, #7
        write(rom[i]);
   b44f6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   b44fa:	2200      	movs	r2, #0
   b44fc:	4630      	mov	r0, r6
   b44fe:	f7ff ffc8 	bl	b4492 <_ZN7OneWire5writeEhh>
    for (i = 0; i < 8; i++)
   b4502:	42a5      	cmp	r5, r4
   b4504:	d1f7      	bne.n	b44f6 <_ZN7OneWire6selectEPKh+0x12>
}
   b4506:	bd70      	pop	{r4, r5, r6, pc}

000b4508 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   b4508:	2300      	movs	r3, #0
   b450a:	8143      	strh	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   b450c:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   b450e:	f8c0 3002 	str.w	r3, [r0, #2]
   b4512:	f8c0 3006 	str.w	r3, [r0, #6]
        if (i == 0)
            break;
    }
}
   b4516:	4770      	bx	lr

000b4518 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   b4518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   b451c:	7b05      	ldrb	r5, [r0, #12]
{
   b451e:	4604      	mov	r4, r0
   b4520:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
   b4522:	b16d      	cbz	r5, b4540 <_ZN7OneWire6searchEPh+0x28>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   b4524:	2000      	movs	r0, #0
   b4526:	8160      	strh	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   b4528:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   b452a:	1ca3      	adds	r3, r4, #2
   b452c:	f108 38ff 	add.w	r8, r8, #4294967295
   b4530:	340a      	adds	r4, #10
        newAddr[i] = ROM_NO[i];
   b4532:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4536:	f808 2f01 	strb.w	r2, [r8, #1]!
    for (int i = 0; i < 8; i++)
   b453a:	429c      	cmp	r4, r3
   b453c:	d1f9      	bne.n	b4532 <_ZN7OneWire6searchEPh+0x1a>
   b453e:	e004      	b.n	b454a <_ZN7OneWire6searchEPh+0x32>
        if (!reset())
   b4540:	f7ff ff1c 	bl	b437c <_ZN7OneWire5resetEv>
   b4544:	b918      	cbnz	r0, b454e <_ZN7OneWire6searchEPh+0x36>
            LastDiscrepancy = 0;
   b4546:	8160      	strh	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   b4548:	7320      	strb	r0, [r4, #12]

    return search_result;
}
   b454a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write(0xF0);
   b454e:	462a      	mov	r2, r5
   b4550:	21f0      	movs	r1, #240	; 0xf0
   b4552:	4620      	mov	r0, r4
   b4554:	f7ff ff9d 	bl	b4492 <_ZN7OneWire5writeEhh>
    rom_byte_mask = 1;
   b4558:	2701      	movs	r7, #1
    last_zero = 0;
   b455a:	46aa      	mov	sl, r5
    id_bit_number = 1;
   b455c:	463e      	mov	r6, r7
            id_bit = read_bit();
   b455e:	4620      	mov	r0, r4
   b4560:	f7ff ff77 	bl	b4452 <_ZN7OneWire8read_bitEv>
   b4564:	4681      	mov	r9, r0
   b4566:	4683      	mov	fp, r0
            cmp_id_bit = read_bit();
   b4568:	4620      	mov	r0, r4
   b456a:	f7ff ff72 	bl	b4452 <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1))
   b456e:	f1b9 0f01 	cmp.w	r9, #1
   b4572:	d10f      	bne.n	b4594 <_ZN7OneWire6searchEPh+0x7c>
   b4574:	2801      	cmp	r0, #1
   b4576:	d117      	bne.n	b45a8 <_ZN7OneWire6searchEPh+0x90>
        if (!(id_bit_number < 65))
   b4578:	2e40      	cmp	r6, #64	; 0x40
   b457a:	d9d3      	bls.n	b4524 <_ZN7OneWire6searchEPh+0xc>
            LastDiscrepancy = last_zero;
   b457c:	f884 a00a 	strb.w	sl, [r4, #10]
            if (LastDiscrepancy == 0)
   b4580:	f1ba 0f00 	cmp.w	sl, #0
   b4584:	d101      	bne.n	b458a <_ZN7OneWire6searchEPh+0x72>
                LastDeviceFlag = TRUE;
   b4586:	2301      	movs	r3, #1
   b4588:	7323      	strb	r3, [r4, #12]
    if (!search_result || !ROM_NO[0])
   b458a:	78a3      	ldrb	r3, [r4, #2]
   b458c:	2b00      	cmp	r3, #0
   b458e:	d0c9      	beq.n	b4524 <_ZN7OneWire6searchEPh+0xc>
            search_result = TRUE;
   b4590:	2001      	movs	r0, #1
   b4592:	e7ca      	b.n	b452a <_ZN7OneWire6searchEPh+0x12>
                if (id_bit != cmp_id_bit)
   b4594:	4581      	cmp	r9, r0
   b4596:	eb04 0305 	add.w	r3, r4, r5
   b459a:	d122      	bne.n	b45e2 <_ZN7OneWire6searchEPh+0xca>
                    if (id_bit_number < LastDiscrepancy)
   b459c:	7aa2      	ldrb	r2, [r4, #10]
   b459e:	42b2      	cmp	r2, r6
   b45a0:	d918      	bls.n	b45d4 <_ZN7OneWire6searchEPh+0xbc>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   b45a2:	789a      	ldrb	r2, [r3, #2]
                    if (search_direction == 0)
   b45a4:	4217      	tst	r7, r2
   b45a6:	d016      	beq.n	b45d6 <_ZN7OneWire6searchEPh+0xbe>
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   b45a8:	1962      	adds	r2, r4, r5
   b45aa:	f04f 0b01 	mov.w	fp, #1
   b45ae:	7893      	ldrb	r3, [r2, #2]
   b45b0:	433b      	orrs	r3, r7
   b45b2:	7093      	strb	r3, [r2, #2]
                write_bit(search_direction);
   b45b4:	4659      	mov	r1, fp
   b45b6:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
   b45b8:	007f      	lsls	r7, r7, #1
                write_bit(search_direction);
   b45ba:	f7ff ff1b 	bl	b43f4 <_ZN7OneWire9write_bitEh>
                id_bit_number++;
   b45be:	3601      	adds	r6, #1
                if (rom_byte_mask == 0)
   b45c0:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
                id_bit_number++;
   b45c4:	b2f6      	uxtb	r6, r6
                if (rom_byte_mask == 0)
   b45c6:	d1ca      	bne.n	b455e <_ZN7OneWire6searchEPh+0x46>
                    rom_byte_number++;
   b45c8:	3501      	adds	r5, #1
   b45ca:	b2ed      	uxtb	r5, r5
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   b45cc:	2d08      	cmp	r5, #8
   b45ce:	d0d3      	beq.n	b4578 <_ZN7OneWire6searchEPh+0x60>
                    rom_byte_mask = 1;
   b45d0:	2701      	movs	r7, #1
   b45d2:	e7c4      	b.n	b455e <_ZN7OneWire6searchEPh+0x46>
                    if (search_direction == 0)
   b45d4:	d0e8      	beq.n	b45a8 <_ZN7OneWire6searchEPh+0x90>
                        if (last_zero < 9)
   b45d6:	2e08      	cmp	r6, #8
   b45d8:	d800      	bhi.n	b45dc <_ZN7OneWire6searchEPh+0xc4>
                            LastFamilyDiscrepancy = last_zero;
   b45da:	72e6      	strb	r6, [r4, #11]
                if (search_direction == 1)
   b45dc:	f04f 0b00 	mov.w	fp, #0
   b45e0:	46b2      	mov	sl, r6
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   b45e2:	789a      	ldrb	r2, [r3, #2]
   b45e4:	ea22 0207 	bic.w	r2, r2, r7
   b45e8:	709a      	strb	r2, [r3, #2]
   b45ea:	e7e3      	b.n	b45b4 <_ZN7OneWire6searchEPh+0x9c>

000b45ec <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   b45ec:	b530      	push	{r4, r5, lr}
   b45ee:	4602      	mov	r2, r0
    uint8_t crc = 0;
   b45f0:	4401      	add	r1, r0
   b45f2:	2000      	movs	r0, #0

    while (len--)
   b45f4:	428a      	cmp	r2, r1
   b45f6:	d013      	beq.n	b4620 <_ZN7OneWire4crc8EPhh+0x34>
    {
        uint8_t inbyte = *addr++;
   b45f8:	f812 5b01 	ldrb.w	r5, [r2], #1
   b45fc:	2408      	movs	r4, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   b45fe:	ea80 0305 	eor.w	r3, r0, r5
            crc >>= 1;
            if (mix)
   b4602:	f013 0f01 	tst.w	r3, #1
   b4606:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   b460a:	bf1c      	itt	ne
   b460c:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   b4610:	b2d8      	uxtbne	r0, r3
        for (uint8_t i = 8; i; i--)
   b4612:	1e63      	subs	r3, r4, #1
   b4614:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
            inbyte >>= 1;
   b4618:	ea4f 0555 	mov.w	r5, r5, lsr #1
        for (uint8_t i = 8; i; i--)
   b461c:	d1ef      	bne.n	b45fe <_ZN7OneWire4crc8EPhh+0x12>
   b461e:	e7e9      	b.n	b45f4 <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
   b4620:	bd30      	pop	{r4, r5, pc}

000b4622 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
   b4622:	2300      	movs	r3, #0
  _celsius = 0;
   b4624:	2200      	movs	r2, #0
  _raw = 0;
   b4626:	8243      	strh	r3, [r0, #18]
  _celsius = 0;
   b4628:	6142      	str	r2, [r0, #20]
  memset(_addr, 0, sizeof(_addr));
   b462a:	6183      	str	r3, [r0, #24]
   b462c:	61c3      	str	r3, [r0, #28]
  memset(_data, 0, sizeof(_data));
   b462e:	6203      	str	r3, [r0, #32]
   b4630:	6243      	str	r3, [r0, #36]	; 0x24
   b4632:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _type = WIRE_UNKNOWN;
   b4636:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _searchDone = false;
   b463a:	8543      	strh	r3, [r0, #42]	; 0x2a
  _crcError = false;
}
   b463c:	4770      	bx	lr

000b463e <_ZN4DS18C1Etb>:
DS18::DS18(uint16_t pin, bool parasitic)
   b463e:	b538      	push	{r3, r4, r5, lr}
   b4640:	4604      	mov	r4, r0
   b4642:	4615      	mov	r5, r2
  _conversionTime{1000}
   b4644:	f7ff fe90 	bl	b4368 <_ZN7OneWireC1Et>
   b4648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  init();
   b464c:	4620      	mov	r0, r4
  _conversionTime{1000}
   b464e:	73a5      	strb	r5, [r4, #14]
   b4650:	8223      	strh	r3, [r4, #16]
  init();
   b4652:	f7ff ffe6 	bl	b4622 <_ZN4DS184initEv>
}
   b4656:	bd38      	pop	{r3, r4, r5, pc}

000b4658 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   b4658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
   b465c:	680b      	ldr	r3, [r1, #0]
   b465e:	6183      	str	r3, [r0, #24]
   b4660:	684b      	ldr	r3, [r1, #4]
   b4662:	61c3      	str	r3, [r0, #28]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   b4664:	780b      	ldrb	r3, [r1, #0]
   b4666:	2b26      	cmp	r3, #38	; 0x26
bool DS18::read(uint8_t addr[8]) {
   b4668:	4604      	mov	r4, r0
  memcpy(_addr, addr, sizeof(_addr));
   b466a:	f100 0518 	add.w	r5, r0, #24
  switch (addr[0]) {
   b466e:	d060      	beq.n	b4732 <_ZN4DS184readEPh+0xda>
   b4670:	d808      	bhi.n	b4684 <_ZN4DS184readEPh+0x2c>
   b4672:	2b10      	cmp	r3, #16
   b4674:	d00a      	beq.n	b468c <_ZN4DS184readEPh+0x34>
   b4676:	2b22      	cmp	r3, #34	; 0x22
   b4678:	d059      	beq.n	b472e <_ZN4DS184readEPh+0xd6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
   b467a:	2000      	movs	r0, #0
   b467c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
      }
  }

  // Got a good reading!
  return true;
}
   b4680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (addr[0]) {
   b4684:	2b28      	cmp	r3, #40	; 0x28
   b4686:	d1f8      	bne.n	b467a <_ZN4DS184readEPh+0x22>
    case 0x28: _type = WIRE_DS18B20; break;
   b4688:	2302      	movs	r3, #2
   b468a:	e000      	b.n	b468e <_ZN4DS184readEPh+0x36>
    case 0x10: _type = WIRE_DS1820; break;
   b468c:	2301      	movs	r3, #1
    case 0x26: _type = WIRE_DS2438; break;
   b468e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  _wire.reset();               // first clear the 1-wire bus
   b4692:	4620      	mov	r0, r4
   b4694:	f7ff fe72 	bl	b437c <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
   b4698:	4629      	mov	r1, r5
   b469a:	4620      	mov	r0, r4
   b469c:	f7ff ff22 	bl	b44e4 <_ZN7OneWire6selectEPKh>
  _wire.write(0x44, power);    // tell it to start a conversion
   b46a0:	7ba2      	ldrb	r2, [r4, #14]
   b46a2:	2144      	movs	r1, #68	; 0x44
   b46a4:	4620      	mov	r0, r4
   b46a6:	f7ff fef4 	bl	b4492 <_ZN7OneWire5writeEhh>
  delay(_conversionTime); // wait for conversion to finish
   b46aa:	8a20      	ldrh	r0, [r4, #16]
   b46ac:	f000 fc08 	bl	b4ec0 <delay>
  _wire.reset();
   b46b0:	4620      	mov	r0, r4
   b46b2:	f7ff fe63 	bl	b437c <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   b46b6:	4629      	mov	r1, r5
   b46b8:	4620      	mov	r0, r4
   b46ba:	f7ff ff13 	bl	b44e4 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
   b46be:	2200      	movs	r2, #0
   b46c0:	21b8      	movs	r1, #184	; 0xb8
   b46c2:	4620      	mov	r0, r4
   b46c4:	f7ff fee5 	bl	b4492 <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
   b46c8:	2200      	movs	r2, #0
   b46ca:	4611      	mov	r1, r2
   b46cc:	4620      	mov	r0, r4
   b46ce:	f7ff fee0 	bl	b4492 <_ZN7OneWire5writeEhh>
  _wire.reset();
   b46d2:	4620      	mov	r0, r4
   b46d4:	f7ff fe52 	bl	b437c <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   b46d8:	4629      	mov	r1, r5
   b46da:	4620      	mov	r0, r4
   b46dc:	f7ff ff02 	bl	b44e4 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
   b46e0:	2200      	movs	r2, #0
   b46e2:	21be      	movs	r1, #190	; 0xbe
   b46e4:	4620      	mov	r0, r4
   b46e6:	f7ff fed4 	bl	b4492 <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
   b46ea:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   b46ee:	2b04      	cmp	r3, #4
   b46f0:	d104      	bne.n	b46fc <_ZN4DS184readEPh+0xa4>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
   b46f2:	2200      	movs	r2, #0
   b46f4:	4611      	mov	r1, r2
   b46f6:	4620      	mov	r0, r4
   b46f8:	f7ff fecb 	bl	b4492 <_ZN7OneWire5writeEhh>
   b46fc:	f104 0520 	add.w	r5, r4, #32
   b4700:	f104 0729 	add.w	r7, r4, #41	; 0x29
   b4704:	462e      	mov	r6, r5
    _data[i] = _wire.read();
   b4706:	4620      	mov	r0, r4
   b4708:	f7ff fedc 	bl	b44c4 <_ZN7OneWire4readEv>
   b470c:	f805 0b01 	strb.w	r0, [r5], #1
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
   b4710:	42bd      	cmp	r5, r7
   b4712:	d1f8      	bne.n	b4706 <_ZN4DS184readEPh+0xae>
  if (OneWire::crc8(_data, 8) != _data[8]) {
   b4714:	2108      	movs	r1, #8
   b4716:	4630      	mov	r0, r6
   b4718:	f7ff ff68 	bl	b45ec <_ZN7OneWire4crc8EPhh>
   b471c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b4720:	4283      	cmp	r3, r0
   b4722:	d008      	beq.n	b4736 <_ZN4DS184readEPh+0xde>
    _crcError = true;
   b4724:	2301      	movs	r3, #1
   b4726:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   b472a:	2000      	movs	r0, #0
   b472c:	e7a8      	b.n	b4680 <_ZN4DS184readEPh+0x28>
    case 0x22: _type = WIRE_DS1822; break;
   b472e:	2303      	movs	r3, #3
   b4730:	e7ad      	b.n	b468e <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
   b4732:	2304      	movs	r3, #4
   b4734:	e7ab      	b.n	b468e <_ZN4DS184readEPh+0x36>
  _raw = (_data[1] << 8) | _data[0];
   b4736:	8c23      	ldrh	r3, [r4, #32]
   b4738:	8263      	strh	r3, [r4, #18]
  if (_type == WIRE_DS2438) {
   b473a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
  _raw = (_data[1] << 8) | _data[0];
   b473e:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
  if (_type == WIRE_DS2438) {
   b4742:	2b04      	cmp	r3, #4
   b4744:	d14d      	bne.n	b47e2 <_ZN4DS184readEPh+0x18a>
    _raw = (_data[2] << 8) | _data[1];
   b4746:	f894 8022 	ldrb.w	r8, [r4, #34]	; 0x22
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   b474a:	ee07 8a90 	vmov	s15, r8
   b474e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _raw = (_data[2] << 8) | _data[1];
   b4752:	ea45 2308 	orr.w	r3, r5, r8, lsl #8
      _data[1] = (_data[1] >> 3) & 0x1f;
   b4756:	08ed      	lsrs	r5, r5, #3
    _raw = (_data[2] << 8) | _data[1];
   b4758:	8263      	strh	r3, [r4, #18]
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   b475a:	ee17 0a90 	vmov	r0, s15
      _data[1] = (_data[1] >> 3) & 0x1f;
   b475e:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   b4762:	f001 f907 	bl	b5974 <__aeabi_f2d>
   b4766:	ee07 5a90 	vmov	s15, r5
   b476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b476e:	4606      	mov	r6, r0
   b4770:	ee17 0a90 	vmov	r0, s15
   b4774:	460f      	mov	r7, r1
   b4776:	f001 f8fd 	bl	b5974 <__aeabi_f2d>
   b477a:	4b25      	ldr	r3, [pc, #148]	; (b4810 <_ZN4DS184readEPh+0x1b8>)
   b477c:	2200      	movs	r2, #0
   b477e:	f001 f951 	bl	b5a24 <__aeabi_dmul>
      if (_data[2] > 127) {
   b4782:	f018 0f80 	tst.w	r8, #128	; 0x80
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   b4786:	4602      	mov	r2, r0
   b4788:	460b      	mov	r3, r1
      if (_data[2] > 127) {
   b478a:	d025      	beq.n	b47d8 <_ZN4DS184readEPh+0x180>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   b478c:	4630      	mov	r0, r6
   b478e:	4639      	mov	r1, r7
   b4790:	f000 ff90 	bl	b56b4 <__aeabi_dsub>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   b4794:	f001 fb58 	bl	b5e48 <__aeabi_d2f>
   b4798:	6160      	str	r0, [r4, #20]
   b479a:	e015      	b.n	b47c8 <_ZN4DS184readEPh+0x170>
  byte cfg = (_data[4] & 0x60);
   b479c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
      _raw = _raw << 3; // 9 bit resolution default
   b47a0:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
   b47a4:	f012 0260 	ands.w	r2, r2, #96	; 0x60
   b47a8:	d102      	bne.n	b47b0 <_ZN4DS184readEPh+0x158>
   b47aa:	f023 0307 	bic.w	r3, r3, #7
   b47ae:	e02c      	b.n	b480a <_ZN4DS184readEPh+0x1b2>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   b47b0:	2a20      	cmp	r2, #32
   b47b2:	d00b      	beq.n	b47cc <_ZN4DS184readEPh+0x174>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   b47b4:	2a40      	cmp	r2, #64	; 0x40
   b47b6:	d00c      	beq.n	b47d2 <_ZN4DS184readEPh+0x17a>
      _celsius = (float)_raw * 0.0625;
   b47b8:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
   b47bc:	ee07 3a90 	vmov	s15, r3
   b47c0:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
   b47c4:	edc4 7a05 	vstr	s15, [r4, #20]
  switch (_type) {
   b47c8:	2001      	movs	r0, #1
   b47ca:	e759      	b.n	b4680 <_ZN4DS184readEPh+0x28>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   b47cc:	f023 0303 	bic.w	r3, r3, #3
   b47d0:	e01b      	b.n	b480a <_ZN4DS184readEPh+0x1b2>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   b47d2:	f023 0301 	bic.w	r3, r3, #1
   b47d6:	e018      	b.n	b480a <_ZN4DS184readEPh+0x1b2>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   b47d8:	4630      	mov	r0, r6
   b47da:	4639      	mov	r1, r7
   b47dc:	f000 ff6c 	bl	b56b8 <__adddf3>
   b47e0:	e7d8      	b.n	b4794 <_ZN4DS184readEPh+0x13c>
  switch (_type) {
   b47e2:	2b03      	cmp	r3, #3
   b47e4:	d8f0      	bhi.n	b47c8 <_ZN4DS184readEPh+0x170>
   b47e6:	2b01      	cmp	r3, #1
   b47e8:	d8d8      	bhi.n	b479c <_ZN4DS184readEPh+0x144>
   b47ea:	d1ed      	bne.n	b47c8 <_ZN4DS184readEPh+0x170>
      _raw = _raw << 3; // 9 bit resolution default
   b47ec:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (_data[7] == 0x10) {
   b47f0:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
      _raw = _raw << 3; // 9 bit resolution default
   b47f4:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
   b47f6:	2a10      	cmp	r2, #16
      _raw = _raw << 3; // 9 bit resolution default
   b47f8:	8263      	strh	r3, [r4, #18]
      if (_data[7] == 0x10) {
   b47fa:	d1dd      	bne.n	b47b8 <_ZN4DS184readEPh+0x160>
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
   b47fc:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   b4800:	f023 030f 	bic.w	r3, r3, #15
   b4804:	f1c2 020c 	rsb	r2, r2, #12
   b4808:	4413      	add	r3, r2
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   b480a:	8263      	strh	r3, [r4, #18]
   b480c:	e7d4      	b.n	b47b8 <_ZN4DS184readEPh+0x160>
   b480e:	bf00      	nop
   b4810:	3fa00000 	.word	0x3fa00000

000b4814 <_ZN4DS184readEv>:
bool DS18::read() {
   b4814:	b538      	push	{r3, r4, r5, lr}
  if (!_wire.search(_addr)) {
   b4816:	f100 0518 	add.w	r5, r0, #24
   b481a:	4629      	mov	r1, r5
  init();
   b481c:	f7ff ff01 	bl	b4622 <_ZN4DS184initEv>
bool DS18::read() {
   b4820:	4604      	mov	r4, r0
  if (!_wire.search(_addr)) {
   b4822:	f7ff fe79 	bl	b4518 <_ZN7OneWire6searchEPh>
   b4826:	b938      	cbnz	r0, b4838 <_ZN4DS184readEv+0x24>
    _searchDone = true;
   b4828:	2301      	movs	r3, #1
   b482a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    _wire.reset_search();
   b482e:	4620      	mov	r0, r4
   b4830:	f7ff fe6a 	bl	b4508 <_ZN7OneWire12reset_searchEv>
}
   b4834:	2000      	movs	r0, #0
   b4836:	bd38      	pop	{r3, r4, r5, pc}
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
   b4838:	2107      	movs	r1, #7
   b483a:	4628      	mov	r0, r5
   b483c:	f7ff fed6 	bl	b45ec <_ZN7OneWire4crc8EPhh>
   b4840:	7fe3      	ldrb	r3, [r4, #31]
   b4842:	4283      	cmp	r3, r0
   b4844:	d003      	beq.n	b484e <_ZN4DS184readEv+0x3a>
    _crcError = true;
   b4846:	2301      	movs	r3, #1
   b4848:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   b484c:	e7f2      	b.n	b4834 <_ZN4DS184readEv+0x20>
  return read(_addr);
   b484e:	4629      	mov	r1, r5
   b4850:	4620      	mov	r0, r4
}
   b4852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return read(_addr);
   b4856:	f7ff beff 	b.w	b4658 <_ZN4DS184readEPh>

000b485a <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
   b485a:	ed90 0a05 	vldr	s0, [r0, #20]
   b485e:	4770      	bx	lr

000b4860 <_ZN4DS1810fahrenheitEv>:

float DS18::fahrenheit() {
   b4860:	b508      	push	{r3, lr}
  return _celsius * 1.8 + 32.0;
   b4862:	6940      	ldr	r0, [r0, #20]
   b4864:	f001 f886 	bl	b5974 <__aeabi_f2d>
   b4868:	a308      	add	r3, pc, #32	; (adr r3, b488c <_ZN4DS1810fahrenheitEv+0x2c>)
   b486a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b486e:	f001 f8d9 	bl	b5a24 <__aeabi_dmul>
   b4872:	4b05      	ldr	r3, [pc, #20]	; (b4888 <_ZN4DS1810fahrenheitEv+0x28>)
   b4874:	2200      	movs	r2, #0
   b4876:	f000 ff1f 	bl	b56b8 <__adddf3>
   b487a:	f001 fae5 	bl	b5e48 <__aeabi_d2f>
}
   b487e:	ee00 0a10 	vmov	s0, r0
   b4882:	bd08      	pop	{r3, pc}
   b4884:	f3af 8000 	nop.w
   b4888:	40400000 	.word	0x40400000
   b488c:	cccccccd 	.word	0xcccccccd
   b4890:	3ffccccc 	.word	0x3ffccccc

000b4894 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4894:	b508      	push	{r3, lr}
   b4896:	4b02      	ldr	r3, [pc, #8]	; (b48a0 <netdb_freeaddrinfo+0xc>)
   b4898:	681b      	ldr	r3, [r3, #0]
   b489a:	689b      	ldr	r3, [r3, #8]
   b489c:	9301      	str	r3, [sp, #4]
   b489e:	bd08      	pop	{r3, pc}
   b48a0:	00030268 	.word	0x00030268

000b48a4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b48a4:	b508      	push	{r3, lr}
   b48a6:	4b02      	ldr	r3, [pc, #8]	; (b48b0 <netdb_getaddrinfo+0xc>)
   b48a8:	681b      	ldr	r3, [r3, #0]
   b48aa:	68db      	ldr	r3, [r3, #12]
   b48ac:	9301      	str	r3, [sp, #4]
   b48ae:	bd08      	pop	{r3, pc}
   b48b0:	00030268 	.word	0x00030268

000b48b4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b48b4:	b508      	push	{r3, lr}
   b48b6:	4b02      	ldr	r3, [pc, #8]	; (b48c0 <HAL_Pin_Map+0xc>)
   b48b8:	681b      	ldr	r3, [r3, #0]
   b48ba:	681b      	ldr	r3, [r3, #0]
   b48bc:	9301      	str	r3, [sp, #4]
   b48be:	bd08      	pop	{r3, pc}
   b48c0:	0003022c 	.word	0x0003022c

000b48c4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b48c4:	b508      	push	{r3, lr}
   b48c6:	4b02      	ldr	r3, [pc, #8]	; (b48d0 <HAL_Pin_Mode+0xc>)
   b48c8:	681b      	ldr	r3, [r3, #0]
   b48ca:	689b      	ldr	r3, [r3, #8]
   b48cc:	9301      	str	r3, [sp, #4]
   b48ce:	bd08      	pop	{r3, pc}
   b48d0:	0003022c 	.word	0x0003022c

000b48d4 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b48d4:	b508      	push	{r3, lr}
   b48d6:	4b02      	ldr	r3, [pc, #8]	; (b48e0 <HAL_Interrupts_Enable_All+0xc>)
   b48d8:	681b      	ldr	r3, [r3, #0]
   b48da:	6a1b      	ldr	r3, [r3, #32]
   b48dc:	9301      	str	r3, [sp, #4]
   b48de:	bd08      	pop	{r3, pc}
   b48e0:	0003022c 	.word	0x0003022c

000b48e4 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b48e4:	b508      	push	{r3, lr}
   b48e6:	4b02      	ldr	r3, [pc, #8]	; (b48f0 <HAL_Interrupts_Disable_All+0xc>)
   b48e8:	681b      	ldr	r3, [r3, #0]
   b48ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b48ec:	9301      	str	r3, [sp, #4]
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	0003022c 	.word	0x0003022c

000b48f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b02      	ldr	r3, [pc, #8]	; (b4900 <HAL_RNG_GetRandomNumber+0xc>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	685b      	ldr	r3, [r3, #4]
   b48fc:	9301      	str	r3, [sp, #4]
   b48fe:	bd08      	pop	{r3, pc}
   b4900:	00030218 	.word	0x00030218

000b4904 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4904:	b508      	push	{r3, lr}
   b4906:	4b02      	ldr	r3, [pc, #8]	; (b4910 <HAL_Delay_Microseconds+0xc>)
   b4908:	681b      	ldr	r3, [r3, #0]
   b490a:	68db      	ldr	r3, [r3, #12]
   b490c:	9301      	str	r3, [sp, #4]
   b490e:	bd08      	pop	{r3, pc}
   b4910:	00030218 	.word	0x00030218

000b4914 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4914:	b508      	push	{r3, lr}
   b4916:	4b02      	ldr	r3, [pc, #8]	; (b4920 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4918:	681b      	ldr	r3, [r3, #0]
   b491a:	695b      	ldr	r3, [r3, #20]
   b491c:	9301      	str	r3, [sp, #4]
   b491e:	bd08      	pop	{r3, pc}
   b4920:	00030218 	.word	0x00030218

000b4924 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   b4924:	b508      	push	{r3, lr}
   b4926:	4b02      	ldr	r3, [pc, #8]	; (b4930 <HAL_disable_irq+0xc>)
   b4928:	681b      	ldr	r3, [r3, #0]
   b492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b492c:	9301      	str	r3, [sp, #4]
   b492e:	bd08      	pop	{r3, pc}
   b4930:	00030218 	.word	0x00030218

000b4934 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   b4934:	b508      	push	{r3, lr}
   b4936:	4b02      	ldr	r3, [pc, #8]	; (b4940 <HAL_enable_irq+0xc>)
   b4938:	681b      	ldr	r3, [r3, #0]
   b493a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b493c:	9301      	str	r3, [sp, #4]
   b493e:	bd08      	pop	{r3, pc}
   b4940:	00030218 	.word	0x00030218

000b4944 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4944:	b508      	push	{r3, lr}
   b4946:	4b02      	ldr	r3, [pc, #8]	; (b4950 <os_mutex_recursive_create+0xc>)
   b4948:	681b      	ldr	r3, [r3, #0]
   b494a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b494c:	9301      	str	r3, [sp, #4]
   b494e:	bd08      	pop	{r3, pc}
   b4950:	00030248 	.word	0x00030248

000b4954 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4954:	b508      	push	{r3, lr}
   b4956:	4b02      	ldr	r3, [pc, #8]	; (b4960 <os_mutex_recursive_destroy+0xc>)
   b4958:	681b      	ldr	r3, [r3, #0]
   b495a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b495c:	9301      	str	r3, [sp, #4]
   b495e:	bd08      	pop	{r3, pc}
   b4960:	00030248 	.word	0x00030248

000b4964 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4964:	b508      	push	{r3, lr}
   b4966:	4b02      	ldr	r3, [pc, #8]	; (b4970 <inet_inet_ntop+0xc>)
   b4968:	681b      	ldr	r3, [r3, #0]
   b496a:	695b      	ldr	r3, [r3, #20]
   b496c:	9301      	str	r3, [sp, #4]
   b496e:	bd08      	pop	{r3, pc}
   b4970:	00030264 	.word	0x00030264

000b4974 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b4974:	b508      	push	{r3, lr}
   b4976:	4b02      	ldr	r3, [pc, #8]	; (b4980 <hal_usart_init+0xc>)
   b4978:	681b      	ldr	r3, [r3, #0]
   b497a:	681b      	ldr	r3, [r3, #0]
   b497c:	9301      	str	r3, [sp, #4]
   b497e:	bd08      	pop	{r3, pc}
   b4980:	0003023c 	.word	0x0003023c

000b4984 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4984:	b508      	push	{r3, lr}
   b4986:	4b02      	ldr	r3, [pc, #8]	; (b4990 <hal_usart_write+0xc>)
   b4988:	681b      	ldr	r3, [r3, #0]
   b498a:	68db      	ldr	r3, [r3, #12]
   b498c:	9301      	str	r3, [sp, #4]
   b498e:	bd08      	pop	{r3, pc}
   b4990:	0003023c 	.word	0x0003023c

000b4994 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4994:	b508      	push	{r3, lr}
   b4996:	4b02      	ldr	r3, [pc, #8]	; (b49a0 <hal_usart_available+0xc>)
   b4998:	681b      	ldr	r3, [r3, #0]
   b499a:	691b      	ldr	r3, [r3, #16]
   b499c:	9301      	str	r3, [sp, #4]
   b499e:	bd08      	pop	{r3, pc}
   b49a0:	0003023c 	.word	0x0003023c

000b49a4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b49a4:	b508      	push	{r3, lr}
   b49a6:	4b02      	ldr	r3, [pc, #8]	; (b49b0 <hal_usart_read+0xc>)
   b49a8:	681b      	ldr	r3, [r3, #0]
   b49aa:	695b      	ldr	r3, [r3, #20]
   b49ac:	9301      	str	r3, [sp, #4]
   b49ae:	bd08      	pop	{r3, pc}
   b49b0:	0003023c 	.word	0x0003023c

000b49b4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b49b4:	b508      	push	{r3, lr}
   b49b6:	4b02      	ldr	r3, [pc, #8]	; (b49c0 <hal_usart_peek+0xc>)
   b49b8:	681b      	ldr	r3, [r3, #0]
   b49ba:	699b      	ldr	r3, [r3, #24]
   b49bc:	9301      	str	r3, [sp, #4]
   b49be:	bd08      	pop	{r3, pc}
   b49c0:	0003023c 	.word	0x0003023c

000b49c4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b49c4:	b508      	push	{r3, lr}
   b49c6:	4b02      	ldr	r3, [pc, #8]	; (b49d0 <hal_usart_flush+0xc>)
   b49c8:	681b      	ldr	r3, [r3, #0]
   b49ca:	69db      	ldr	r3, [r3, #28]
   b49cc:	9301      	str	r3, [sp, #4]
   b49ce:	bd08      	pop	{r3, pc}
   b49d0:	0003023c 	.word	0x0003023c

000b49d4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b49d4:	b508      	push	{r3, lr}
   b49d6:	4b02      	ldr	r3, [pc, #8]	; (b49e0 <hal_usart_is_enabled+0xc>)
   b49d8:	681b      	ldr	r3, [r3, #0]
   b49da:	6a1b      	ldr	r3, [r3, #32]
   b49dc:	9301      	str	r3, [sp, #4]
   b49de:	bd08      	pop	{r3, pc}
   b49e0:	0003023c 	.word	0x0003023c

000b49e4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b02      	ldr	r3, [pc, #8]	; (b49f0 <hal_usart_available_data_for_write+0xc>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b49ec:	9301      	str	r3, [sp, #4]
   b49ee:	bd08      	pop	{r3, pc}
   b49f0:	0003023c 	.word	0x0003023c

000b49f4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b49f4:	b508      	push	{r3, lr}
   b49f6:	4b02      	ldr	r3, [pc, #8]	; (b4a00 <hal_i2c_write+0xc>)
   b49f8:	681b      	ldr	r3, [r3, #0]
   b49fa:	6a1b      	ldr	r3, [r3, #32]
   b49fc:	9301      	str	r3, [sp, #4]
   b49fe:	bd08      	pop	{r3, pc}
   b4a00:	00030228 	.word	0x00030228

000b4a04 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4a04:	b508      	push	{r3, lr}
   b4a06:	4b02      	ldr	r3, [pc, #8]	; (b4a10 <hal_i2c_available+0xc>)
   b4a08:	681b      	ldr	r3, [r3, #0]
   b4a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a0c:	9301      	str	r3, [sp, #4]
   b4a0e:	bd08      	pop	{r3, pc}
   b4a10:	00030228 	.word	0x00030228

000b4a14 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b02      	ldr	r3, [pc, #8]	; (b4a20 <hal_i2c_read+0xc>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a1c:	9301      	str	r3, [sp, #4]
   b4a1e:	bd08      	pop	{r3, pc}
   b4a20:	00030228 	.word	0x00030228

000b4a24 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4a24:	b508      	push	{r3, lr}
   b4a26:	4b02      	ldr	r3, [pc, #8]	; (b4a30 <hal_i2c_peek+0xc>)
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a2c:	9301      	str	r3, [sp, #4]
   b4a2e:	bd08      	pop	{r3, pc}
   b4a30:	00030228 	.word	0x00030228

000b4a34 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4a34:	b508      	push	{r3, lr}
   b4a36:	4b02      	ldr	r3, [pc, #8]	; (b4a40 <hal_i2c_flush+0xc>)
   b4a38:	681b      	ldr	r3, [r3, #0]
   b4a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a3c:	9301      	str	r3, [sp, #4]
   b4a3e:	bd08      	pop	{r3, pc}
   b4a40:	00030228 	.word	0x00030228

000b4a44 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b02      	ldr	r3, [pc, #8]	; (b4a50 <hal_i2c_is_enabled+0xc>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4a4c:	9301      	str	r3, [sp, #4]
   b4a4e:	bd08      	pop	{r3, pc}
   b4a50:	00030228 	.word	0x00030228

000b4a54 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4a54:	b508      	push	{r3, lr}
   b4a56:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <hal_i2c_init+0xc>)
   b4a58:	681b      	ldr	r3, [r3, #0]
   b4a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a5c:	9301      	str	r3, [sp, #4]
   b4a5e:	bd08      	pop	{r3, pc}
   b4a60:	00030228 	.word	0x00030228

000b4a64 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4a64:	b508      	push	{r3, lr}
   b4a66:	4b02      	ldr	r3, [pc, #8]	; (b4a70 <hal_spi_init+0xc>)
   b4a68:	681b      	ldr	r3, [r3, #0]
   b4a6a:	69db      	ldr	r3, [r3, #28]
   b4a6c:	9301      	str	r3, [sp, #4]
   b4a6e:	bd08      	pop	{r3, pc}
   b4a70:	00030230 	.word	0x00030230

000b4a74 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4a74:	b508      	push	{r3, lr}
   b4a76:	4b02      	ldr	r3, [pc, #8]	; (b4a80 <hal_spi_is_enabled+0xc>)
   b4a78:	681b      	ldr	r3, [r3, #0]
   b4a7a:	6a1b      	ldr	r3, [r3, #32]
   b4a7c:	9301      	str	r3, [sp, #4]
   b4a7e:	bd08      	pop	{r3, pc}
   b4a80:	00030230 	.word	0x00030230

000b4a84 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4a84:	b508      	push	{r3, lr}
   b4a86:	4b02      	ldr	r3, [pc, #8]	; (b4a90 <HAL_USB_USART_Init+0xc>)
   b4a88:	681b      	ldr	r3, [r3, #0]
   b4a8a:	681b      	ldr	r3, [r3, #0]
   b4a8c:	9301      	str	r3, [sp, #4]
   b4a8e:	bd08      	pop	{r3, pc}
   b4a90:	0003024c 	.word	0x0003024c

000b4a94 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4a94:	b508      	push	{r3, lr}
   b4a96:	4b02      	ldr	r3, [pc, #8]	; (b4aa0 <HAL_USB_USART_Begin+0xc>)
   b4a98:	681b      	ldr	r3, [r3, #0]
   b4a9a:	685b      	ldr	r3, [r3, #4]
   b4a9c:	9301      	str	r3, [sp, #4]
   b4a9e:	bd08      	pop	{r3, pc}
   b4aa0:	0003024c 	.word	0x0003024c

000b4aa4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4aa4:	b508      	push	{r3, lr}
   b4aa6:	4b02      	ldr	r3, [pc, #8]	; (b4ab0 <HAL_USB_USART_Available_Data+0xc>)
   b4aa8:	681b      	ldr	r3, [r3, #0]
   b4aaa:	691b      	ldr	r3, [r3, #16]
   b4aac:	9301      	str	r3, [sp, #4]
   b4aae:	bd08      	pop	{r3, pc}
   b4ab0:	0003024c 	.word	0x0003024c

000b4ab4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4ab4:	b508      	push	{r3, lr}
   b4ab6:	4b02      	ldr	r3, [pc, #8]	; (b4ac0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4ab8:	681b      	ldr	r3, [r3, #0]
   b4aba:	695b      	ldr	r3, [r3, #20]
   b4abc:	9301      	str	r3, [sp, #4]
   b4abe:	bd08      	pop	{r3, pc}
   b4ac0:	0003024c 	.word	0x0003024c

000b4ac4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ac4:	b508      	push	{r3, lr}
   b4ac6:	4b02      	ldr	r3, [pc, #8]	; (b4ad0 <HAL_USB_USART_Receive_Data+0xc>)
   b4ac8:	681b      	ldr	r3, [r3, #0]
   b4aca:	699b      	ldr	r3, [r3, #24]
   b4acc:	9301      	str	r3, [sp, #4]
   b4ace:	bd08      	pop	{r3, pc}
   b4ad0:	0003024c 	.word	0x0003024c

000b4ad4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ad4:	b508      	push	{r3, lr}
   b4ad6:	4b02      	ldr	r3, [pc, #8]	; (b4ae0 <HAL_USB_USART_Send_Data+0xc>)
   b4ad8:	681b      	ldr	r3, [r3, #0]
   b4ada:	69db      	ldr	r3, [r3, #28]
   b4adc:	9301      	str	r3, [sp, #4]
   b4ade:	bd08      	pop	{r3, pc}
   b4ae0:	0003024c 	.word	0x0003024c

000b4ae4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4ae4:	b508      	push	{r3, lr}
   b4ae6:	4b02      	ldr	r3, [pc, #8]	; (b4af0 <HAL_USB_USART_Flush_Data+0xc>)
   b4ae8:	681b      	ldr	r3, [r3, #0]
   b4aea:	6a1b      	ldr	r3, [r3, #32]
   b4aec:	9301      	str	r3, [sp, #4]
   b4aee:	bd08      	pop	{r3, pc}
   b4af0:	0003024c 	.word	0x0003024c

000b4af4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4af4:	b508      	push	{r3, lr}
   b4af6:	4b02      	ldr	r3, [pc, #8]	; (b4b00 <panic_+0xc>)
   b4af8:	681b      	ldr	r3, [r3, #0]
   b4afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4afc:	9301      	str	r3, [sp, #4]
   b4afe:	bd08      	pop	{r3, pc}
   b4b00:	00030260 	.word	0x00030260

000b4b04 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4b04:	b508      	push	{r3, lr}
   b4b06:	4b02      	ldr	r3, [pc, #8]	; (b4b10 <set_system_mode+0xc>)
   b4b08:	681b      	ldr	r3, [r3, #0]
   b4b0a:	685b      	ldr	r3, [r3, #4]
   b4b0c:	9301      	str	r3, [sp, #4]
   b4b0e:	bd08      	pop	{r3, pc}
   b4b10:	00030220 	.word	0x00030220

000b4b14 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4b14:	b508      	push	{r3, lr}
   b4b16:	4b02      	ldr	r3, [pc, #8]	; (b4b20 <system_delay_ms+0xc>)
   b4b18:	681b      	ldr	r3, [r3, #0]
   b4b1a:	695b      	ldr	r3, [r3, #20]
   b4b1c:	9301      	str	r3, [sp, #4]
   b4b1e:	bd08      	pop	{r3, pc}
   b4b20:	00030220 	.word	0x00030220

000b4b24 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4b24:	b508      	push	{r3, lr}
   b4b26:	4b03      	ldr	r3, [pc, #12]	; (b4b34 <system_ctrl_set_app_request_handler+0x10>)
   b4b28:	681b      	ldr	r3, [r3, #0]
   b4b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4b2e:	9301      	str	r3, [sp, #4]
   b4b30:	bd08      	pop	{r3, pc}
   b4b32:	0000      	.short	0x0000
   b4b34:	00030220 	.word	0x00030220

000b4b38 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b03      	ldr	r3, [pc, #12]	; (b4b48 <system_ctrl_set_result+0x10>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4b42:	9301      	str	r3, [sp, #4]
   b4b44:	bd08      	pop	{r3, pc}
   b4b46:	0000      	.short	0x0000
   b4b48:	00030220 	.word	0x00030220

000b4b4c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b4c:	b508      	push	{r3, lr}
   b4b4e:	4b02      	ldr	r3, [pc, #8]	; (b4b58 <network_connect+0xc>)
   b4b50:	681b      	ldr	r3, [r3, #0]
   b4b52:	685b      	ldr	r3, [r3, #4]
   b4b54:	9301      	str	r3, [sp, #4]
   b4b56:	bd08      	pop	{r3, pc}
   b4b58:	00030240 	.word	0x00030240

000b4b5c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4b5c:	b508      	push	{r3, lr}
   b4b5e:	4b02      	ldr	r3, [pc, #8]	; (b4b68 <network_connecting+0xc>)
   b4b60:	681b      	ldr	r3, [r3, #0]
   b4b62:	689b      	ldr	r3, [r3, #8]
   b4b64:	9301      	str	r3, [sp, #4]
   b4b66:	bd08      	pop	{r3, pc}
   b4b68:	00030240 	.word	0x00030240

000b4b6c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4b6c:	b508      	push	{r3, lr}
   b4b6e:	4b02      	ldr	r3, [pc, #8]	; (b4b78 <network_disconnect+0xc>)
   b4b70:	681b      	ldr	r3, [r3, #0]
   b4b72:	68db      	ldr	r3, [r3, #12]
   b4b74:	9301      	str	r3, [sp, #4]
   b4b76:	bd08      	pop	{r3, pc}
   b4b78:	00030240 	.word	0x00030240

000b4b7c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4b7c:	b508      	push	{r3, lr}
   b4b7e:	4b02      	ldr	r3, [pc, #8]	; (b4b88 <network_ready+0xc>)
   b4b80:	681b      	ldr	r3, [r3, #0]
   b4b82:	691b      	ldr	r3, [r3, #16]
   b4b84:	9301      	str	r3, [sp, #4]
   b4b86:	bd08      	pop	{r3, pc}
   b4b88:	00030240 	.word	0x00030240

000b4b8c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b8c:	b508      	push	{r3, lr}
   b4b8e:	4b02      	ldr	r3, [pc, #8]	; (b4b98 <network_on+0xc>)
   b4b90:	681b      	ldr	r3, [r3, #0]
   b4b92:	695b      	ldr	r3, [r3, #20]
   b4b94:	9301      	str	r3, [sp, #4]
   b4b96:	bd08      	pop	{r3, pc}
   b4b98:	00030240 	.word	0x00030240

000b4b9c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b9c:	b508      	push	{r3, lr}
   b4b9e:	4b02      	ldr	r3, [pc, #8]	; (b4ba8 <network_off+0xc>)
   b4ba0:	681b      	ldr	r3, [r3, #0]
   b4ba2:	699b      	ldr	r3, [r3, #24]
   b4ba4:	9301      	str	r3, [sp, #4]
   b4ba6:	bd08      	pop	{r3, pc}
   b4ba8:	00030240 	.word	0x00030240

000b4bac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4bac:	b508      	push	{r3, lr}
   b4bae:	4b02      	ldr	r3, [pc, #8]	; (b4bb8 <network_listen+0xc>)
   b4bb0:	681b      	ldr	r3, [r3, #0]
   b4bb2:	69db      	ldr	r3, [r3, #28]
   b4bb4:	9301      	str	r3, [sp, #4]
   b4bb6:	bd08      	pop	{r3, pc}
   b4bb8:	00030240 	.word	0x00030240

000b4bbc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4bbc:	b508      	push	{r3, lr}
   b4bbe:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <network_listening+0xc>)
   b4bc0:	681b      	ldr	r3, [r3, #0]
   b4bc2:	6a1b      	ldr	r3, [r3, #32]
   b4bc4:	9301      	str	r3, [sp, #4]
   b4bc6:	bd08      	pop	{r3, pc}
   b4bc8:	00030240 	.word	0x00030240

000b4bcc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <network_set_listen_timeout+0xc>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4bd4:	9301      	str	r3, [sp, #4]
   b4bd6:	bd08      	pop	{r3, pc}
   b4bd8:	00030240 	.word	0x00030240

000b4bdc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <network_get_listen_timeout+0xc>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4be4:	9301      	str	r3, [sp, #4]
   b4be6:	bd08      	pop	{r3, pc}
   b4be8:	00030240 	.word	0x00030240

000b4bec <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4bec:	b508      	push	{r3, lr}
   b4bee:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <network_is_on+0xc>)
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4bf4:	9301      	str	r3, [sp, #4]
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	00030240 	.word	0x00030240

000b4bfc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4bfc:	b508      	push	{r3, lr}
   b4bfe:	4b02      	ldr	r3, [pc, #8]	; (b4c08 <network_is_off+0xc>)
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c04:	9301      	str	r3, [sp, #4]
   b4c06:	bd08      	pop	{r3, pc}
   b4c08:	00030240 	.word	0x00030240

000b4c0c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4c0c:	b508      	push	{r3, lr}
   b4c0e:	4b02      	ldr	r3, [pc, #8]	; (b4c18 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4c10:	681b      	ldr	r3, [r3, #0]
   b4c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4c14:	9301      	str	r3, [sp, #4]
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	00030244 	.word	0x00030244

000b4c1c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4c1c:	b508      	push	{r3, lr}
   b4c1e:	4b02      	ldr	r3, [pc, #8]	; (b4c28 <malloc+0xc>)
   b4c20:	681b      	ldr	r3, [r3, #0]
   b4c22:	681b      	ldr	r3, [r3, #0]
   b4c24:	9301      	str	r3, [sp, #4]
   b4c26:	bd08      	pop	{r3, pc}
   b4c28:	0003021c 	.word	0x0003021c

000b4c2c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4c2c:	b508      	push	{r3, lr}
   b4c2e:	4b02      	ldr	r3, [pc, #8]	; (b4c38 <free+0xc>)
   b4c30:	681b      	ldr	r3, [r3, #0]
   b4c32:	685b      	ldr	r3, [r3, #4]
   b4c34:	9301      	str	r3, [sp, #4]
   b4c36:	bd08      	pop	{r3, pc}
   b4c38:	0003021c 	.word	0x0003021c

000b4c3c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4c3c:	b508      	push	{r3, lr}
   b4c3e:	4b02      	ldr	r3, [pc, #8]	; (b4c48 <vsnprintf+0xc>)
   b4c40:	681b      	ldr	r3, [r3, #0]
   b4c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4c44:	9301      	str	r3, [sp, #4]
   b4c46:	bd08      	pop	{r3, pc}
   b4c48:	0003021c 	.word	0x0003021c

000b4c4c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4c4c:	b508      	push	{r3, lr}
   b4c4e:	4b02      	ldr	r3, [pc, #8]	; (b4c58 <__assert_func+0xc>)
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c54:	9301      	str	r3, [sp, #4]
   b4c56:	bd08      	pop	{r3, pc}
   b4c58:	0003021c 	.word	0x0003021c

000b4c5c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4c5c:	b508      	push	{r3, lr}
   b4c5e:	4b02      	ldr	r3, [pc, #8]	; (b4c68 <newlib_impure_ptr_callback+0xc>)
   b4c60:	681b      	ldr	r3, [r3, #0]
   b4c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c64:	9301      	str	r3, [sp, #4]
   b4c66:	bd08      	pop	{r3, pc}
   b4c68:	0003021c 	.word	0x0003021c

000b4c6c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4c6c:	2200      	movs	r2, #0
   b4c6e:	6840      	ldr	r0, [r0, #4]
   b4c70:	4611      	mov	r1, r2
   b4c72:	f7ff bfa3 	b.w	b4bbc <network_listening>

000b4c76 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4c76:	2200      	movs	r2, #0
   b4c78:	6840      	ldr	r0, [r0, #4]
   b4c7a:	4611      	mov	r1, r2
   b4c7c:	f7ff bfae 	b.w	b4bdc <network_get_listen_timeout>

000b4c80 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4c80:	6840      	ldr	r0, [r0, #4]
   b4c82:	2200      	movs	r2, #0
   b4c84:	f7ff bfa2 	b.w	b4bcc <network_set_listen_timeout>

000b4c88 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4c88:	6840      	ldr	r0, [r0, #4]
   b4c8a:	2200      	movs	r2, #0
   b4c8c:	f081 0101 	eor.w	r1, r1, #1
   b4c90:	f7ff bf8c 	b.w	b4bac <network_listen>

000b4c94 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4c94:	2300      	movs	r3, #0
   b4c96:	6840      	ldr	r0, [r0, #4]
   b4c98:	461a      	mov	r2, r3
   b4c9a:	4619      	mov	r1, r3
   b4c9c:	f7ff bf7e 	b.w	b4b9c <network_off>

000b4ca0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4ca0:	2300      	movs	r3, #0
   b4ca2:	6840      	ldr	r0, [r0, #4]
   b4ca4:	461a      	mov	r2, r3
   b4ca6:	4619      	mov	r1, r3
   b4ca8:	f7ff bf70 	b.w	b4b8c <network_on>

000b4cac <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4cac:	2200      	movs	r2, #0
   b4cae:	6840      	ldr	r0, [r0, #4]
   b4cb0:	4611      	mov	r1, r2
   b4cb2:	f7ff bf63 	b.w	b4b7c <network_ready>

000b4cb6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4cb6:	2200      	movs	r2, #0
   b4cb8:	6840      	ldr	r0, [r0, #4]
   b4cba:	4611      	mov	r1, r2
   b4cbc:	f7ff bf4e 	b.w	b4b5c <network_connecting>

000b4cc0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4cc0:	6840      	ldr	r0, [r0, #4]
   b4cc2:	2200      	movs	r2, #0
   b4cc4:	2102      	movs	r1, #2
   b4cc6:	f7ff bf51 	b.w	b4b6c <network_disconnect>

000b4cca <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4cca:	2300      	movs	r3, #0
   b4ccc:	6840      	ldr	r0, [r0, #4]
   b4cce:	461a      	mov	r2, r3
   b4cd0:	f7ff bf3c 	b.w	b4b4c <network_connect>

000b4cd4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4cd4:	4b02      	ldr	r3, [pc, #8]	; (b4ce0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4cd6:	2203      	movs	r2, #3
   b4cd8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4cda:	4a02      	ldr	r2, [pc, #8]	; (b4ce4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4cdc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4cde:	4770      	bx	lr
   b4ce0:	2003e644 	.word	0x2003e644
   b4ce4:	000b5fd4 	.word	0x000b5fd4

000b4ce8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4ce8:	b510      	push	{r4, lr}
   b4cea:	4604      	mov	r4, r0
   b4cec:	4608      	mov	r0, r1
{
    _spi = spi;
   b4cee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4cf0:	f7ff feb8 	bl	b4a64 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4cf4:	2300      	movs	r3, #0
   b4cf6:	6063      	str	r3, [r4, #4]
}
   b4cf8:	4620      	mov	r0, r4
   b4cfa:	bd10      	pop	{r4, pc}

000b4cfc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b4cfc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4cfe:	4b09      	ldr	r3, [pc, #36]	; (b4d24 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4d00:	4c09      	ldr	r4, [pc, #36]	; (b4d28 <_GLOBAL__sub_I_System+0x2c>)
   b4d02:	2202      	movs	r2, #2
   b4d04:	601a      	str	r2, [r3, #0]
   b4d06:	2000      	movs	r0, #0
    SleepResult() {}
   b4d08:	4b08      	ldr	r3, [pc, #32]	; (b4d2c <_GLOBAL__sub_I_System+0x30>)
   b4d0a:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4d0c:	e9c4 0000 	strd	r0, r0, [r4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4d10:	f7ff fef8 	bl	b4b04 <set_system_mode>
SystemClass System;
   b4d14:	4620      	mov	r0, r4
   b4d16:	4a06      	ldr	r2, [pc, #24]	; (b4d30 <_GLOBAL__sub_I_System+0x34>)
   b4d18:	4906      	ldr	r1, [pc, #24]	; (b4d34 <_GLOBAL__sub_I_System+0x38>)
   b4d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b4d1e:	f000 bcbb 	b.w	b5698 <__aeabi_atexit>
   b4d22:	bf00      	nop
   b4d24:	2003e658 	.word	0x2003e658
   b4d28:	2003e64c 	.word	0x2003e64c
   b4d2c:	ffff0000 	.word	0xffff0000
   b4d30:	2003e600 	.word	0x2003e600
   b4d34:	000b40af 	.word	0x000b40af

000b4d38 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b4d38:	b510      	push	{r4, lr}
   b4d3a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b4d3c:	6800      	ldr	r0, [r0, #0]
   b4d3e:	b108      	cbz	r0, b4d44 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b4d40:	f7ff fe08 	bl	b4954 <os_mutex_recursive_destroy>
    }
   b4d44:	4620      	mov	r0, r4
   b4d46:	bd10      	pop	{r4, pc}

000b4d48 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4d48:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b4d4a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4d4c:	4604      	mov	r4, r0
      if (_M_manager)
   b4d4e:	b113      	cbz	r3, b4d56 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4d50:	2203      	movs	r2, #3
   b4d52:	4601      	mov	r1, r0
   b4d54:	4798      	blx	r3
    }
   b4d56:	4620      	mov	r0, r4
   b4d58:	bd10      	pop	{r4, pc}
	...

000b4d5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b4d5c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b4d5e:	4c06      	ldr	r4, [pc, #24]	; (b4d78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b4d60:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b4d62:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b4d64:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b4d66:	f7ff fded 	bl	b4944 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b4d6a:	4620      	mov	r0, r4
   b4d6c:	4a03      	ldr	r2, [pc, #12]	; (b4d7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b4d6e:	4904      	ldr	r1, [pc, #16]	; (b4d80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b4d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b4d74:	f000 bc90 	b.w	b5698 <__aeabi_atexit>
   b4d78:	2003e65c 	.word	0x2003e65c
   b4d7c:	2003e600 	.word	0x2003e600
   b4d80:	000b4d39 	.word	0x000b4d39

000b4d84 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d86:	4606      	mov	r6, r0
   b4d88:	460d      	mov	r5, r1
  size_t n = 0;
   b4d8a:	188f      	adds	r7, r1, r2
   b4d8c:	2400      	movs	r4, #0
  while (size--) {
   b4d8e:	42bd      	cmp	r5, r7
   b4d90:	d00c      	beq.n	b4dac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4d92:	6833      	ldr	r3, [r6, #0]
   b4d94:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4d98:	689b      	ldr	r3, [r3, #8]
   b4d9a:	4630      	mov	r0, r6
   b4d9c:	4798      	blx	r3
     if (chunk>=0)
   b4d9e:	1e03      	subs	r3, r0, #0
   b4da0:	db01      	blt.n	b4da6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4da2:	441c      	add	r4, r3
  while (size--) {
   b4da4:	e7f3      	b.n	b4d8e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4da6:	2c00      	cmp	r4, #0
   b4da8:	bf08      	it	eq
   b4daa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4dac:	4620      	mov	r0, r4
   b4dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4db0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4db0:	b513      	push	{r0, r1, r4, lr}
   b4db2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4db4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4db6:	b159      	cbz	r1, b4dd0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4db8:	9101      	str	r1, [sp, #4]
   b4dba:	f001 f8e7 	bl	b5f8c <strlen>
   b4dbe:	6823      	ldr	r3, [r4, #0]
   b4dc0:	9901      	ldr	r1, [sp, #4]
   b4dc2:	68db      	ldr	r3, [r3, #12]
   b4dc4:	4602      	mov	r2, r0
   b4dc6:	4620      	mov	r0, r4
    }
   b4dc8:	b002      	add	sp, #8
   b4dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4dce:	4718      	bx	r3
    }
   b4dd0:	b002      	add	sp, #8
   b4dd2:	bd10      	pop	{r4, pc}

000b4dd4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4dd4:	6803      	ldr	r3, [r0, #0]
   b4dd6:	689b      	ldr	r3, [r3, #8]
   b4dd8:	4718      	bx	r3

000b4dda <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4dda:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4ddc:	210d      	movs	r1, #13
{
   b4dde:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4de0:	f7ff fff8 	bl	b4dd4 <_ZN5Print5printEc>
  n += print('\n');
   b4de4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4de6:	4604      	mov	r4, r0
  n += print('\n');
   b4de8:	4628      	mov	r0, r5
   b4dea:	f7ff fff3 	bl	b4dd4 <_ZN5Print5printEc>
  return n;
}
   b4dee:	4420      	add	r0, r4
   b4df0:	bd38      	pop	{r3, r4, r5, pc}

000b4df2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4df2:	b530      	push	{r4, r5, lr}
   b4df4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4df6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4df8:	2a01      	cmp	r2, #1
  *str = '\0';
   b4dfa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4dfe:	bf98      	it	ls
   b4e00:	220a      	movls	r2, #10
   b4e02:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4e04:	460d      	mov	r5, r1
   b4e06:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4e0a:	fb01 5312 	mls	r3, r1, r2, r5
   b4e0e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4e12:	2b09      	cmp	r3, #9
   b4e14:	bf94      	ite	ls
   b4e16:	3330      	addls	r3, #48	; 0x30
   b4e18:	3337      	addhi	r3, #55	; 0x37
   b4e1a:	b2db      	uxtb	r3, r3
  } while(n);
   b4e1c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4e1e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4e22:	d9ef      	bls.n	b4e04 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4e24:	4621      	mov	r1, r4
   b4e26:	f7ff ffc3 	bl	b4db0 <_ZN5Print5writeEPKc>
}
   b4e2a:	b00b      	add	sp, #44	; 0x2c
   b4e2c:	bd30      	pop	{r4, r5, pc}

000b4e2e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4e32:	b086      	sub	sp, #24
   b4e34:	af00      	add	r7, sp, #0
   b4e36:	4605      	mov	r5, r0
   b4e38:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4e3a:	1d38      	adds	r0, r7, #4
   b4e3c:	2114      	movs	r1, #20
{
   b4e3e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4e40:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4e42:	f7ff fefb 	bl	b4c3c <vsnprintf>

    if (n<bufsize)
   b4e46:	2813      	cmp	r0, #19
   b4e48:	d80e      	bhi.n	b4e68 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4e4a:	1d39      	adds	r1, r7, #4
   b4e4c:	4628      	mov	r0, r5
   b4e4e:	f7ff ffaf 	bl	b4db0 <_ZN5Print5writeEPKc>
   b4e52:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4e54:	b11e      	cbz	r6, b4e5e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4e56:	4628      	mov	r0, r5
   b4e58:	f7ff ffbf 	bl	b4dda <_ZN5Print7printlnEv>
   b4e5c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4e5e:	4620      	mov	r0, r4
   b4e60:	3718      	adds	r7, #24
   b4e62:	46bd      	mov	sp, r7
   b4e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4e68:	f100 0308 	add.w	r3, r0, #8
   b4e6c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4e70:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4e72:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4e76:	4622      	mov	r2, r4
   b4e78:	1c41      	adds	r1, r0, #1
   b4e7a:	683b      	ldr	r3, [r7, #0]
   b4e7c:	4668      	mov	r0, sp
   b4e7e:	f7ff fedd 	bl	b4c3c <vsnprintf>
  return write(str);
   b4e82:	4669      	mov	r1, sp
   b4e84:	4628      	mov	r0, r5
   b4e86:	f7ff ff93 	bl	b4db0 <_ZN5Print5writeEPKc>
   b4e8a:	4604      	mov	r4, r0
   b4e8c:	46c5      	mov	sp, r8
   b4e8e:	e7e1      	b.n	b4e54 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4e90 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4e90:	2300      	movs	r3, #0
   b4e92:	6840      	ldr	r0, [r0, #4]
   b4e94:	461a      	mov	r2, r3
   b4e96:	4619      	mov	r1, r3
   b4e98:	f7ff be78 	b.w	b4b8c <network_on>

000b4e9c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4e9c:	4b01      	ldr	r3, [pc, #4]	; (b4ea4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4e9e:	4a02      	ldr	r2, [pc, #8]	; (b4ea8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4ea0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4ea2:	4770      	bx	lr
   b4ea4:	2003e660 	.word	0x2003e660
   b4ea8:	000b6008 	.word	0x000b6008

000b4eac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4eac:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4eae:	681a      	ldr	r2, [r3, #0]
   b4eb0:	4b02      	ldr	r3, [pc, #8]	; (b4ebc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4eb2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4eb4:	4770      	bx	lr
   b4eb6:	bf00      	nop
   b4eb8:	2003e598 	.word	0x2003e598
   b4ebc:	2003e664 	.word	0x2003e664

000b4ec0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4ec0:	2100      	movs	r1, #0
   b4ec2:	f7ff be27 	b.w	b4b14 <system_delay_ms>

000b4ec6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b4ec6:	b510      	push	{r4, lr}
   b4ec8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b4eca:	f7ff ff3d 	bl	b4d48 <_ZNSt14_Function_baseD1Ev>
   b4ece:	4620      	mov	r0, r4
   b4ed0:	bd10      	pop	{r4, pc}
	...

000b4ed4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4ed4:	4803      	ldr	r0, [pc, #12]	; (b4ee4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b4ed6:	4a04      	ldr	r2, [pc, #16]	; (b4ee8 <_GLOBAL__sub_I_RGB+0x14>)
   b4ed8:	4904      	ldr	r1, [pc, #16]	; (b4eec <_GLOBAL__sub_I_RGB+0x18>)
   b4eda:	2300      	movs	r3, #0
   b4edc:	6083      	str	r3, [r0, #8]
   b4ede:	f000 bbdb 	b.w	b5698 <__aeabi_atexit>
   b4ee2:	bf00      	nop
   b4ee4:	2003e668 	.word	0x2003e668
   b4ee8:	2003e600 	.word	0x2003e600
   b4eec:	000b4ec7 	.word	0x000b4ec7

000b4ef0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4ef0:	4b01      	ldr	r3, [pc, #4]	; (b4ef8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4ef2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4ef4:	4770      	bx	lr
   b4ef6:	bf00      	nop
   b4ef8:	2003e59c 	.word	0x2003e59c

000b4efc <serialEventRun>:
{
   b4efc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4efe:	4b0b      	ldr	r3, [pc, #44]	; (b4f2c <serialEventRun+0x30>)
   b4f00:	b143      	cbz	r3, b4f14 <serialEventRun+0x18>
   b4f02:	f000 f967 	bl	b51d4 <_Z16_fetch_usbserialv>
   b4f06:	6803      	ldr	r3, [r0, #0]
   b4f08:	691b      	ldr	r3, [r3, #16]
   b4f0a:	4798      	blx	r3
   b4f0c:	2800      	cmp	r0, #0
   b4f0e:	dd01      	ble.n	b4f14 <serialEventRun+0x18>
        serialEvent();
   b4f10:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4f14:	4b06      	ldr	r3, [pc, #24]	; (b4f30 <serialEventRun+0x34>)
   b4f16:	b143      	cbz	r3, b4f2a <serialEventRun+0x2e>
   b4f18:	f000 f9de 	bl	b52d8 <_Z22__fetch_global_Serial1v>
   b4f1c:	6803      	ldr	r3, [r0, #0]
   b4f1e:	691b      	ldr	r3, [r3, #16]
   b4f20:	4798      	blx	r3
   b4f22:	2800      	cmp	r0, #0
   b4f24:	dd01      	ble.n	b4f2a <serialEventRun+0x2e>
        serialEvent1();
   b4f26:	f3af 8000 	nop.w
}
   b4f2a:	bd08      	pop	{r3, pc}
	...

000b4f34 <_post_loop>:
{
   b4f34:	b508      	push	{r3, lr}
	serialEventRun();
   b4f36:	f7ff ffe1 	bl	b4efc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4f3a:	f7ff fceb 	bl	b4914 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4f3e:	4b01      	ldr	r3, [pc, #4]	; (b4f44 <_post_loop+0x10>)
   b4f40:	6018      	str	r0, [r3, #0]
}
   b4f42:	bd08      	pop	{r3, pc}
   b4f44:	2003e7d4 	.word	0x2003e7d4

000b4f48 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4f48:	4805      	ldr	r0, [pc, #20]	; (b4f60 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4f4a:	4a06      	ldr	r2, [pc, #24]	; (b4f64 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4f4c:	4906      	ldr	r1, [pc, #24]	; (b4f68 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4f4e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4f50:	1a12      	subs	r2, r2, r0
   b4f52:	f000 ffd7 	bl	b5f04 <memcpy>
    __backup_sram_signature = signature;
   b4f56:	4b05      	ldr	r3, [pc, #20]	; (b4f6c <_Z33system_initialize_user_backup_ramv+0x24>)
   b4f58:	4a05      	ldr	r2, [pc, #20]	; (b4f70 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4f5a:	601a      	str	r2, [r3, #0]
}
   b4f5c:	bd08      	pop	{r3, pc}
   b4f5e:	bf00      	nop
   b4f60:	2003f400 	.word	0x2003f400
   b4f64:	2003f404 	.word	0x2003f404
   b4f68:	000b6200 	.word	0x000b6200
   b4f6c:	2003f400 	.word	0x2003f400
   b4f70:	9a271c1e 	.word	0x9a271c1e

000b4f74 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4f74:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4f76:	2300      	movs	r3, #0
   b4f78:	9300      	str	r3, [sp, #0]
   b4f7a:	461a      	mov	r2, r3
   b4f7c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4f80:	f7ff fdda 	bl	b4b38 <system_ctrl_set_result>
}
   b4f84:	b003      	add	sp, #12
   b4f86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4f8c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4f8c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4f8e:	8843      	ldrh	r3, [r0, #2]
   b4f90:	2b0a      	cmp	r3, #10
   b4f92:	d008      	beq.n	b4fa6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4f94:	2b50      	cmp	r3, #80	; 0x50
   b4f96:	d10b      	bne.n	b4fb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4f98:	4b09      	ldr	r3, [pc, #36]	; (b4fc0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4f9a:	681b      	ldr	r3, [r3, #0]
   b4f9c:	b14b      	cbz	r3, b4fb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4f9e:	b003      	add	sp, #12
   b4fa0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4fa4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4fa6:	f7ff ffe5 	bl	b4f74 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4faa:	b003      	add	sp, #12
   b4fac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4fb0:	2300      	movs	r3, #0
   b4fb2:	9300      	str	r3, [sp, #0]
   b4fb4:	461a      	mov	r2, r3
   b4fb6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4fba:	f7ff fdbd 	bl	b4b38 <system_ctrl_set_result>
}
   b4fbe:	e7f4      	b.n	b4faa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4fc0:	2003e67c 	.word	0x2003e67c

000b4fc4 <module_user_init_hook>:
{
   b4fc4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4fc6:	4812      	ldr	r0, [pc, #72]	; (b5010 <module_user_init_hook+0x4c>)
   b4fc8:	2100      	movs	r1, #0
   b4fca:	f7ff fe47 	bl	b4c5c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4fce:	4b11      	ldr	r3, [pc, #68]	; (b5014 <module_user_init_hook+0x50>)
   b4fd0:	681a      	ldr	r2, [r3, #0]
   b4fd2:	4b11      	ldr	r3, [pc, #68]	; (b5018 <module_user_init_hook+0x54>)
   b4fd4:	429a      	cmp	r2, r3
   b4fd6:	4b11      	ldr	r3, [pc, #68]	; (b501c <module_user_init_hook+0x58>)
   b4fd8:	bf0c      	ite	eq
   b4fda:	2201      	moveq	r2, #1
   b4fdc:	2200      	movne	r2, #0
   b4fde:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4fe0:	d001      	beq.n	b4fe6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4fe2:	f7ff ffb1 	bl	b4f48 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4fe6:	f7ff fc85 	bl	b48f4 <HAL_RNG_GetRandomNumber>
   b4fea:	4604      	mov	r4, r0
    srand(seed);
   b4fec:	f000 ffa0 	bl	b5f30 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4ff0:	4b0b      	ldr	r3, [pc, #44]	; (b5020 <module_user_init_hook+0x5c>)
   b4ff2:	b113      	cbz	r3, b4ffa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4ff4:	4620      	mov	r0, r4
   b4ff6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4ffa:	2100      	movs	r1, #0
   b4ffc:	4808      	ldr	r0, [pc, #32]	; (b5020 <module_user_init_hook+0x5c>)
   b4ffe:	f7ff fe05 	bl	b4c0c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5006:	4807      	ldr	r0, [pc, #28]	; (b5024 <module_user_init_hook+0x60>)
   b5008:	2100      	movs	r1, #0
   b500a:	f7ff bd8b 	b.w	b4b24 <system_ctrl_set_app_request_handler>
   b500e:	bf00      	nop
   b5010:	000b4ef1 	.word	0x000b4ef1
   b5014:	2003f400 	.word	0x2003f400
   b5018:	9a271c1e 	.word	0x9a271c1e
   b501c:	2003e678 	.word	0x2003e678
   b5020:	00000000 	.word	0x00000000
   b5024:	000b4f8d 	.word	0x000b4f8d

000b5028 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5028:	4770      	bx	lr

000b502a <_ZN9IPAddressD0Ev>:
   b502a:	b510      	push	{r4, lr}
   b502c:	2118      	movs	r1, #24
   b502e:	4604      	mov	r4, r0
   b5030:	f000 fb37 	bl	b56a2 <_ZdlPvj>
   b5034:	4620      	mov	r0, r4
   b5036:	bd10      	pop	{r4, pc}

000b5038 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5038:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b503a:	7d03      	ldrb	r3, [r0, #20]
   b503c:	2b06      	cmp	r3, #6
{
   b503e:	b08d      	sub	sp, #52	; 0x34
   b5040:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5042:	f100 0704 	add.w	r7, r0, #4
   b5046:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b504a:	d012      	beq.n	b5072 <_ZNK9IPAddress7printToER5Print+0x3a>
   b504c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5050:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5054:	220a      	movs	r2, #10
   b5056:	4630      	mov	r0, r6
   b5058:	f7ff fecb 	bl	b4df2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b505c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b505e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5060:	d019      	beq.n	b5096 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5062:	2c00      	cmp	r4, #0
   b5064:	d0f4      	beq.n	b5050 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5066:	212e      	movs	r1, #46	; 0x2e
   b5068:	4630      	mov	r0, r6
   b506a:	f7ff feb3 	bl	b4dd4 <_ZN5Print5printEc>
   b506e:	4404      	add	r4, r0
   b5070:	e7ee      	b.n	b5050 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5072:	232f      	movs	r3, #47	; 0x2f
   b5074:	466a      	mov	r2, sp
   b5076:	4639      	mov	r1, r7
   b5078:	200a      	movs	r0, #10
		buf[0] = 0;
   b507a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b507e:	f7ff fc71 	bl	b4964 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5082:	4668      	mov	r0, sp
   b5084:	f000 ff82 	bl	b5f8c <strlen>
   b5088:	6833      	ldr	r3, [r6, #0]
   b508a:	4602      	mov	r2, r0
   b508c:	68db      	ldr	r3, [r3, #12]
   b508e:	4669      	mov	r1, sp
   b5090:	4630      	mov	r0, r6
   b5092:	4798      	blx	r3
   b5094:	4604      	mov	r4, r0
    }
    return n;
}
   b5096:	4620      	mov	r0, r4
   b5098:	b00d      	add	sp, #52	; 0x34
   b509a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b509c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b509c:	b510      	push	{r4, lr}
   b509e:	4b05      	ldr	r3, [pc, #20]	; (b50b4 <_ZN9IPAddressC1Ev+0x18>)
   b50a0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b50a2:	2211      	movs	r2, #17
   b50a4:	f840 3b04 	str.w	r3, [r0], #4
   b50a8:	2100      	movs	r1, #0
   b50aa:	f000 ff39 	bl	b5f20 <memset>
}
   b50ae:	4620      	mov	r0, r4
   b50b0:	bd10      	pop	{r4, pc}
   b50b2:	bf00      	nop
   b50b4:	000b6030 	.word	0x000b6030

000b50b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b50b8:	4603      	mov	r3, r0
   b50ba:	4a07      	ldr	r2, [pc, #28]	; (b50d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b50bc:	b510      	push	{r4, lr}
   b50be:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b50c2:	f101 0210 	add.w	r2, r1, #16
   b50c6:	f851 4b04 	ldr.w	r4, [r1], #4
   b50ca:	f843 4b04 	str.w	r4, [r3], #4
   b50ce:	4291      	cmp	r1, r2
   b50d0:	d1f9      	bne.n	b50c6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b50d2:	780a      	ldrb	r2, [r1, #0]
   b50d4:	701a      	strb	r2, [r3, #0]
}
   b50d6:	bd10      	pop	{r4, pc}
   b50d8:	000b6030 	.word	0x000b6030

000b50dc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b50dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b50de:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b50e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b50e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b50ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b50ee:	2304      	movs	r3, #4
   b50f0:	6041      	str	r1, [r0, #4]
   b50f2:	7503      	strb	r3, [r0, #20]
}
   b50f4:	bd10      	pop	{r4, pc}
	...

000b50f8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b50f8:	b507      	push	{r0, r1, r2, lr}
   b50fa:	4b06      	ldr	r3, [pc, #24]	; (b5114 <_ZN9IPAddressC1EPKh+0x1c>)
   b50fc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b50fe:	78cb      	ldrb	r3, [r1, #3]
   b5100:	9300      	str	r3, [sp, #0]
   b5102:	788b      	ldrb	r3, [r1, #2]
   b5104:	784a      	ldrb	r2, [r1, #1]
   b5106:	7809      	ldrb	r1, [r1, #0]
   b5108:	f7ff ffe8 	bl	b50dc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b510c:	b003      	add	sp, #12
   b510e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5112:	bf00      	nop
   b5114:	000b6030 	.word	0x000b6030

000b5118 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5118:	7441      	strb	r1, [r0, #17]
}
   b511a:	4770      	bx	lr

000b511c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b511c:	4770      	bx	lr

000b511e <_ZN9USBSerial4readEv>:
{
   b511e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5120:	2100      	movs	r1, #0
   b5122:	7c00      	ldrb	r0, [r0, #16]
   b5124:	f7ff fcce 	bl	b4ac4 <HAL_USB_USART_Receive_Data>
}
   b5128:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b512c:	bd08      	pop	{r3, pc}

000b512e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b512e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5130:	2101      	movs	r1, #1
   b5132:	7c00      	ldrb	r0, [r0, #16]
   b5134:	f7ff fcc6 	bl	b4ac4 <HAL_USB_USART_Receive_Data>
}
   b5138:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b513c:	bd08      	pop	{r3, pc}

000b513e <_ZN9USBSerial17availableForWriteEv>:
{
   b513e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5140:	7c00      	ldrb	r0, [r0, #16]
   b5142:	f7ff fcb7 	bl	b4ab4 <HAL_USB_USART_Available_Data_For_Write>
}
   b5146:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b514a:	bd08      	pop	{r3, pc}

000b514c <_ZN9USBSerial9availableEv>:
{
   b514c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b514e:	7c00      	ldrb	r0, [r0, #16]
   b5150:	f7ff fca8 	bl	b4aa4 <HAL_USB_USART_Available_Data>
}
   b5154:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5158:	bd08      	pop	{r3, pc}

000b515a <_ZN9USBSerial5writeEh>:
{
   b515a:	b513      	push	{r0, r1, r4, lr}
   b515c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b515e:	7c00      	ldrb	r0, [r0, #16]
{
   b5160:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5162:	f7ff fca7 	bl	b4ab4 <HAL_USB_USART_Available_Data_For_Write>
   b5166:	2800      	cmp	r0, #0
   b5168:	9901      	ldr	r1, [sp, #4]
   b516a:	dc01      	bgt.n	b5170 <_ZN9USBSerial5writeEh+0x16>
   b516c:	7c60      	ldrb	r0, [r4, #17]
   b516e:	b120      	cbz	r0, b517a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5170:	7c20      	ldrb	r0, [r4, #16]
   b5172:	f7ff fcaf 	bl	b4ad4 <HAL_USB_USART_Send_Data>
   b5176:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b517a:	b002      	add	sp, #8
   b517c:	bd10      	pop	{r4, pc}

000b517e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b517e:	7c00      	ldrb	r0, [r0, #16]
   b5180:	f7ff bcb0 	b.w	b4ae4 <HAL_USB_USART_Flush_Data>

000b5184 <_ZN9USBSerialD0Ev>:
   b5184:	b510      	push	{r4, lr}
   b5186:	2114      	movs	r1, #20
   b5188:	4604      	mov	r4, r0
   b518a:	f000 fa8a 	bl	b56a2 <_ZdlPvj>
   b518e:	4620      	mov	r0, r4
   b5190:	bd10      	pop	{r4, pc}
	...

000b5194 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5194:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b519a:	4604      	mov	r4, r0
   b519c:	4608      	mov	r0, r1
   b519e:	2100      	movs	r1, #0
   b51a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b51a4:	4b04      	ldr	r3, [pc, #16]	; (b51b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b51a6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b51a8:	2301      	movs	r3, #1
  _serial = serial;
   b51aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b51ac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b51ae:	4611      	mov	r1, r2
   b51b0:	f7ff fc68 	bl	b4a84 <HAL_USB_USART_Init>
}
   b51b4:	4620      	mov	r0, r4
   b51b6:	bd10      	pop	{r4, pc}
   b51b8:	000b6044 	.word	0x000b6044

000b51bc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b51bc:	7c00      	ldrb	r0, [r0, #16]
   b51be:	2200      	movs	r2, #0
   b51c0:	f7ff bc68 	b.w	b4a94 <HAL_USB_USART_Begin>

000b51c4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b51c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b51c6:	2214      	movs	r2, #20
{
   b51c8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b51ca:	2100      	movs	r1, #0
   b51cc:	f000 fea8 	bl	b5f20 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b51d0:	4620      	mov	r0, r4
   b51d2:	bd10      	pop	{r4, pc}

000b51d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b51d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b51d6:	4c10      	ldr	r4, [pc, #64]	; (b5218 <_Z16_fetch_usbserialv+0x44>)
{
   b51d8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b51da:	a803      	add	r0, sp, #12
   b51dc:	f7ff fff2 	bl	b51c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b51e0:	7821      	ldrb	r1, [r4, #0]
   b51e2:	f3bf 8f5b 	dmb	ish
   b51e6:	f011 0101 	ands.w	r1, r1, #1
   b51ea:	d111      	bne.n	b5210 <_Z16_fetch_usbserialv+0x3c>
   b51ec:	4620      	mov	r0, r4
   b51ee:	9101      	str	r1, [sp, #4]
   b51f0:	f7fe ff55 	bl	b409e <__cxa_guard_acquire>
   b51f4:	9901      	ldr	r1, [sp, #4]
   b51f6:	b158      	cbz	r0, b5210 <_Z16_fetch_usbserialv+0x3c>
   b51f8:	aa03      	add	r2, sp, #12
   b51fa:	4808      	ldr	r0, [pc, #32]	; (b521c <_Z16_fetch_usbserialv+0x48>)
   b51fc:	f7ff ffca 	bl	b5194 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5200:	4620      	mov	r0, r4
   b5202:	f7fe ff51 	bl	b40a8 <__cxa_guard_release>
   b5206:	4a06      	ldr	r2, [pc, #24]	; (b5220 <_Z16_fetch_usbserialv+0x4c>)
   b5208:	4906      	ldr	r1, [pc, #24]	; (b5224 <_Z16_fetch_usbserialv+0x50>)
   b520a:	4804      	ldr	r0, [pc, #16]	; (b521c <_Z16_fetch_usbserialv+0x48>)
   b520c:	f000 fa44 	bl	b5698 <__aeabi_atexit>
	return _usbserial;
}
   b5210:	4802      	ldr	r0, [pc, #8]	; (b521c <_Z16_fetch_usbserialv+0x48>)
   b5212:	b008      	add	sp, #32
   b5214:	bd10      	pop	{r4, pc}
   b5216:	bf00      	nop
   b5218:	2003e680 	.word	0x2003e680
   b521c:	2003e684 	.word	0x2003e684
   b5220:	2003e600 	.word	0x2003e600
   b5224:	000b511d 	.word	0x000b511d

000b5228 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b5228:	f7ff bb5c 	b.w	b48e4 <HAL_Interrupts_Disable_All>

000b522c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b522c:	f7ff bb52 	b.w	b48d4 <HAL_Interrupts_Enable_All>

000b5230 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b5230:	4770      	bx	lr

000b5232 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5232:	7441      	strb	r1, [r0, #17]
}
   b5234:	4770      	bx	lr

000b5236 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5236:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5238:	7c00      	ldrb	r0, [r0, #16]
   b523a:	f7ff fbd3 	bl	b49e4 <hal_usart_available_data_for_write>
}
   b523e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5242:	bd08      	pop	{r3, pc}

000b5244 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5244:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5246:	7c00      	ldrb	r0, [r0, #16]
   b5248:	f7ff fba4 	bl	b4994 <hal_usart_available>
}
   b524c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5250:	bd08      	pop	{r3, pc}

000b5252 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5252:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5254:	7c00      	ldrb	r0, [r0, #16]
   b5256:	f7ff fbad 	bl	b49b4 <hal_usart_peek>
}
   b525a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b525e:	bd08      	pop	{r3, pc}

000b5260 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5260:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5262:	7c00      	ldrb	r0, [r0, #16]
   b5264:	f7ff fb9e 	bl	b49a4 <hal_usart_read>
}
   b5268:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b526c:	bd08      	pop	{r3, pc}

000b526e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b526e:	7c00      	ldrb	r0, [r0, #16]
   b5270:	f7ff bba8 	b.w	b49c4 <hal_usart_flush>

000b5274 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5274:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5276:	7c45      	ldrb	r5, [r0, #17]
{
   b5278:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b527a:	b12d      	cbz	r5, b5288 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b527c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b527e:	b003      	add	sp, #12
   b5280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5284:	f7ff bb7e 	b.w	b4984 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5288:	7c00      	ldrb	r0, [r0, #16]
   b528a:	9101      	str	r1, [sp, #4]
   b528c:	f7ff fbaa 	bl	b49e4 <hal_usart_available_data_for_write>
   b5290:	2800      	cmp	r0, #0
   b5292:	9901      	ldr	r1, [sp, #4]
   b5294:	dcf2      	bgt.n	b527c <_ZN11USARTSerial5writeEh+0x8>
}
   b5296:	4628      	mov	r0, r5
   b5298:	b003      	add	sp, #12
   b529a:	bd30      	pop	{r4, r5, pc}

000b529c <_ZN11USARTSerialD0Ev>:
   b529c:	b510      	push	{r4, lr}
   b529e:	2114      	movs	r1, #20
   b52a0:	4604      	mov	r4, r0
   b52a2:	f000 f9fe 	bl	b56a2 <_ZdlPvj>
   b52a6:	4620      	mov	r0, r4
   b52a8:	bd10      	pop	{r4, pc}
	...

000b52ac <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b52ac:	b510      	push	{r4, lr}
   b52ae:	f04f 0c00 	mov.w	ip, #0
   b52b2:	4604      	mov	r4, r0
   b52b4:	4608      	mov	r0, r1
   b52b6:	4611      	mov	r1, r2
   b52b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b52bc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b52c0:	4a04      	ldr	r2, [pc, #16]	; (b52d4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b52c2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b52c4:	2201      	movs	r2, #1
  _serial = serial;
   b52c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b52c8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b52ca:	461a      	mov	r2, r3
   b52cc:	f7ff fb52 	bl	b4974 <hal_usart_init>
}
   b52d0:	4620      	mov	r0, r4
   b52d2:	bd10      	pop	{r4, pc}
   b52d4:	000b6074 	.word	0x000b6074

000b52d8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b52d8:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   b52da:	4c0e      	ldr	r4, [pc, #56]	; (b5314 <_Z22__fetch_global_Serial1v+0x3c>)
   b52dc:	7821      	ldrb	r1, [r4, #0]
   b52de:	f3bf 8f5b 	dmb	ish
   b52e2:	f011 0101 	ands.w	r1, r1, #1
   b52e6:	d112      	bne.n	b530e <_Z22__fetch_global_Serial1v+0x36>
   b52e8:	4620      	mov	r0, r4
   b52ea:	9101      	str	r1, [sp, #4]
   b52ec:	f7fe fed7 	bl	b409e <__cxa_guard_acquire>
   b52f0:	9901      	ldr	r1, [sp, #4]
   b52f2:	b160      	cbz	r0, b530e <_Z22__fetch_global_Serial1v+0x36>
   b52f4:	4a08      	ldr	r2, [pc, #32]	; (b5318 <_Z22__fetch_global_Serial1v+0x40>)
   b52f6:	4b09      	ldr	r3, [pc, #36]	; (b531c <_Z22__fetch_global_Serial1v+0x44>)
   b52f8:	4809      	ldr	r0, [pc, #36]	; (b5320 <_Z22__fetch_global_Serial1v+0x48>)
   b52fa:	f7ff ffd7 	bl	b52ac <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b52fe:	4620      	mov	r0, r4
   b5300:	f7fe fed2 	bl	b40a8 <__cxa_guard_release>
   b5304:	4a07      	ldr	r2, [pc, #28]	; (b5324 <_Z22__fetch_global_Serial1v+0x4c>)
   b5306:	4908      	ldr	r1, [pc, #32]	; (b5328 <_Z22__fetch_global_Serial1v+0x50>)
   b5308:	4805      	ldr	r0, [pc, #20]	; (b5320 <_Z22__fetch_global_Serial1v+0x48>)
   b530a:	f000 f9c5 	bl	b5698 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   b530e:	4804      	ldr	r0, [pc, #16]	; (b5320 <_Z22__fetch_global_Serial1v+0x48>)
   b5310:	b002      	add	sp, #8
   b5312:	bd10      	pop	{r4, pc}
   b5314:	2003e698 	.word	0x2003e698
   b5318:	2003e69c 	.word	0x2003e69c
   b531c:	2003e720 	.word	0x2003e720
   b5320:	2003e7a4 	.word	0x2003e7a4
   b5324:	2003e600 	.word	0x2003e600
   b5328:	000b5231 	.word	0x000b5231

000b532c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b532c:	4770      	bx	lr

000b532e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b532e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5330:	4606      	mov	r6, r0
   b5332:	4615      	mov	r5, r2
   b5334:	460c      	mov	r4, r1
   b5336:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5338:	42bc      	cmp	r4, r7
   b533a:	d006      	beq.n	b534a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b533c:	6833      	ldr	r3, [r6, #0]
   b533e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5342:	689b      	ldr	r3, [r3, #8]
   b5344:	4630      	mov	r0, r6
   b5346:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5348:	e7f6      	b.n	b5338 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b534a:	4628      	mov	r0, r5
   b534c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b534e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b534e:	7c00      	ldrb	r0, [r0, #16]
   b5350:	2200      	movs	r2, #0
   b5352:	f7ff bb4f 	b.w	b49f4 <hal_i2c_write>

000b5356 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5356:	7c00      	ldrb	r0, [r0, #16]
   b5358:	2100      	movs	r1, #0
   b535a:	f7ff bb53 	b.w	b4a04 <hal_i2c_available>

000b535e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b535e:	7c00      	ldrb	r0, [r0, #16]
   b5360:	2100      	movs	r1, #0
   b5362:	f7ff bb57 	b.w	b4a14 <hal_i2c_read>

000b5366 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5366:	7c00      	ldrb	r0, [r0, #16]
   b5368:	2100      	movs	r1, #0
   b536a:	f7ff bb5b 	b.w	b4a24 <hal_i2c_peek>

000b536e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b536e:	7c00      	ldrb	r0, [r0, #16]
   b5370:	2100      	movs	r1, #0
   b5372:	f7ff bb5f 	b.w	b4a34 <hal_i2c_flush>

000b5376 <_ZN7TwoWireD0Ev>:
   b5376:	b510      	push	{r4, lr}
   b5378:	2114      	movs	r1, #20
   b537a:	4604      	mov	r4, r0
   b537c:	f000 f991 	bl	b56a2 <_ZdlPvj>
   b5380:	4620      	mov	r0, r4
   b5382:	bd10      	pop	{r4, pc}

000b5384 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5384:	b510      	push	{r4, lr}
   b5386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b538a:	4604      	mov	r4, r0
   b538c:	4608      	mov	r0, r1
   b538e:	2100      	movs	r1, #0
   b5390:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5394:	4b03      	ldr	r3, [pc, #12]	; (b53a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b5396:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5398:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b539a:	4611      	mov	r1, r2
   b539c:	f7ff fb5a 	bl	b4a54 <hal_i2c_init>
}
   b53a0:	4620      	mov	r0, r4
   b53a2:	bd10      	pop	{r4, pc}
   b53a4:	000b60a4 	.word	0x000b60a4

000b53a8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b53a8:	2200      	movs	r2, #0
   b53aa:	6840      	ldr	r0, [r0, #4]
   b53ac:	4611      	mov	r1, r2
   b53ae:	f7ff bbe5 	b.w	b4b7c <network_ready>

000b53b2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b53b2:	2200      	movs	r2, #0
   b53b4:	6840      	ldr	r0, [r0, #4]
   b53b6:	4611      	mov	r1, r2
   b53b8:	f7ff bc00 	b.w	b4bbc <network_listening>

000b53bc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b53bc:	2200      	movs	r2, #0
   b53be:	6840      	ldr	r0, [r0, #4]
   b53c0:	4611      	mov	r1, r2
   b53c2:	f7ff bc0b 	b.w	b4bdc <network_get_listen_timeout>

000b53c6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b53c6:	6840      	ldr	r0, [r0, #4]
   b53c8:	2200      	movs	r2, #0
   b53ca:	f7ff bbff 	b.w	b4bcc <network_set_listen_timeout>

000b53ce <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b53ce:	6840      	ldr	r0, [r0, #4]
   b53d0:	2200      	movs	r2, #0
   b53d2:	f081 0101 	eor.w	r1, r1, #1
   b53d6:	f7ff bbe9 	b.w	b4bac <network_listen>

000b53da <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b53da:	2300      	movs	r3, #0
   b53dc:	6840      	ldr	r0, [r0, #4]
   b53de:	461a      	mov	r2, r3
   b53e0:	4619      	mov	r1, r3
   b53e2:	f7ff bbdb 	b.w	b4b9c <network_off>

000b53e6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b53e6:	2200      	movs	r2, #0
   b53e8:	6840      	ldr	r0, [r0, #4]
   b53ea:	4611      	mov	r1, r2
   b53ec:	f7ff bbb6 	b.w	b4b5c <network_connecting>

000b53f0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b53f0:	6840      	ldr	r0, [r0, #4]
   b53f2:	2200      	movs	r2, #0
   b53f4:	2102      	movs	r1, #2
   b53f6:	f7ff bbb9 	b.w	b4b6c <network_disconnect>

000b53fa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b53fa:	2300      	movs	r3, #0
   b53fc:	6840      	ldr	r0, [r0, #4]
   b53fe:	461a      	mov	r2, r3
   b5400:	f7ff bba4 	b.w	b4b4c <network_connect>

000b5404 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5404:	4b02      	ldr	r3, [pc, #8]	; (b5410 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5406:	2204      	movs	r2, #4
   b5408:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b540a:	4a02      	ldr	r2, [pc, #8]	; (b5414 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b540c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b540e:	4770      	bx	lr
   b5410:	2003e7b8 	.word	0x2003e7b8
   b5414:	000b60cc 	.word	0x000b60cc

000b5418 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5418:	2300      	movs	r3, #0
   b541a:	6840      	ldr	r0, [r0, #4]
   b541c:	461a      	mov	r2, r3
   b541e:	f7ff bb95 	b.w	b4b4c <network_connect>

000b5422 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5422:	6840      	ldr	r0, [r0, #4]
   b5424:	2200      	movs	r2, #0
   b5426:	2102      	movs	r1, #2
   b5428:	f7ff bba0 	b.w	b4b6c <network_disconnect>

000b542c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b542c:	2200      	movs	r2, #0
   b542e:	6840      	ldr	r0, [r0, #4]
   b5430:	4611      	mov	r1, r2
   b5432:	f7ff bb93 	b.w	b4b5c <network_connecting>

000b5436 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5436:	2200      	movs	r2, #0
   b5438:	6840      	ldr	r0, [r0, #4]
   b543a:	4611      	mov	r1, r2
   b543c:	f7ff bb9e 	b.w	b4b7c <network_ready>

000b5440 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5440:	2300      	movs	r3, #0
   b5442:	6840      	ldr	r0, [r0, #4]
   b5444:	461a      	mov	r2, r3
   b5446:	4619      	mov	r1, r3
   b5448:	f7ff bba0 	b.w	b4b8c <network_on>

000b544c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b544c:	2300      	movs	r3, #0
   b544e:	6840      	ldr	r0, [r0, #4]
   b5450:	461a      	mov	r2, r3
   b5452:	4619      	mov	r1, r3
   b5454:	f7ff bba2 	b.w	b4b9c <network_off>

000b5458 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5458:	6840      	ldr	r0, [r0, #4]
   b545a:	2100      	movs	r1, #0
   b545c:	f7ff bbc6 	b.w	b4bec <network_is_on>

000b5460 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5460:	6840      	ldr	r0, [r0, #4]
   b5462:	2100      	movs	r1, #0
   b5464:	f7ff bbca 	b.w	b4bfc <network_is_off>

000b5468 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5468:	6840      	ldr	r0, [r0, #4]
   b546a:	2200      	movs	r2, #0
   b546c:	f081 0101 	eor.w	r1, r1, #1
   b5470:	f7ff bb9c 	b.w	b4bac <network_listen>

000b5474 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5474:	6840      	ldr	r0, [r0, #4]
   b5476:	2200      	movs	r2, #0
   b5478:	f7ff bba8 	b.w	b4bcc <network_set_listen_timeout>

000b547c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b547c:	2200      	movs	r2, #0
   b547e:	6840      	ldr	r0, [r0, #4]
   b5480:	4611      	mov	r1, r2
   b5482:	f7ff bbab 	b.w	b4bdc <network_get_listen_timeout>

000b5486 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5486:	2200      	movs	r2, #0
   b5488:	6840      	ldr	r0, [r0, #4]
   b548a:	4611      	mov	r1, r2
   b548c:	f7ff bb96 	b.w	b4bbc <network_listening>

000b5490 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5494:	b095      	sub	sp, #84	; 0x54
   b5496:	4614      	mov	r4, r2
   b5498:	460d      	mov	r5, r1
   b549a:	4607      	mov	r7, r0
    IPAddress addr;
   b549c:	f7ff fdfe 	bl	b509c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b54a0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b54a2:	221c      	movs	r2, #28
   b54a4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b54a6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b54a8:	f000 fd3a 	bl	b5f20 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b54ac:	2340      	movs	r3, #64	; 0x40
   b54ae:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b54b0:	4620      	mov	r0, r4
   b54b2:	466b      	mov	r3, sp
   b54b4:	aa0c      	add	r2, sp, #48	; 0x30
   b54b6:	2100      	movs	r1, #0
   b54b8:	f7ff f9f4 	bl	b48a4 <netdb_getaddrinfo>
    if (!r) {
   b54bc:	4604      	mov	r4, r0
   b54be:	2800      	cmp	r0, #0
   b54c0:	d14b      	bne.n	b555a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b54c2:	4602      	mov	r2, r0
   b54c4:	2101      	movs	r1, #1
   b54c6:	6868      	ldr	r0, [r5, #4]
   b54c8:	f7ff fb58 	bl	b4b7c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b54cc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b54ce:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b54d0:	4622      	mov	r2, r4
   b54d2:	6868      	ldr	r0, [r5, #4]
   b54d4:	f7ff fb52 	bl	b4b7c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b54d8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b54da:	4681      	mov	r9, r0
        bool ok = false;
   b54dc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b54de:	2e00      	cmp	r6, #0
   b54e0:	d03b      	beq.n	b555a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b54e2:	2900      	cmp	r1, #0
   b54e4:	d139      	bne.n	b555a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b54e6:	6873      	ldr	r3, [r6, #4]
   b54e8:	2b02      	cmp	r3, #2
   b54ea:	d003      	beq.n	b54f4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b54ec:	2b0a      	cmp	r3, #10
   b54ee:	d011      	beq.n	b5514 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b54f0:	69f6      	ldr	r6, [r6, #28]
   b54f2:	e7f4      	b.n	b54de <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b54f4:	f1b8 0f00 	cmp.w	r8, #0
   b54f8:	d0fa      	beq.n	b54f0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b54fa:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b54fc:	a806      	add	r0, sp, #24
   b54fe:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5500:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5502:	f7ff fdf9 	bl	b50f8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5508:	1d3c      	adds	r4, r7, #4
   b550a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b550c:	682b      	ldr	r3, [r5, #0]
   b550e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5510:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5512:	e7ed      	b.n	b54f0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5514:	f1b9 0f00 	cmp.w	r9, #0
   b5518:	d0ea      	beq.n	b54f0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b551a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b551c:	2210      	movs	r2, #16
   b551e:	a801      	add	r0, sp, #4
   b5520:	f000 fcfe 	bl	b5f20 <memset>
                    a.v = 6;
   b5524:	2306      	movs	r3, #6
   b5526:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b552a:	ad01      	add	r5, sp, #4
   b552c:	f104 0308 	add.w	r3, r4, #8
   b5530:	3418      	adds	r4, #24
   b5532:	6818      	ldr	r0, [r3, #0]
   b5534:	6859      	ldr	r1, [r3, #4]
   b5536:	462a      	mov	r2, r5
   b5538:	c203      	stmia	r2!, {r0, r1}
   b553a:	3308      	adds	r3, #8
   b553c:	42a3      	cmp	r3, r4
   b553e:	4615      	mov	r5, r2
   b5540:	d1f7      	bne.n	b5532 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5542:	a901      	add	r1, sp, #4
   b5544:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5546:	ad07      	add	r5, sp, #28
   b5548:	f7ff fdb6 	bl	b50b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b554c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b554e:	1d3c      	adds	r4, r7, #4
   b5550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5552:	682b      	ldr	r3, [r5, #0]
   b5554:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5556:	4649      	mov	r1, r9
   b5558:	e7ca      	b.n	b54f0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b555a:	9800      	ldr	r0, [sp, #0]
   b555c:	f7ff f99a 	bl	b4894 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5560:	4638      	mov	r0, r7
   b5562:	b015      	add	sp, #84	; 0x54
   b5564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5568 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5568:	4b02      	ldr	r3, [pc, #8]	; (b5574 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b556a:	4a03      	ldr	r2, [pc, #12]	; (b5578 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b556c:	601a      	str	r2, [r3, #0]
   b556e:	2200      	movs	r2, #0
   b5570:	605a      	str	r2, [r3, #4]

} // spark
   b5572:	4770      	bx	lr
   b5574:	2003e7c0 	.word	0x2003e7c0
   b5578:	000b6108 	.word	0x000b6108

000b557c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b557c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b557e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5580:	d902      	bls.n	b5588 <pinAvailable+0xc>
    return false;
   b5582:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5584:	b002      	add	sp, #8
   b5586:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5588:	f1a0 030b 	sub.w	r3, r0, #11
   b558c:	2b02      	cmp	r3, #2
   b558e:	d81a      	bhi.n	b55c6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5590:	4c17      	ldr	r4, [pc, #92]	; (b55f0 <pinAvailable+0x74>)
   b5592:	7821      	ldrb	r1, [r4, #0]
   b5594:	f3bf 8f5b 	dmb	ish
   b5598:	f011 0101 	ands.w	r1, r1, #1
   b559c:	d10b      	bne.n	b55b6 <pinAvailable+0x3a>
   b559e:	4620      	mov	r0, r4
   b55a0:	9101      	str	r1, [sp, #4]
   b55a2:	f7fe fd7c 	bl	b409e <__cxa_guard_acquire>
   b55a6:	9901      	ldr	r1, [sp, #4]
   b55a8:	b128      	cbz	r0, b55b6 <pinAvailable+0x3a>
   b55aa:	4812      	ldr	r0, [pc, #72]	; (b55f4 <pinAvailable+0x78>)
   b55ac:	f7ff fb9c 	bl	b4ce8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b55b0:	4620      	mov	r0, r4
   b55b2:	f7fe fd79 	bl	b40a8 <__cxa_guard_release>
   b55b6:	4b0f      	ldr	r3, [pc, #60]	; (b55f4 <pinAvailable+0x78>)
   b55b8:	7818      	ldrb	r0, [r3, #0]
   b55ba:	f7ff fa5b 	bl	b4a74 <hal_spi_is_enabled>
   b55be:	2800      	cmp	r0, #0
   b55c0:	d1df      	bne.n	b5582 <pinAvailable+0x6>
  return true; // 'pin' is available
   b55c2:	2001      	movs	r0, #1
   b55c4:	e7de      	b.n	b5584 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b55c6:	2801      	cmp	r0, #1
   b55c8:	d809      	bhi.n	b55de <pinAvailable+0x62>
   b55ca:	f000 f83d 	bl	b5648 <_Z19__fetch_global_Wirev>
   b55ce:	2100      	movs	r1, #0
   b55d0:	7c00      	ldrb	r0, [r0, #16]
   b55d2:	f7ff fa37 	bl	b4a44 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b55d6:	f080 0001 	eor.w	r0, r0, #1
   b55da:	b2c0      	uxtb	r0, r0
   b55dc:	e7d2      	b.n	b5584 <pinAvailable+0x8>
   b55de:	3809      	subs	r0, #9
   b55e0:	2801      	cmp	r0, #1
   b55e2:	d8ee      	bhi.n	b55c2 <pinAvailable+0x46>
   b55e4:	f7ff fe78 	bl	b52d8 <_Z22__fetch_global_Serial1v>
   b55e8:	7c00      	ldrb	r0, [r0, #16]
   b55ea:	f7ff f9f3 	bl	b49d4 <hal_usart_is_enabled>
   b55ee:	e7f2      	b.n	b55d6 <pinAvailable+0x5a>
   b55f0:	2003e7c8 	.word	0x2003e7c8
   b55f4:	2003e7cc 	.word	0x2003e7cc

000b55f8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b55f8:	2823      	cmp	r0, #35	; 0x23
{
   b55fa:	b538      	push	{r3, r4, r5, lr}
   b55fc:	4604      	mov	r4, r0
   b55fe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5600:	d80a      	bhi.n	b5618 <pinMode+0x20>
   b5602:	29ff      	cmp	r1, #255	; 0xff
   b5604:	d008      	beq.n	b5618 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5606:	f7ff ffb9 	bl	b557c <pinAvailable>
   b560a:	b128      	cbz	r0, b5618 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b560c:	4629      	mov	r1, r5
   b560e:	4620      	mov	r0, r4
}
   b5610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5614:	f7ff b956 	b.w	b48c4 <HAL_Pin_Mode>
}
   b5618:	bd38      	pop	{r3, r4, r5, pc}
	...

000b561c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b561c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b561e:	2520      	movs	r5, #32
   b5620:	2314      	movs	r3, #20
{
   b5622:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5624:	6003      	str	r3, [r0, #0]
   b5626:	6085      	str	r5, [r0, #8]
   b5628:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b562a:	4906      	ldr	r1, [pc, #24]	; (b5644 <_Z17acquireWireBufferv+0x28>)
   b562c:	4628      	mov	r0, r5
   b562e:	f000 f83a 	bl	b56a6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5632:	4904      	ldr	r1, [pc, #16]	; (b5644 <_Z17acquireWireBufferv+0x28>)
	};
   b5634:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5636:	4628      	mov	r0, r5
   b5638:	f000 f835 	bl	b56a6 <_ZnajRKSt9nothrow_t>
	};
   b563c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b563e:	4620      	mov	r0, r4
   b5640:	bd38      	pop	{r3, r4, r5, pc}
   b5642:	bf00      	nop
   b5644:	000b613c 	.word	0x000b613c

000b5648 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b5648:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b564a:	4d0f      	ldr	r5, [pc, #60]	; (b5688 <_Z19__fetch_global_Wirev+0x40>)
   b564c:	7829      	ldrb	r1, [r5, #0]
   b564e:	f3bf 8f5b 	dmb	ish
   b5652:	f011 0401 	ands.w	r4, r1, #1
{
   b5656:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5658:	d113      	bne.n	b5682 <_Z19__fetch_global_Wirev+0x3a>
   b565a:	4628      	mov	r0, r5
   b565c:	f7fe fd1f 	bl	b409e <__cxa_guard_acquire>
   b5660:	b178      	cbz	r0, b5682 <_Z19__fetch_global_Wirev+0x3a>
   b5662:	a801      	add	r0, sp, #4
   b5664:	f7ff ffda 	bl	b561c <_Z17acquireWireBufferv>
   b5668:	aa01      	add	r2, sp, #4
   b566a:	4621      	mov	r1, r4
   b566c:	4807      	ldr	r0, [pc, #28]	; (b568c <_Z19__fetch_global_Wirev+0x44>)
   b566e:	f7ff fe89 	bl	b5384 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5672:	4628      	mov	r0, r5
   b5674:	f7fe fd18 	bl	b40a8 <__cxa_guard_release>
   b5678:	4a05      	ldr	r2, [pc, #20]	; (b5690 <_Z19__fetch_global_Wirev+0x48>)
   b567a:	4906      	ldr	r1, [pc, #24]	; (b5694 <_Z19__fetch_global_Wirev+0x4c>)
   b567c:	4803      	ldr	r0, [pc, #12]	; (b568c <_Z19__fetch_global_Wirev+0x44>)
   b567e:	f000 f80b 	bl	b5698 <__aeabi_atexit>
	return wire;
}
   b5682:	4802      	ldr	r0, [pc, #8]	; (b568c <_Z19__fetch_global_Wirev+0x44>)
   b5684:	b007      	add	sp, #28
   b5686:	bd30      	pop	{r4, r5, pc}
   b5688:	2003e7d8 	.word	0x2003e7d8
   b568c:	2003e7dc 	.word	0x2003e7dc
   b5690:	2003e600 	.word	0x2003e600
   b5694:	000b532d 	.word	0x000b532d

000b5698 <__aeabi_atexit>:
   b5698:	460b      	mov	r3, r1
   b569a:	4601      	mov	r1, r0
   b569c:	4618      	mov	r0, r3
   b569e:	f000 bc23 	b.w	b5ee8 <__cxa_atexit>

000b56a2 <_ZdlPvj>:
   b56a2:	f7fe bcfa 	b.w	b409a <_ZdlPv>

000b56a6 <_ZnajRKSt9nothrow_t>:
   b56a6:	f7fe bcf6 	b.w	b4096 <_Znaj>
	...

000b56ac <__aeabi_drsub>:
   b56ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b56b0:	e002      	b.n	b56b8 <__adddf3>
   b56b2:	bf00      	nop

000b56b4 <__aeabi_dsub>:
   b56b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b56b8 <__adddf3>:
   b56b8:	b530      	push	{r4, r5, lr}
   b56ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b56be:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b56c2:	ea94 0f05 	teq	r4, r5
   b56c6:	bf08      	it	eq
   b56c8:	ea90 0f02 	teqeq	r0, r2
   b56cc:	bf1f      	itttt	ne
   b56ce:	ea54 0c00 	orrsne.w	ip, r4, r0
   b56d2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b56d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b56da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b56de:	f000 80e2 	beq.w	b58a6 <__adddf3+0x1ee>
   b56e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b56e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b56ea:	bfb8      	it	lt
   b56ec:	426d      	neglt	r5, r5
   b56ee:	dd0c      	ble.n	b570a <__adddf3+0x52>
   b56f0:	442c      	add	r4, r5
   b56f2:	ea80 0202 	eor.w	r2, r0, r2
   b56f6:	ea81 0303 	eor.w	r3, r1, r3
   b56fa:	ea82 0000 	eor.w	r0, r2, r0
   b56fe:	ea83 0101 	eor.w	r1, r3, r1
   b5702:	ea80 0202 	eor.w	r2, r0, r2
   b5706:	ea81 0303 	eor.w	r3, r1, r3
   b570a:	2d36      	cmp	r5, #54	; 0x36
   b570c:	bf88      	it	hi
   b570e:	bd30      	pophi	{r4, r5, pc}
   b5710:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b5714:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5718:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b571c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b5720:	d002      	beq.n	b5728 <__adddf3+0x70>
   b5722:	4240      	negs	r0, r0
   b5724:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5728:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b572c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5730:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b5734:	d002      	beq.n	b573c <__adddf3+0x84>
   b5736:	4252      	negs	r2, r2
   b5738:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b573c:	ea94 0f05 	teq	r4, r5
   b5740:	f000 80a7 	beq.w	b5892 <__adddf3+0x1da>
   b5744:	f1a4 0401 	sub.w	r4, r4, #1
   b5748:	f1d5 0e20 	rsbs	lr, r5, #32
   b574c:	db0d      	blt.n	b576a <__adddf3+0xb2>
   b574e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b5752:	fa22 f205 	lsr.w	r2, r2, r5
   b5756:	1880      	adds	r0, r0, r2
   b5758:	f141 0100 	adc.w	r1, r1, #0
   b575c:	fa03 f20e 	lsl.w	r2, r3, lr
   b5760:	1880      	adds	r0, r0, r2
   b5762:	fa43 f305 	asr.w	r3, r3, r5
   b5766:	4159      	adcs	r1, r3
   b5768:	e00e      	b.n	b5788 <__adddf3+0xd0>
   b576a:	f1a5 0520 	sub.w	r5, r5, #32
   b576e:	f10e 0e20 	add.w	lr, lr, #32
   b5772:	2a01      	cmp	r2, #1
   b5774:	fa03 fc0e 	lsl.w	ip, r3, lr
   b5778:	bf28      	it	cs
   b577a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b577e:	fa43 f305 	asr.w	r3, r3, r5
   b5782:	18c0      	adds	r0, r0, r3
   b5784:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b5788:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b578c:	d507      	bpl.n	b579e <__adddf3+0xe6>
   b578e:	f04f 0e00 	mov.w	lr, #0
   b5792:	f1dc 0c00 	rsbs	ip, ip, #0
   b5796:	eb7e 0000 	sbcs.w	r0, lr, r0
   b579a:	eb6e 0101 	sbc.w	r1, lr, r1
   b579e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b57a2:	d31b      	bcc.n	b57dc <__adddf3+0x124>
   b57a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b57a8:	d30c      	bcc.n	b57c4 <__adddf3+0x10c>
   b57aa:	0849      	lsrs	r1, r1, #1
   b57ac:	ea5f 0030 	movs.w	r0, r0, rrx
   b57b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b57b4:	f104 0401 	add.w	r4, r4, #1
   b57b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b57bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b57c0:	f080 809a 	bcs.w	b58f8 <__adddf3+0x240>
   b57c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b57c8:	bf08      	it	eq
   b57ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b57ce:	f150 0000 	adcs.w	r0, r0, #0
   b57d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b57d6:	ea41 0105 	orr.w	r1, r1, r5
   b57da:	bd30      	pop	{r4, r5, pc}
   b57dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b57e0:	4140      	adcs	r0, r0
   b57e2:	eb41 0101 	adc.w	r1, r1, r1
   b57e6:	3c01      	subs	r4, #1
   b57e8:	bf28      	it	cs
   b57ea:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b57ee:	d2e9      	bcs.n	b57c4 <__adddf3+0x10c>
   b57f0:	f091 0f00 	teq	r1, #0
   b57f4:	bf04      	itt	eq
   b57f6:	4601      	moveq	r1, r0
   b57f8:	2000      	moveq	r0, #0
   b57fa:	fab1 f381 	clz	r3, r1
   b57fe:	bf08      	it	eq
   b5800:	3320      	addeq	r3, #32
   b5802:	f1a3 030b 	sub.w	r3, r3, #11
   b5806:	f1b3 0220 	subs.w	r2, r3, #32
   b580a:	da0c      	bge.n	b5826 <__adddf3+0x16e>
   b580c:	320c      	adds	r2, #12
   b580e:	dd08      	ble.n	b5822 <__adddf3+0x16a>
   b5810:	f102 0c14 	add.w	ip, r2, #20
   b5814:	f1c2 020c 	rsb	r2, r2, #12
   b5818:	fa01 f00c 	lsl.w	r0, r1, ip
   b581c:	fa21 f102 	lsr.w	r1, r1, r2
   b5820:	e00c      	b.n	b583c <__adddf3+0x184>
   b5822:	f102 0214 	add.w	r2, r2, #20
   b5826:	bfd8      	it	le
   b5828:	f1c2 0c20 	rsble	ip, r2, #32
   b582c:	fa01 f102 	lsl.w	r1, r1, r2
   b5830:	fa20 fc0c 	lsr.w	ip, r0, ip
   b5834:	bfdc      	itt	le
   b5836:	ea41 010c 	orrle.w	r1, r1, ip
   b583a:	4090      	lslle	r0, r2
   b583c:	1ae4      	subs	r4, r4, r3
   b583e:	bfa2      	ittt	ge
   b5840:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b5844:	4329      	orrge	r1, r5
   b5846:	bd30      	popge	{r4, r5, pc}
   b5848:	ea6f 0404 	mvn.w	r4, r4
   b584c:	3c1f      	subs	r4, #31
   b584e:	da1c      	bge.n	b588a <__adddf3+0x1d2>
   b5850:	340c      	adds	r4, #12
   b5852:	dc0e      	bgt.n	b5872 <__adddf3+0x1ba>
   b5854:	f104 0414 	add.w	r4, r4, #20
   b5858:	f1c4 0220 	rsb	r2, r4, #32
   b585c:	fa20 f004 	lsr.w	r0, r0, r4
   b5860:	fa01 f302 	lsl.w	r3, r1, r2
   b5864:	ea40 0003 	orr.w	r0, r0, r3
   b5868:	fa21 f304 	lsr.w	r3, r1, r4
   b586c:	ea45 0103 	orr.w	r1, r5, r3
   b5870:	bd30      	pop	{r4, r5, pc}
   b5872:	f1c4 040c 	rsb	r4, r4, #12
   b5876:	f1c4 0220 	rsb	r2, r4, #32
   b587a:	fa20 f002 	lsr.w	r0, r0, r2
   b587e:	fa01 f304 	lsl.w	r3, r1, r4
   b5882:	ea40 0003 	orr.w	r0, r0, r3
   b5886:	4629      	mov	r1, r5
   b5888:	bd30      	pop	{r4, r5, pc}
   b588a:	fa21 f004 	lsr.w	r0, r1, r4
   b588e:	4629      	mov	r1, r5
   b5890:	bd30      	pop	{r4, r5, pc}
   b5892:	f094 0f00 	teq	r4, #0
   b5896:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b589a:	bf06      	itte	eq
   b589c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b58a0:	3401      	addeq	r4, #1
   b58a2:	3d01      	subne	r5, #1
   b58a4:	e74e      	b.n	b5744 <__adddf3+0x8c>
   b58a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b58aa:	bf18      	it	ne
   b58ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b58b0:	d029      	beq.n	b5906 <__adddf3+0x24e>
   b58b2:	ea94 0f05 	teq	r4, r5
   b58b6:	bf08      	it	eq
   b58b8:	ea90 0f02 	teqeq	r0, r2
   b58bc:	d005      	beq.n	b58ca <__adddf3+0x212>
   b58be:	ea54 0c00 	orrs.w	ip, r4, r0
   b58c2:	bf04      	itt	eq
   b58c4:	4619      	moveq	r1, r3
   b58c6:	4610      	moveq	r0, r2
   b58c8:	bd30      	pop	{r4, r5, pc}
   b58ca:	ea91 0f03 	teq	r1, r3
   b58ce:	bf1e      	ittt	ne
   b58d0:	2100      	movne	r1, #0
   b58d2:	2000      	movne	r0, #0
   b58d4:	bd30      	popne	{r4, r5, pc}
   b58d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b58da:	d105      	bne.n	b58e8 <__adddf3+0x230>
   b58dc:	0040      	lsls	r0, r0, #1
   b58de:	4149      	adcs	r1, r1
   b58e0:	bf28      	it	cs
   b58e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b58e6:	bd30      	pop	{r4, r5, pc}
   b58e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b58ec:	bf3c      	itt	cc
   b58ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b58f2:	bd30      	popcc	{r4, r5, pc}
   b58f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b58f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b58fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5900:	f04f 0000 	mov.w	r0, #0
   b5904:	bd30      	pop	{r4, r5, pc}
   b5906:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b590a:	bf1a      	itte	ne
   b590c:	4619      	movne	r1, r3
   b590e:	4610      	movne	r0, r2
   b5910:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b5914:	bf1c      	itt	ne
   b5916:	460b      	movne	r3, r1
   b5918:	4602      	movne	r2, r0
   b591a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b591e:	bf06      	itte	eq
   b5920:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b5924:	ea91 0f03 	teqeq	r1, r3
   b5928:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b592c:	bd30      	pop	{r4, r5, pc}
   b592e:	bf00      	nop

000b5930 <__aeabi_ui2d>:
   b5930:	f090 0f00 	teq	r0, #0
   b5934:	bf04      	itt	eq
   b5936:	2100      	moveq	r1, #0
   b5938:	4770      	bxeq	lr
   b593a:	b530      	push	{r4, r5, lr}
   b593c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5940:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5944:	f04f 0500 	mov.w	r5, #0
   b5948:	f04f 0100 	mov.w	r1, #0
   b594c:	e750      	b.n	b57f0 <__adddf3+0x138>
   b594e:	bf00      	nop

000b5950 <__aeabi_i2d>:
   b5950:	f090 0f00 	teq	r0, #0
   b5954:	bf04      	itt	eq
   b5956:	2100      	moveq	r1, #0
   b5958:	4770      	bxeq	lr
   b595a:	b530      	push	{r4, r5, lr}
   b595c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5960:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5964:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b5968:	bf48      	it	mi
   b596a:	4240      	negmi	r0, r0
   b596c:	f04f 0100 	mov.w	r1, #0
   b5970:	e73e      	b.n	b57f0 <__adddf3+0x138>
   b5972:	bf00      	nop

000b5974 <__aeabi_f2d>:
   b5974:	0042      	lsls	r2, r0, #1
   b5976:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b597a:	ea4f 0131 	mov.w	r1, r1, rrx
   b597e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b5982:	bf1f      	itttt	ne
   b5984:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b5988:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b598c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b5990:	4770      	bxne	lr
   b5992:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b5996:	bf08      	it	eq
   b5998:	4770      	bxeq	lr
   b599a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b599e:	bf04      	itt	eq
   b59a0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b59a4:	4770      	bxeq	lr
   b59a6:	b530      	push	{r4, r5, lr}
   b59a8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b59ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b59b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b59b4:	e71c      	b.n	b57f0 <__adddf3+0x138>
   b59b6:	bf00      	nop

000b59b8 <__aeabi_ul2d>:
   b59b8:	ea50 0201 	orrs.w	r2, r0, r1
   b59bc:	bf08      	it	eq
   b59be:	4770      	bxeq	lr
   b59c0:	b530      	push	{r4, r5, lr}
   b59c2:	f04f 0500 	mov.w	r5, #0
   b59c6:	e00a      	b.n	b59de <__aeabi_l2d+0x16>

000b59c8 <__aeabi_l2d>:
   b59c8:	ea50 0201 	orrs.w	r2, r0, r1
   b59cc:	bf08      	it	eq
   b59ce:	4770      	bxeq	lr
   b59d0:	b530      	push	{r4, r5, lr}
   b59d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b59d6:	d502      	bpl.n	b59de <__aeabi_l2d+0x16>
   b59d8:	4240      	negs	r0, r0
   b59da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b59de:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b59e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b59e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b59ea:	f43f aed8 	beq.w	b579e <__adddf3+0xe6>
   b59ee:	f04f 0203 	mov.w	r2, #3
   b59f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b59f6:	bf18      	it	ne
   b59f8:	3203      	addne	r2, #3
   b59fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b59fe:	bf18      	it	ne
   b5a00:	3203      	addne	r2, #3
   b5a02:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b5a06:	f1c2 0320 	rsb	r3, r2, #32
   b5a0a:	fa00 fc03 	lsl.w	ip, r0, r3
   b5a0e:	fa20 f002 	lsr.w	r0, r0, r2
   b5a12:	fa01 fe03 	lsl.w	lr, r1, r3
   b5a16:	ea40 000e 	orr.w	r0, r0, lr
   b5a1a:	fa21 f102 	lsr.w	r1, r1, r2
   b5a1e:	4414      	add	r4, r2
   b5a20:	e6bd      	b.n	b579e <__adddf3+0xe6>
   b5a22:	bf00      	nop

000b5a24 <__aeabi_dmul>:
   b5a24:	b570      	push	{r4, r5, r6, lr}
   b5a26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5a2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5a2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5a32:	bf1d      	ittte	ne
   b5a34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5a38:	ea94 0f0c 	teqne	r4, ip
   b5a3c:	ea95 0f0c 	teqne	r5, ip
   b5a40:	f000 f8de 	bleq	b5c00 <__aeabi_dmul+0x1dc>
   b5a44:	442c      	add	r4, r5
   b5a46:	ea81 0603 	eor.w	r6, r1, r3
   b5a4a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b5a4e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b5a52:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b5a56:	bf18      	it	ne
   b5a58:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b5a5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b5a64:	d038      	beq.n	b5ad8 <__aeabi_dmul+0xb4>
   b5a66:	fba0 ce02 	umull	ip, lr, r0, r2
   b5a6a:	f04f 0500 	mov.w	r5, #0
   b5a6e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b5a72:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b5a76:	fbe0 e503 	umlal	lr, r5, r0, r3
   b5a7a:	f04f 0600 	mov.w	r6, #0
   b5a7e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b5a82:	f09c 0f00 	teq	ip, #0
   b5a86:	bf18      	it	ne
   b5a88:	f04e 0e01 	orrne.w	lr, lr, #1
   b5a8c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b5a90:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b5a94:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b5a98:	d204      	bcs.n	b5aa4 <__aeabi_dmul+0x80>
   b5a9a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b5a9e:	416d      	adcs	r5, r5
   b5aa0:	eb46 0606 	adc.w	r6, r6, r6
   b5aa4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b5aa8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b5aac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b5ab0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b5ab4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b5ab8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5abc:	bf88      	it	hi
   b5abe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b5ac2:	d81e      	bhi.n	b5b02 <__aeabi_dmul+0xde>
   b5ac4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b5ac8:	bf08      	it	eq
   b5aca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b5ace:	f150 0000 	adcs.w	r0, r0, #0
   b5ad2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5ad6:	bd70      	pop	{r4, r5, r6, pc}
   b5ad8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b5adc:	ea46 0101 	orr.w	r1, r6, r1
   b5ae0:	ea40 0002 	orr.w	r0, r0, r2
   b5ae4:	ea81 0103 	eor.w	r1, r1, r3
   b5ae8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b5aec:	bfc2      	ittt	gt
   b5aee:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5af2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5af6:	bd70      	popgt	{r4, r5, r6, pc}
   b5af8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5afc:	f04f 0e00 	mov.w	lr, #0
   b5b00:	3c01      	subs	r4, #1
   b5b02:	f300 80ab 	bgt.w	b5c5c <__aeabi_dmul+0x238>
   b5b06:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b5b0a:	bfde      	ittt	le
   b5b0c:	2000      	movle	r0, #0
   b5b0e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b5b12:	bd70      	pople	{r4, r5, r6, pc}
   b5b14:	f1c4 0400 	rsb	r4, r4, #0
   b5b18:	3c20      	subs	r4, #32
   b5b1a:	da35      	bge.n	b5b88 <__aeabi_dmul+0x164>
   b5b1c:	340c      	adds	r4, #12
   b5b1e:	dc1b      	bgt.n	b5b58 <__aeabi_dmul+0x134>
   b5b20:	f104 0414 	add.w	r4, r4, #20
   b5b24:	f1c4 0520 	rsb	r5, r4, #32
   b5b28:	fa00 f305 	lsl.w	r3, r0, r5
   b5b2c:	fa20 f004 	lsr.w	r0, r0, r4
   b5b30:	fa01 f205 	lsl.w	r2, r1, r5
   b5b34:	ea40 0002 	orr.w	r0, r0, r2
   b5b38:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b5b3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5b40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5b44:	fa21 f604 	lsr.w	r6, r1, r4
   b5b48:	eb42 0106 	adc.w	r1, r2, r6
   b5b4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5b50:	bf08      	it	eq
   b5b52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5b56:	bd70      	pop	{r4, r5, r6, pc}
   b5b58:	f1c4 040c 	rsb	r4, r4, #12
   b5b5c:	f1c4 0520 	rsb	r5, r4, #32
   b5b60:	fa00 f304 	lsl.w	r3, r0, r4
   b5b64:	fa20 f005 	lsr.w	r0, r0, r5
   b5b68:	fa01 f204 	lsl.w	r2, r1, r4
   b5b6c:	ea40 0002 	orr.w	r0, r0, r2
   b5b70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5b74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5b78:	f141 0100 	adc.w	r1, r1, #0
   b5b7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5b80:	bf08      	it	eq
   b5b82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5b86:	bd70      	pop	{r4, r5, r6, pc}
   b5b88:	f1c4 0520 	rsb	r5, r4, #32
   b5b8c:	fa00 f205 	lsl.w	r2, r0, r5
   b5b90:	ea4e 0e02 	orr.w	lr, lr, r2
   b5b94:	fa20 f304 	lsr.w	r3, r0, r4
   b5b98:	fa01 f205 	lsl.w	r2, r1, r5
   b5b9c:	ea43 0302 	orr.w	r3, r3, r2
   b5ba0:	fa21 f004 	lsr.w	r0, r1, r4
   b5ba4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5ba8:	fa21 f204 	lsr.w	r2, r1, r4
   b5bac:	ea20 0002 	bic.w	r0, r0, r2
   b5bb0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b5bb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5bb8:	bf08      	it	eq
   b5bba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5bbe:	bd70      	pop	{r4, r5, r6, pc}
   b5bc0:	f094 0f00 	teq	r4, #0
   b5bc4:	d10f      	bne.n	b5be6 <__aeabi_dmul+0x1c2>
   b5bc6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b5bca:	0040      	lsls	r0, r0, #1
   b5bcc:	eb41 0101 	adc.w	r1, r1, r1
   b5bd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5bd4:	bf08      	it	eq
   b5bd6:	3c01      	subeq	r4, #1
   b5bd8:	d0f7      	beq.n	b5bca <__aeabi_dmul+0x1a6>
   b5bda:	ea41 0106 	orr.w	r1, r1, r6
   b5bde:	f095 0f00 	teq	r5, #0
   b5be2:	bf18      	it	ne
   b5be4:	4770      	bxne	lr
   b5be6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b5bea:	0052      	lsls	r2, r2, #1
   b5bec:	eb43 0303 	adc.w	r3, r3, r3
   b5bf0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b5bf4:	bf08      	it	eq
   b5bf6:	3d01      	subeq	r5, #1
   b5bf8:	d0f7      	beq.n	b5bea <__aeabi_dmul+0x1c6>
   b5bfa:	ea43 0306 	orr.w	r3, r3, r6
   b5bfe:	4770      	bx	lr
   b5c00:	ea94 0f0c 	teq	r4, ip
   b5c04:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5c08:	bf18      	it	ne
   b5c0a:	ea95 0f0c 	teqne	r5, ip
   b5c0e:	d00c      	beq.n	b5c2a <__aeabi_dmul+0x206>
   b5c10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5c14:	bf18      	it	ne
   b5c16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5c1a:	d1d1      	bne.n	b5bc0 <__aeabi_dmul+0x19c>
   b5c1c:	ea81 0103 	eor.w	r1, r1, r3
   b5c20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5c24:	f04f 0000 	mov.w	r0, #0
   b5c28:	bd70      	pop	{r4, r5, r6, pc}
   b5c2a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5c2e:	bf06      	itte	eq
   b5c30:	4610      	moveq	r0, r2
   b5c32:	4619      	moveq	r1, r3
   b5c34:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5c38:	d019      	beq.n	b5c6e <__aeabi_dmul+0x24a>
   b5c3a:	ea94 0f0c 	teq	r4, ip
   b5c3e:	d102      	bne.n	b5c46 <__aeabi_dmul+0x222>
   b5c40:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b5c44:	d113      	bne.n	b5c6e <__aeabi_dmul+0x24a>
   b5c46:	ea95 0f0c 	teq	r5, ip
   b5c4a:	d105      	bne.n	b5c58 <__aeabi_dmul+0x234>
   b5c4c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b5c50:	bf1c      	itt	ne
   b5c52:	4610      	movne	r0, r2
   b5c54:	4619      	movne	r1, r3
   b5c56:	d10a      	bne.n	b5c6e <__aeabi_dmul+0x24a>
   b5c58:	ea81 0103 	eor.w	r1, r1, r3
   b5c5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5c60:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5c64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5c68:	f04f 0000 	mov.w	r0, #0
   b5c6c:	bd70      	pop	{r4, r5, r6, pc}
   b5c6e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5c72:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b5c76:	bd70      	pop	{r4, r5, r6, pc}

000b5c78 <__aeabi_ddiv>:
   b5c78:	b570      	push	{r4, r5, r6, lr}
   b5c7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5c7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5c82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5c86:	bf1d      	ittte	ne
   b5c88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5c8c:	ea94 0f0c 	teqne	r4, ip
   b5c90:	ea95 0f0c 	teqne	r5, ip
   b5c94:	f000 f8a7 	bleq	b5de6 <__aeabi_ddiv+0x16e>
   b5c98:	eba4 0405 	sub.w	r4, r4, r5
   b5c9c:	ea81 0e03 	eor.w	lr, r1, r3
   b5ca0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5ca4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5ca8:	f000 8088 	beq.w	b5dbc <__aeabi_ddiv+0x144>
   b5cac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5cb0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b5cb4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b5cb8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b5cbc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b5cc0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b5cc4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b5cc8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b5ccc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b5cd0:	429d      	cmp	r5, r3
   b5cd2:	bf08      	it	eq
   b5cd4:	4296      	cmpeq	r6, r2
   b5cd6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b5cda:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b5cde:	d202      	bcs.n	b5ce6 <__aeabi_ddiv+0x6e>
   b5ce0:	085b      	lsrs	r3, r3, #1
   b5ce2:	ea4f 0232 	mov.w	r2, r2, rrx
   b5ce6:	1ab6      	subs	r6, r6, r2
   b5ce8:	eb65 0503 	sbc.w	r5, r5, r3
   b5cec:	085b      	lsrs	r3, r3, #1
   b5cee:	ea4f 0232 	mov.w	r2, r2, rrx
   b5cf2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b5cf6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b5cfa:	ebb6 0e02 	subs.w	lr, r6, r2
   b5cfe:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5d02:	bf22      	ittt	cs
   b5d04:	1ab6      	subcs	r6, r6, r2
   b5d06:	4675      	movcs	r5, lr
   b5d08:	ea40 000c 	orrcs.w	r0, r0, ip
   b5d0c:	085b      	lsrs	r3, r3, #1
   b5d0e:	ea4f 0232 	mov.w	r2, r2, rrx
   b5d12:	ebb6 0e02 	subs.w	lr, r6, r2
   b5d16:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5d1a:	bf22      	ittt	cs
   b5d1c:	1ab6      	subcs	r6, r6, r2
   b5d1e:	4675      	movcs	r5, lr
   b5d20:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b5d24:	085b      	lsrs	r3, r3, #1
   b5d26:	ea4f 0232 	mov.w	r2, r2, rrx
   b5d2a:	ebb6 0e02 	subs.w	lr, r6, r2
   b5d2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5d32:	bf22      	ittt	cs
   b5d34:	1ab6      	subcs	r6, r6, r2
   b5d36:	4675      	movcs	r5, lr
   b5d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b5d3c:	085b      	lsrs	r3, r3, #1
   b5d3e:	ea4f 0232 	mov.w	r2, r2, rrx
   b5d42:	ebb6 0e02 	subs.w	lr, r6, r2
   b5d46:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5d4a:	bf22      	ittt	cs
   b5d4c:	1ab6      	subcs	r6, r6, r2
   b5d4e:	4675      	movcs	r5, lr
   b5d50:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b5d54:	ea55 0e06 	orrs.w	lr, r5, r6
   b5d58:	d018      	beq.n	b5d8c <__aeabi_ddiv+0x114>
   b5d5a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b5d5e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b5d62:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b5d66:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b5d6a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b5d6e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b5d72:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b5d76:	d1c0      	bne.n	b5cfa <__aeabi_ddiv+0x82>
   b5d78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5d7c:	d10b      	bne.n	b5d96 <__aeabi_ddiv+0x11e>
   b5d7e:	ea41 0100 	orr.w	r1, r1, r0
   b5d82:	f04f 0000 	mov.w	r0, #0
   b5d86:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b5d8a:	e7b6      	b.n	b5cfa <__aeabi_ddiv+0x82>
   b5d8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5d90:	bf04      	itt	eq
   b5d92:	4301      	orreq	r1, r0
   b5d94:	2000      	moveq	r0, #0
   b5d96:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5d9a:	bf88      	it	hi
   b5d9c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b5da0:	f63f aeaf 	bhi.w	b5b02 <__aeabi_dmul+0xde>
   b5da4:	ebb5 0c03 	subs.w	ip, r5, r3
   b5da8:	bf04      	itt	eq
   b5daa:	ebb6 0c02 	subseq.w	ip, r6, r2
   b5dae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5db2:	f150 0000 	adcs.w	r0, r0, #0
   b5db6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5dba:	bd70      	pop	{r4, r5, r6, pc}
   b5dbc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b5dc0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b5dc4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b5dc8:	bfc2      	ittt	gt
   b5dca:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5dce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5dd2:	bd70      	popgt	{r4, r5, r6, pc}
   b5dd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5dd8:	f04f 0e00 	mov.w	lr, #0
   b5ddc:	3c01      	subs	r4, #1
   b5dde:	e690      	b.n	b5b02 <__aeabi_dmul+0xde>
   b5de0:	ea45 0e06 	orr.w	lr, r5, r6
   b5de4:	e68d      	b.n	b5b02 <__aeabi_dmul+0xde>
   b5de6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5dea:	ea94 0f0c 	teq	r4, ip
   b5dee:	bf08      	it	eq
   b5df0:	ea95 0f0c 	teqeq	r5, ip
   b5df4:	f43f af3b 	beq.w	b5c6e <__aeabi_dmul+0x24a>
   b5df8:	ea94 0f0c 	teq	r4, ip
   b5dfc:	d10a      	bne.n	b5e14 <__aeabi_ddiv+0x19c>
   b5dfe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5e02:	f47f af34 	bne.w	b5c6e <__aeabi_dmul+0x24a>
   b5e06:	ea95 0f0c 	teq	r5, ip
   b5e0a:	f47f af25 	bne.w	b5c58 <__aeabi_dmul+0x234>
   b5e0e:	4610      	mov	r0, r2
   b5e10:	4619      	mov	r1, r3
   b5e12:	e72c      	b.n	b5c6e <__aeabi_dmul+0x24a>
   b5e14:	ea95 0f0c 	teq	r5, ip
   b5e18:	d106      	bne.n	b5e28 <__aeabi_ddiv+0x1b0>
   b5e1a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5e1e:	f43f aefd 	beq.w	b5c1c <__aeabi_dmul+0x1f8>
   b5e22:	4610      	mov	r0, r2
   b5e24:	4619      	mov	r1, r3
   b5e26:	e722      	b.n	b5c6e <__aeabi_dmul+0x24a>
   b5e28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5e2c:	bf18      	it	ne
   b5e2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5e32:	f47f aec5 	bne.w	b5bc0 <__aeabi_dmul+0x19c>
   b5e36:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b5e3a:	f47f af0d 	bne.w	b5c58 <__aeabi_dmul+0x234>
   b5e3e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b5e42:	f47f aeeb 	bne.w	b5c1c <__aeabi_dmul+0x1f8>
   b5e46:	e712      	b.n	b5c6e <__aeabi_dmul+0x24a>

000b5e48 <__aeabi_d2f>:
   b5e48:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b5e4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b5e50:	bf24      	itt	cs
   b5e52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b5e56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b5e5a:	d90d      	bls.n	b5e78 <__aeabi_d2f+0x30>
   b5e5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b5e60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b5e64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b5e68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b5e6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b5e70:	bf08      	it	eq
   b5e72:	f020 0001 	biceq.w	r0, r0, #1
   b5e76:	4770      	bx	lr
   b5e78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b5e7c:	d121      	bne.n	b5ec2 <__aeabi_d2f+0x7a>
   b5e7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b5e82:	bfbc      	itt	lt
   b5e84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b5e88:	4770      	bxlt	lr
   b5e8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5e8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b5e92:	f1c2 0218 	rsb	r2, r2, #24
   b5e96:	f1c2 0c20 	rsb	ip, r2, #32
   b5e9a:	fa10 f30c 	lsls.w	r3, r0, ip
   b5e9e:	fa20 f002 	lsr.w	r0, r0, r2
   b5ea2:	bf18      	it	ne
   b5ea4:	f040 0001 	orrne.w	r0, r0, #1
   b5ea8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b5eac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b5eb0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b5eb4:	ea40 000c 	orr.w	r0, r0, ip
   b5eb8:	fa23 f302 	lsr.w	r3, r3, r2
   b5ebc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b5ec0:	e7cc      	b.n	b5e5c <__aeabi_d2f+0x14>
   b5ec2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b5ec6:	d107      	bne.n	b5ed8 <__aeabi_d2f+0x90>
   b5ec8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b5ecc:	bf1e      	ittt	ne
   b5ece:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b5ed2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b5ed6:	4770      	bxne	lr
   b5ed8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b5edc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b5ee0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b5ee4:	4770      	bx	lr
   b5ee6:	bf00      	nop

000b5ee8 <__cxa_atexit>:
   b5ee8:	b510      	push	{r4, lr}
   b5eea:	4c05      	ldr	r4, [pc, #20]	; (b5f00 <__cxa_atexit+0x18>)
   b5eec:	4613      	mov	r3, r2
   b5eee:	b12c      	cbz	r4, b5efc <__cxa_atexit+0x14>
   b5ef0:	460a      	mov	r2, r1
   b5ef2:	4601      	mov	r1, r0
   b5ef4:	2002      	movs	r0, #2
   b5ef6:	f3af 8000 	nop.w
   b5efa:	bd10      	pop	{r4, pc}
   b5efc:	4620      	mov	r0, r4
   b5efe:	e7fc      	b.n	b5efa <__cxa_atexit+0x12>
   b5f00:	00000000 	.word	0x00000000

000b5f04 <memcpy>:
   b5f04:	440a      	add	r2, r1
   b5f06:	4291      	cmp	r1, r2
   b5f08:	f100 33ff 	add.w	r3, r0, #4294967295
   b5f0c:	d100      	bne.n	b5f10 <memcpy+0xc>
   b5f0e:	4770      	bx	lr
   b5f10:	b510      	push	{r4, lr}
   b5f12:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5f16:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5f1a:	4291      	cmp	r1, r2
   b5f1c:	d1f9      	bne.n	b5f12 <memcpy+0xe>
   b5f1e:	bd10      	pop	{r4, pc}

000b5f20 <memset>:
   b5f20:	4402      	add	r2, r0
   b5f22:	4603      	mov	r3, r0
   b5f24:	4293      	cmp	r3, r2
   b5f26:	d100      	bne.n	b5f2a <memset+0xa>
   b5f28:	4770      	bx	lr
   b5f2a:	f803 1b01 	strb.w	r1, [r3], #1
   b5f2e:	e7f9      	b.n	b5f24 <memset+0x4>

000b5f30 <srand>:
   b5f30:	b538      	push	{r3, r4, r5, lr}
   b5f32:	4b10      	ldr	r3, [pc, #64]	; (b5f74 <srand+0x44>)
   b5f34:	681d      	ldr	r5, [r3, #0]
   b5f36:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5f38:	4604      	mov	r4, r0
   b5f3a:	b9b3      	cbnz	r3, b5f6a <srand+0x3a>
   b5f3c:	2018      	movs	r0, #24
   b5f3e:	f7fe fe6d 	bl	b4c1c <malloc>
   b5f42:	4602      	mov	r2, r0
   b5f44:	63a8      	str	r0, [r5, #56]	; 0x38
   b5f46:	b920      	cbnz	r0, b5f52 <srand+0x22>
   b5f48:	4b0b      	ldr	r3, [pc, #44]	; (b5f78 <srand+0x48>)
   b5f4a:	480c      	ldr	r0, [pc, #48]	; (b5f7c <srand+0x4c>)
   b5f4c:	2142      	movs	r1, #66	; 0x42
   b5f4e:	f7fe fe7d 	bl	b4c4c <__assert_func>
   b5f52:	490b      	ldr	r1, [pc, #44]	; (b5f80 <srand+0x50>)
   b5f54:	4b0b      	ldr	r3, [pc, #44]	; (b5f84 <srand+0x54>)
   b5f56:	e9c0 1300 	strd	r1, r3, [r0]
   b5f5a:	4b0b      	ldr	r3, [pc, #44]	; (b5f88 <srand+0x58>)
   b5f5c:	6083      	str	r3, [r0, #8]
   b5f5e:	230b      	movs	r3, #11
   b5f60:	8183      	strh	r3, [r0, #12]
   b5f62:	2100      	movs	r1, #0
   b5f64:	2001      	movs	r0, #1
   b5f66:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5f6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5f6c:	2200      	movs	r2, #0
   b5f6e:	611c      	str	r4, [r3, #16]
   b5f70:	615a      	str	r2, [r3, #20]
   b5f72:	bd38      	pop	{r3, r4, r5, pc}
   b5f74:	2003e59c 	.word	0x2003e59c
   b5f78:	000b613d 	.word	0x000b613d
   b5f7c:	000b6154 	.word	0x000b6154
   b5f80:	abcd330e 	.word	0xabcd330e
   b5f84:	e66d1234 	.word	0xe66d1234
   b5f88:	0005deec 	.word	0x0005deec

000b5f8c <strlen>:
   b5f8c:	4603      	mov	r3, r0
   b5f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5f92:	2a00      	cmp	r2, #0
   b5f94:	d1fb      	bne.n	b5f8e <strlen+0x2>
   b5f96:	1a18      	subs	r0, r3, r0
   b5f98:	3801      	subs	r0, #1
   b5f9a:	4770      	bx	lr

000b5f9c <dynalib_user>:
   b5f9c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b5fac:	0000 0000 6554 706d 7265 7461 7275 2065     ....Temperature 
   b5fbc:	2e25 6632 4320 2520 322e 2066 2046 0000     %.2f C %.2f F ..

000b5fcc <_ZTVN5spark13EthernetClassE>:
	...
   b5fd4:	4ccb 000b 4cc1 000b 4cb7 000b 4cad 000b     .L...L...L...L..
   b5fe4:	4ca1 000b 4c95 000b 5459 000b 5461 000b     .L...L..YT..aT..
   b5ff4:	4c89 000b 4c81 000b 4c77 000b 4c6d 000b     .L...L..wL..mL..
   b6004:	5491 000b 7061 0070 5925 252d 2d6d 6425     .T..app.%Y-%m-%d
   b6014:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b6024:	6d69 0065                                   ime.

000b6028 <_ZTV9IPAddress>:
	...
   b6030:	5039 000b 5029 000b 502b 000b               9P..)P..+P..

000b603c <_ZTV9USBSerial>:
	...
   b6044:	511d 000b 5185 000b 515b 000b 4d85 000b     .Q...Q..[Q...M..
   b6054:	514d 000b 511f 000b 512f 000b 517f 000b     MQ...Q../Q...Q..
   b6064:	513f 000b 5119 000b                         ?Q...Q..

000b606c <_ZTV11USARTSerial>:
	...
   b6074:	5231 000b 529d 000b 5275 000b 4d85 000b     1R...R..uR...M..
   b6084:	5245 000b 5261 000b 5253 000b 526f 000b     ER..aR..SR..oR..
   b6094:	5233 000b 5237 000b                         3R..7R..

000b609c <_ZTV7TwoWire>:
	...
   b60a4:	532d 000b 5377 000b 534f 000b 532f 000b     -S..wS..OS../S..
   b60b4:	5357 000b 535f 000b 5367 000b 536f 000b     WS.._S..gS..oS..

000b60c4 <_ZTVN5spark9WiFiClassE>:
	...
   b60cc:	53fb 000b 53f1 000b 53e7 000b 53a9 000b     .S...S...S...S..
   b60dc:	4e91 000b 53db 000b 5459 000b 5461 000b     .N...S..YT..aT..
   b60ec:	53cf 000b 53c7 000b 53bd 000b 53b3 000b     .S...S...S...S..
   b60fc:	5491 000b                                   .T..

000b6100 <_ZTVN5spark12NetworkClassE>:
	...
   b6108:	5419 000b 5423 000b 542d 000b 5437 000b     .T..#T..-T..7T..
   b6118:	5441 000b 544d 000b 5459 000b 5461 000b     AT..MT..YT..aT..
   b6128:	5469 000b 5475 000b 547d 000b 5487 000b     iT..uT..}T...T..
   b6138:	5491 000b                                   .T..

000b613c <_ZSt7nothrow>:
   b613c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b614c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b615c:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b616c:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b617c:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b618c:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b619c:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b61ac:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b61bc:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b61cc:	646e 632e                                    nd.c.

000b61d1 <link_const_variable_data_end>:
   b61d1:	00          	.byte	0x00
	...

000b61d4 <link_constructors_location>:
   b61d4:	000b4155 	.word	0x000b4155
   b61d8:	000b4cd5 	.word	0x000b4cd5
   b61dc:	000b4cfd 	.word	0x000b4cfd
   b61e0:	000b4d5d 	.word	0x000b4d5d
   b61e4:	000b4e9d 	.word	0x000b4e9d
   b61e8:	000b4ead 	.word	0x000b4ead
   b61ec:	000b4ed5 	.word	0x000b4ed5
   b61f0:	000b5405 	.word	0x000b5405
   b61f4:	000b5569 	.word	0x000b5569

000b61f8 <link_constructors_end>:
	...
