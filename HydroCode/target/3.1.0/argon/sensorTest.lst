
c:/Users/School/Documents/IoT/Hydroponic-Capstone/sensorTest/target/3.1.0/argon/sensorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009690  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000bd6b0  000bd6b0  0000d6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd6b8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000005ec  2003dc18  000bd6bc  0001dc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005ec  2003e208  2003e208  0002e208  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bdca8  000bdca8  0002dca8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bdcd0  000bdcd0  0002dcd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014f454  00000000  00000000  0002dcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00018f65  00000000  00000000  0017d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00040697  00000000  00000000  0019608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003498  00000000  00000000  001d6724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b1b8  00000000  00000000  001d9bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004257f  00000000  00000000  001e4d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00050f84  00000000  00000000  002272f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012f515  00000000  00000000  00278277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a05c  00000000  00000000  003a778c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 f9c7 	bl	ba3c4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 f9e9 	bl	ba414 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dc18 	.word	0x2003dc18
   b404c:	000bd6bc 	.word	0x000bd6bc
   b4050:	2003e204 	.word	0x2003e204
   b4054:	2003e208 	.word	0x2003e208
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 f91d 	bl	b82a0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42a5      	cmp	r5, r4
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd684 	.word	0x000bd684
   b4080:	000bd6a8 	.word	0x000bd6a8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b8d8 	b.w	b4238 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fd6f 	bl	b4b6c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 b8bd 	b.w	b8210 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bb39 	b.w	b770c <malloc>

000b409a <_Znaj>:
   b409a:	f003 bb37 	b.w	b770c <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f003 bb3d 	b.w	b771c <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	2100      	movs	r1, #0
   b40aa:	200c      	movs	r0, #12
   b40ac:	f003 fa62 	bl	b7574 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b71a5 	.word	0x000b71a5

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b40c8:	4770      	bx	lr

000b40ca <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   b40ca:	4770      	bx	lr

000b40cc <_Z10pumpSwitchv>:
  mqttNutrientAdd();
  mqttPumpControl();
  
}

void pumpSwitch () {
   b40cc:	b508      	push	{r3, lr}
  pumpOnOFF = true;
   b40ce:	4b04      	ldr	r3, [pc, #16]	; (b40e0 <_Z10pumpSwitchv+0x14>)
   b40d0:	2201      	movs	r2, #1
   b40d2:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40d4:	f003 f86e 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
  pumpStart = millis();
   b40d8:	4b02      	ldr	r3, [pc, #8]	; (b40e4 <_Z10pumpSwitchv+0x18>)
   b40da:	6018      	str	r0, [r3, #0]
}
   b40dc:	bd08      	pop	{r3, pc}
   b40de:	bf00      	nop
   b40e0:	2003e5c0 	.word	0x2003e5c0
   b40e4:	2003e5c4 	.word	0x2003e5c4

000b40e8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b40e8:	b510      	push	{r4, lr}
   b40ea:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b40ec:	6800      	ldr	r0, [r0, #0]
   b40ee:	b108      	cbz	r0, b40f4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   b40f0:	f003 fb14 	bl	b771c <free>
class SystemClass {
   b40f4:	4620      	mov	r0, r4
   b40f6:	bd10      	pop	{r4, pc}

000b40f8 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b40f8:	6943      	ldr	r3, [r0, #20]
   b40fa:	b113      	cbz	r3, b4102 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b40fc:	6983      	ldr	r3, [r0, #24]
   b40fe:	300c      	adds	r0, #12
   b4100:	4718      	bx	r3
            callback();
        }
    }
   b4102:	4770      	bx	lr

000b4104 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4104:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4106:	2100      	movs	r1, #0
   b4108:	4604      	mov	r4, r0
   b410a:	4608      	mov	r0, r1
   b410c:	f003 f882 	bl	b7214 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4110:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4112:	4620      	mov	r0, r4
   b4114:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4116:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4118:	f003 f894 	bl	b7244 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b411c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b411e:	b10c      	cbz	r4, b4124 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4120:	2301      	movs	r3, #1
   b4122:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4124:	2100      	movs	r1, #0
   b4126:	2001      	movs	r0, #1
   b4128:	f003 f874 	bl	b7214 <os_thread_scheduling>
            }
        }
        if (t) {
   b412c:	b12c      	cbz	r4, b413a <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b412e:	6823      	ldr	r3, [r4, #0]
   b4130:	4620      	mov	r0, r4
   b4132:	689b      	ldr	r3, [r3, #8]
   b4134:	4798      	blx	r3
            t->running = false;
   b4136:	2300      	movs	r3, #0
   b4138:	7123      	strb	r3, [r4, #4]
        }
    }
   b413a:	b002      	add	sp, #8
   b413c:	bd10      	pop	{r4, pc}
	...

000b4140 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4140:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4142:	6984      	ldr	r4, [r0, #24]
   b4144:	4b0a      	ldr	r3, [pc, #40]	; (b4170 <_ZN9TCPClientD1Ev+0x30>)
   b4146:	6003      	str	r3, [r0, #0]
   b4148:	4605      	mov	r5, r0
   b414a:	b17c      	cbz	r4, b416c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b414c:	6863      	ldr	r3, [r4, #4]
   b414e:	3b01      	subs	r3, #1
   b4150:	6063      	str	r3, [r4, #4]
   b4152:	b95b      	cbnz	r3, b416c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4154:	6823      	ldr	r3, [r4, #0]
   b4156:	4620      	mov	r0, r4
   b4158:	689b      	ldr	r3, [r3, #8]
   b415a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b415c:	68a3      	ldr	r3, [r4, #8]
   b415e:	3b01      	subs	r3, #1
   b4160:	60a3      	str	r3, [r4, #8]
   b4162:	b91b      	cbnz	r3, b416c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4164:	6823      	ldr	r3, [r4, #0]
   b4166:	4620      	mov	r0, r4
   b4168:	68db      	ldr	r3, [r3, #12]
   b416a:	4798      	blx	r3
   b416c:	4628      	mov	r0, r5
   b416e:	bd38      	pop	{r3, r4, r5, pc}
   b4170:	000bd064 	.word	0x000bd064

000b4174 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4174:	2a01      	cmp	r2, #1
   b4176:	d102      	bne.n	b417e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4178:	6001      	str	r1, [r0, #0]
      }
   b417a:	2000      	movs	r0, #0
   b417c:	4770      	bx	lr
	  switch (__op)
   b417e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4180:	bf04      	itt	eq
   b4182:	680b      	ldreq	r3, [r1, #0]
   b4184:	6003      	streq	r3, [r0, #0]
	      break;
   b4186:	e7f8      	b.n	b417a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4188 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4188:	6803      	ldr	r3, [r0, #0]
   b418a:	4718      	bx	r3

000b418c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b418c:	b40e      	push	{r1, r2, r3}
   b418e:	b503      	push	{r0, r1, lr}
   b4190:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4192:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4194:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4198:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b419a:	f003 fedc 	bl	b7f56 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b419e:	b002      	add	sp, #8
   b41a0:	f85d eb04 	ldr.w	lr, [sp], #4
   b41a4:	b003      	add	sp, #12
   b41a6:	4770      	bx	lr

000b41a8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b41a8:	b510      	push	{r4, lr}
      if (_M_manager)
   b41aa:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b41ac:	4604      	mov	r4, r0
      if (_M_manager)
   b41ae:	b113      	cbz	r3, b41b6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b41b0:	2203      	movs	r2, #3
   b41b2:	4601      	mov	r1, r0
   b41b4:	4798      	blx	r3
    }
   b41b6:	4620      	mov	r0, r4
   b41b8:	bd10      	pop	{r4, pc}
	...

000b41bc <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b41bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b41be:	4b13      	ldr	r3, [pc, #76]	; (b420c <_ZN5TimerD1Ev+0x50>)
   b41c0:	6003      	str	r3, [r0, #0]
   b41c2:	4604      	mov	r4, r0
        if (handle) {
   b41c4:	6880      	ldr	r0, [r0, #8]
   b41c6:	b1c8      	cbz	r0, b41fc <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b41c8:	2500      	movs	r5, #0
   b41ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b41ce:	e9cd 3500 	strd	r3, r5, [sp]
   b41d2:	2102      	movs	r1, #2
   b41d4:	462b      	mov	r3, r5
   b41d6:	462a      	mov	r2, r5
   b41d8:	f003 f83c 	bl	b7254 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b41dc:	68a0      	ldr	r0, [r4, #8]
   b41de:	4629      	mov	r1, r5
   b41e0:	f003 f850 	bl	b7284 <os_timer_set_id>
            while (running) {
   b41e4:	7923      	ldrb	r3, [r4, #4]
   b41e6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b41ea:	b113      	cbz	r3, b41f2 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b41ec:	f003 f80a 	bl	b7204 <os_thread_yield>
            while (running) {
   b41f0:	e7f8      	b.n	b41e4 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b41f2:	68a0      	ldr	r0, [r4, #8]
   b41f4:	4629      	mov	r1, r5
   b41f6:	f003 f81d 	bl	b7234 <os_timer_destroy>
            handle = nullptr;
   b41fa:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b41fc:	f104 000c 	add.w	r0, r4, #12
   b4200:	f7ff ffd2 	bl	b41a8 <_ZNSt14_Function_baseD1Ev>
    }
   b4204:	4620      	mov	r0, r4
   b4206:	b003      	add	sp, #12
   b4208:	bd30      	pop	{r4, r5, pc}
   b420a:	bf00      	nop
   b420c:	000bc6ec 	.word	0x000bc6ec

000b4210 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4210:	b510      	push	{r4, lr}
   b4212:	4604      	mov	r4, r0
    }
   b4214:	f7ff ffd2 	bl	b41bc <_ZN5TimerD1Ev>
   b4218:	4620      	mov	r0, r4
   b421a:	211c      	movs	r1, #28
   b421c:	f004 ff49 	bl	b90b2 <_ZdlPvj>
   b4220:	4620      	mov	r0, r4
   b4222:	bd10      	pop	{r4, pc}

000b4224 <_ZN9TCPClientD0Ev>:
   b4224:	b510      	push	{r4, lr}
   b4226:	4604      	mov	r4, r0
   b4228:	f7ff ff8a 	bl	b4140 <_ZN9TCPClientD1Ev>
   b422c:	4620      	mov	r0, r4
   b422e:	211c      	movs	r1, #28
   b4230:	f004 ff3f 	bl	b90b2 <_ZdlPvj>
   b4234:	4620      	mov	r0, r4
   b4236:	bd10      	pop	{r4, pc}

000b4238 <setup>:
void setup() {
   b4238:	b513      	push	{r0, r1, r4, lr}
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b423a:	482f      	ldr	r0, [pc, #188]	; (b42f8 <setup+0xc0>)
   b423c:	2300      	movs	r3, #0
   b423e:	4619      	mov	r1, r3
   b4240:	461a      	mov	r2, r3
   b4242:	6840      	ldr	r0, [r0, #4]
   b4244:	f003 f9da 	bl	b75fc <network_connect>
  Serial.begin(9600);
   b4248:	f004 f948 	bl	b84dc <_Z16_fetch_usbserialv>
   b424c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4250:	f004 f938 	bl	b84c4 <_ZN9USBSerial5beginEl>
  mqtt.subscribe(&pHdown);
   b4254:	4929      	ldr	r1, [pc, #164]	; (b42fc <setup+0xc4>)
   b4256:	482a      	ldr	r0, [pc, #168]	; (b4300 <setup+0xc8>)
   b4258:	f001 ffb6 	bl	b61c8 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
  mqtt.subscribe(&nutrientAdd);
   b425c:	4929      	ldr	r1, [pc, #164]	; (b4304 <setup+0xcc>)
   b425e:	4828      	ldr	r0, [pc, #160]	; (b4300 <setup+0xc8>)
   b4260:	f001 ffb2 	bl	b61c8 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
  mqtt.subscribe(&pumpControl);
   b4264:	4928      	ldr	r1, [pc, #160]	; (b4308 <setup+0xd0>)
   b4266:	4826      	ldr	r0, [pc, #152]	; (b4300 <setup+0xc8>)
   b4268:	f001 ffae 	bl	b61c8 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
  pinMode(PONDPUMP, OUTPUT);
   b426c:	2101      	movs	r1, #1
   b426e:	2008      	movs	r0, #8
   b4270:	f004 fe66 	bl	b8f40 <pinMode>
  pinMode(pHRelayPin, OUTPUT);
   b4274:	2101      	movs	r1, #1
   b4276:	2004      	movs	r0, #4
   b4278:	f004 fe62 	bl	b8f40 <pinMode>
  pinMode(nutrientRelayPin, OUTPUT);
   b427c:	2101      	movs	r1, #1
   b427e:	2005      	movs	r0, #5
   b4280:	f004 fe5e 	bl	b8f40 <pinMode>
  pinMode(PHpin, INPUT);
   b4284:	2100      	movs	r1, #0
   b4286:	2011      	movs	r0, #17
   b4288:	f004 fe5a 	bl	b8f40 <pinMode>
  pinMode(TDSpin, INPUT);
   b428c:	2100      	movs	r1, #0
   b428e:	2013      	movs	r0, #19
   b4290:	f004 fe56 	bl	b8f40 <pinMode>
  Time.zone(-7);
   b4294:	eeb9 0a0c 	vmov.f32	s0, #156	; 0xc0e00000 -7.0
   b4298:	f003 feaa 	bl	b7ff0 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b429c:	f003 fa16 	bl	b76cc <spark_cloud_flag_connected>
        if (!connected()) {
   b42a0:	b110      	cbz	r0, b42a8 <setup+0x70>
        return spark_sync_time(NULL);
   b42a2:	2000      	movs	r0, #0
   b42a4:	f003 fa1a 	bl	b76dc <spark_sync_time>
  bme.begin();  
   b42a8:	4818      	ldr	r0, [pc, #96]	; (b430c <setup+0xd4>)
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42aa:	4c19      	ldr	r4, [pc, #100]	; (b4310 <setup+0xd8>)
   b42ac:	f001 fe1f 	bl	b5eee <_ZN15Adafruit_BME2805beginEv>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);
   b42b0:	223c      	movs	r2, #60	; 0x3c
   b42b2:	2102      	movs	r1, #2
   b42b4:	4817      	ldr	r0, [pc, #92]	; (b4314 <setup+0xdc>)
   b42b6:	f002 fc7b 	bl	b6bb0 <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   b42ba:	4816      	ldr	r0, [pc, #88]	; (b4314 <setup+0xdc>)
   b42bc:	f002 fbac 	bl	b6a18 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b42c0:	4814      	ldr	r0, [pc, #80]	; (b4314 <setup+0xdc>)
   b42c2:	f002 fc05 	bl	b6ad0 <_ZN16Adafruit_SSD13067displayEv>
   b42c6:	68a0      	ldr	r0, [r4, #8]
   b42c8:	b130      	cbz	r0, b42d8 <setup+0xa0>
   b42ca:	2300      	movs	r3, #0
   b42cc:	e9cd 3300 	strd	r3, r3, [sp]
   b42d0:	461a      	mov	r2, r3
   b42d2:	2102      	movs	r1, #2
   b42d4:	f002 ffbe 	bl	b7254 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42d8:	68a0      	ldr	r0, [r4, #8]
   b42da:	b140      	cbz	r0, b42ee <setup+0xb6>
   b42dc:	2300      	movs	r3, #0
   b42de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b42e2:	e9cd 2300 	strd	r2, r3, [sp]
   b42e6:	4619      	mov	r1, r3
   b42e8:	461a      	mov	r2, r3
   b42ea:	f002 ffb3 	bl	b7254 <os_timer_change>
  pumpOnOFF = false;
   b42ee:	4b0a      	ldr	r3, [pc, #40]	; (b4318 <setup+0xe0>)
   b42f0:	2200      	movs	r2, #0
   b42f2:	701a      	strb	r2, [r3, #0]
}
   b42f4:	b002      	add	sp, #8
   b42f6:	bd10      	pop	{r4, pc}
   b42f8:	2003e7c8 	.word	0x2003e7c8
   b42fc:	2003e520 	.word	0x2003e520
   b4300:	2003e410 	.word	0x2003e410
   b4304:	2003e4e4 	.word	0x2003e4e4
   b4308:	2003e588 	.word	0x2003e588
   b430c:	2003e394 	.word	0x2003e394
   b4310:	2003e564 	.word	0x2003e564
   b4314:	2003e3dc 	.word	0x2003e3dc
   b4318:	2003e5c0 	.word	0x2003e5c0

000b431c <_Z8PHsensorv>:



void PHsensor () { // After seemingly working well yesterday, readings are all over the place today. 
   b431c:	b508      	push	{r3, lr}
  //   sensorValue = analogRead(PHpin);
  //   sensorSum += sensorValue;
  // }
  // sensorAverage = sensorSum/SAMPLES;
  //pH = ((0.0147*sensorAverage)-27.6); // Doing a lot of testing to get this equation right, not coming along very well. 
  pH = (random(585,605)/100.0);
   b431e:	f240 215d 	movw	r1, #605	; 0x25d
   b4322:	f240 2049 	movw	r0, #585	; 0x249
   b4326:	f004 fa0e 	bl	b8746 <_Z6randomii>
   b432a:	f005 f933 	bl	b9594 <__aeabi_i2d>
   b432e:	4b04      	ldr	r3, [pc, #16]	; (b4340 <_Z8PHsensorv+0x24>)
   b4330:	2200      	movs	r2, #0
   b4332:	f005 fac3 	bl	b98bc <__aeabi_ddiv>
   b4336:	f005 fc8f 	bl	b9c58 <__aeabi_d2f>
   b433a:	4b02      	ldr	r3, [pc, #8]	; (b4344 <_Z8PHsensorv+0x28>)
   b433c:	6018      	str	r0, [r3, #0]
  //Serial.printf("Water pH = %.3f, pHsensorData = %f\n", pH, sensorAverage);
}
   b433e:	bd08      	pop	{r3, pc}
   b4340:	40590000 	.word	0x40590000
   b4344:	2003e51c 	.word	0x2003e51c

000b4348 <_Z12getMedianNumPii>:
    // Serial.print("TDS-Value:");
    // Serial.print(tdsValue, 0);
    // Serial.println("ppm");
  }
}
int getMedianNum(int bArray[], int iFilterLen) {
   b4348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int bTab[iFilterLen];
   b434a:	008a      	lsls	r2, r1, #2
   b434c:	3207      	adds	r2, #7
   b434e:	f022 0207 	bic.w	r2, r2, #7
int getMedianNum(int bArray[], int iFilterLen) {
   b4352:	af00      	add	r7, sp, #0
  int bTab[iFilterLen];
   b4354:	ebad 0d02 	sub.w	sp, sp, r2
   b4358:	1e4b      	subs	r3, r1, #1
   b435a:	466c      	mov	r4, sp
   b435c:	2200      	movs	r2, #0
  for (byte i = 0; i < iFilterLen; i++)
   b435e:	b2d5      	uxtb	r5, r2
   b4360:	428d      	cmp	r5, r1
   b4362:	f102 0201 	add.w	r2, r2, #1
   b4366:	da04      	bge.n	b4372 <_Z12getMedianNumPii+0x2a>
    bTab[i] = bArray[i];
   b4368:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
   b436c:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
  for (byte i = 0; i < iFilterLen; i++)
   b4370:	e7f5      	b.n	b435e <_Z12getMedianNumPii+0x16>
  int i, j, bTemp;
  for (j = 0; j < iFilterLen - 1; j++) {
   b4372:	2000      	movs	r0, #0
   b4374:	4298      	cmp	r0, r3
   b4376:	da12      	bge.n	b439e <_Z12getMedianNumPii+0x56>
   b4378:	4622      	mov	r2, r4
    for (i = 0; i < iFilterLen - j - 1; i++) {
   b437a:	2500      	movs	r5, #0
   b437c:	eba3 0e00 	sub.w	lr, r3, r0
   b4380:	4575      	cmp	r5, lr
   b4382:	da0a      	bge.n	b439a <_Z12getMedianNumPii+0x52>
      if (bTab[i] > bTab[i + 1]) {
   b4384:	6816      	ldr	r6, [r2, #0]
   b4386:	f8d2 c004 	ldr.w	ip, [r2, #4]
   b438a:	4566      	cmp	r6, ip
   b438c:	f105 0501 	add.w	r5, r5, #1
   b4390:	dd01      	ble.n	b4396 <_Z12getMedianNumPii+0x4e>
        bTemp = bTab[i];
        bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
   b4392:	e9c2 c600 	strd	ip, r6, [r2]
   b4396:	3204      	adds	r2, #4
   b4398:	e7f2      	b.n	b4380 <_Z12getMedianNumPii+0x38>
  for (j = 0; j < iFilterLen - 1; j++) {
   b439a:	3001      	adds	r0, #1
   b439c:	e7ea      	b.n	b4374 <_Z12getMedianNumPii+0x2c>
      }
    }
  }
  if ((iFilterLen & 1) > 0) {
   b439e:	07ca      	lsls	r2, r1, #31
   b43a0:	d506      	bpl.n	b43b0 <_Z12getMedianNumPii+0x68>
    bTemp = bTab[(iFilterLen - 1) / 2];
   b43a2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   b43a6:	105b      	asrs	r3, r3, #1
   b43a8:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  }
  else {
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
  }
  return bTemp;
}
   b43ac:	46bd      	mov	sp, r7
   b43ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
   b43b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b43b4:	1049      	asrs	r1, r1, #1
   b43b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   b43ba:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   b43be:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b43c2:	4418      	add	r0, r3
   b43c4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b43c8:	1040      	asrs	r0, r0, #1
  return bTemp;
   b43ca:	e7ef      	b.n	b43ac <_Z12getMedianNumPii+0x64>
   b43cc:	0000      	movs	r0, r0
	...

000b43d0 <_Z9TDSsensorv>:
void TDSsensor () {   // Readings are in range, but need calibration
   b43d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b43d2:	ed2d 8b02 	vpush	{d8}
  static unsigned long analogSampleTimepoint = millis();
   b43d6:	4d6a      	ldr	r5, [pc, #424]	; (b4580 <_Z9TDSsensorv+0x1b0>)
   b43d8:	4c6a      	ldr	r4, [pc, #424]	; (b4584 <_Z9TDSsensorv+0x1b4>)
   b43da:	782b      	ldrb	r3, [r5, #0]
   b43dc:	f3bf 8f5b 	dmb	ish
   b43e0:	f013 0f01 	tst.w	r3, #1
   b43e4:	d109      	bne.n	b43fa <_Z9TDSsensorv+0x2a>
   b43e6:	4628      	mov	r0, r5
   b43e8:	f7ff fe66 	bl	b40b8 <__cxa_guard_acquire>
   b43ec:	b128      	cbz	r0, b43fa <_Z9TDSsensorv+0x2a>
   b43ee:	f002 fee1 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
   b43f2:	6020      	str	r0, [r4, #0]
   b43f4:	4628      	mov	r0, r5
   b43f6:	f7ff fe64 	bl	b40c2 <__cxa_guard_release>
   b43fa:	f002 fedb 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - analogSampleTimepoint > 40U) {  //every 40 milliseconds,read the analog value from the ADC 
   b43fe:	6823      	ldr	r3, [r4, #0]
   b4400:	1ac0      	subs	r0, r0, r3
   b4402:	2828      	cmp	r0, #40	; 0x28
   b4404:	d912      	bls.n	b442c <_Z9TDSsensorv+0x5c>
   b4406:	f002 fed5 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
    analogSampleTimepoint = millis();
   b440a:	6020      	str	r0, [r4, #0]
    analogBuffer[analogBufferIndex] = analogRead(TDSpin);    //read the analog value and store into the buffer
   b440c:	4c5e      	ldr	r4, [pc, #376]	; (b4588 <_Z9TDSsensorv+0x1b8>)
   b440e:	2013      	movs	r0, #19
   b4410:	6825      	ldr	r5, [r4, #0]
   b4412:	f004 fdd2 	bl	b8fba <analogRead>
   b4416:	4b5d      	ldr	r3, [pc, #372]	; (b458c <_Z9TDSsensorv+0x1bc>)
   b4418:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    analogBufferIndex++;
   b441c:	6823      	ldr	r3, [r4, #0]
    if (analogBufferIndex == SCOUNT) {
   b441e:	2b1d      	cmp	r3, #29
    analogBufferIndex++;
   b4420:	f103 0201 	add.w	r2, r3, #1
      analogBufferIndex = 0;
   b4424:	bf0a      	itet	eq
   b4426:	2300      	moveq	r3, #0
    analogBufferIndex++;
   b4428:	6022      	strne	r2, [r4, #0]
      analogBufferIndex = 0;
   b442a:	6023      	streq	r3, [r4, #0]
  static unsigned long printTimepoint = millis();
   b442c:	4d58      	ldr	r5, [pc, #352]	; (b4590 <_Z9TDSsensorv+0x1c0>)
   b442e:	4c59      	ldr	r4, [pc, #356]	; (b4594 <_Z9TDSsensorv+0x1c4>)
   b4430:	782b      	ldrb	r3, [r5, #0]
   b4432:	f3bf 8f5b 	dmb	ish
   b4436:	f013 0f01 	tst.w	r3, #1
   b443a:	d109      	bne.n	b4450 <_Z9TDSsensorv+0x80>
   b443c:	4628      	mov	r0, r5
   b443e:	f7ff fe3b 	bl	b40b8 <__cxa_guard_acquire>
   b4442:	b128      	cbz	r0, b4450 <_Z9TDSsensorv+0x80>
   b4444:	f002 feb6 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
   b4448:	6020      	str	r0, [r4, #0]
   b444a:	4628      	mov	r0, r5
   b444c:	f7ff fe39 	bl	b40c2 <__cxa_guard_release>
   b4450:	f002 feb0 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - printTimepoint > 800U) {
   b4454:	6823      	ldr	r3, [r4, #0]
   b4456:	1ac0      	subs	r0, r0, r3
   b4458:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   b445c:	d97a      	bls.n	b4554 <_Z9TDSsensorv+0x184>
   b445e:	f002 fea9 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
    for (copyIndex = 0; copyIndex < SCOUNT; copyIndex++)
   b4462:	494d      	ldr	r1, [pc, #308]	; (b4598 <_Z9TDSsensorv+0x1c8>)
    printTimepoint = millis();
   b4464:	6020      	str	r0, [r4, #0]
    for (copyIndex = 0; copyIndex < SCOUNT; copyIndex++)
   b4466:	2300      	movs	r3, #0
   b4468:	4c48      	ldr	r4, [pc, #288]	; (b458c <_Z9TDSsensorv+0x1bc>)
   b446a:	484c      	ldr	r0, [pc, #304]	; (b459c <_Z9TDSsensorv+0x1cc>)
   b446c:	600b      	str	r3, [r1, #0]
   b446e:	221f      	movs	r2, #31
   b4470:	3a01      	subs	r2, #1
   b4472:	d005      	beq.n	b4480 <_Z9TDSsensorv+0xb0>
      analogBufferTemp[copyIndex] = analogBuffer[copyIndex];
   b4474:	f854 3b04 	ldr.w	r3, [r4], #4
   b4478:	f840 3b04 	str.w	r3, [r0], #4
    for (copyIndex = 0; copyIndex < SCOUNT; copyIndex++)
   b447c:	2301      	movs	r3, #1
   b447e:	e7f7      	b.n	b4470 <_Z9TDSsensorv+0xa0>
   b4480:	b10b      	cbz	r3, b4486 <_Z9TDSsensorv+0xb6>
   b4482:	231e      	movs	r3, #30
   b4484:	600b      	str	r3, [r1, #0]
    averageVoltage = getMedianNum(analogBufferTemp, SCOUNT) * (float)VREF / 4095.0; // read the analog value more stable by the median filtering algorithm, and convert to voltage value
   b4486:	211e      	movs	r1, #30
   b4488:	4844      	ldr	r0, [pc, #272]	; (b459c <_Z9TDSsensorv+0x1cc>)
   b448a:	f7ff ff5d 	bl	b4348 <_Z12getMedianNumPii>
   b448e:	ee07 0a90 	vmov	s15, r0
   b4492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4496:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   b449a:	ee67 7a87 	vmul.f32	s15, s15, s14
   b449e:	ed9f 7a40 	vldr	s14, [pc, #256]	; b45a0 <_Z9TDSsensorv+0x1d0>
   b44a2:	4b40      	ldr	r3, [pc, #256]	; (b45a4 <_Z9TDSsensorv+0x1d4>)
   b44a4:	ee87 8a87 	vdiv.f32	s16, s15, s14
   b44a8:	ed83 8a00 	vstr	s16, [r3]
    float compensationCoefficient = 1.0 + 0.02 * (temperature - 25.0); //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
   b44ac:	4b3e      	ldr	r3, [pc, #248]	; (b45a8 <_Z9TDSsensorv+0x1d8>)
   b44ae:	6818      	ldr	r0, [r3, #0]
   b44b0:	f005 f882 	bl	b95b8 <__aeabi_f2d>
   b44b4:	4b3d      	ldr	r3, [pc, #244]	; (b45ac <_Z9TDSsensorv+0x1dc>)
   b44b6:	2200      	movs	r2, #0
   b44b8:	f004 ff1e 	bl	b92f8 <__aeabi_dsub>
   b44bc:	a328      	add	r3, pc, #160	; (adr r3, b4560 <_Z9TDSsensorv+0x190>)
   b44be:	e9d3 2300 	ldrd	r2, r3, [r3]
   b44c2:	f005 f8d1 	bl	b9668 <__aeabi_dmul>
   b44c6:	4b3a      	ldr	r3, [pc, #232]	; (b45b0 <_Z9TDSsensorv+0x1e0>)
   b44c8:	2200      	movs	r2, #0
   b44ca:	f004 ff17 	bl	b92fc <__adddf3>
   b44ce:	f005 fbc3 	bl	b9c58 <__aeabi_d2f>
    tdsValue = (133.42 * compensationVolatge * compensationVolatge * compensationVolatge - 255.86 * compensationVolatge * compensationVolatge + 857.39 * compensationVolatge) * 0.5; //convert voltage value to tds value
   b44d2:	ee07 0a90 	vmov	s15, r0
   b44d6:	eec8 7a27 	vdiv.f32	s15, s16, s15
   b44da:	ee17 0a90 	vmov	r0, s15
   b44de:	f005 f86b 	bl	b95b8 <__aeabi_f2d>
   b44e2:	a321      	add	r3, pc, #132	; (adr r3, b4568 <_Z9TDSsensorv+0x198>)
   b44e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b44e8:	4604      	mov	r4, r0
   b44ea:	460d      	mov	r5, r1
   b44ec:	f005 f8bc 	bl	b9668 <__aeabi_dmul>
   b44f0:	4622      	mov	r2, r4
   b44f2:	462b      	mov	r3, r5
   b44f4:	f005 f8b8 	bl	b9668 <__aeabi_dmul>
   b44f8:	4622      	mov	r2, r4
   b44fa:	462b      	mov	r3, r5
   b44fc:	f005 f8b4 	bl	b9668 <__aeabi_dmul>
   b4500:	a31b      	add	r3, pc, #108	; (adr r3, b4570 <_Z9TDSsensorv+0x1a0>)
   b4502:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4506:	4606      	mov	r6, r0
   b4508:	460f      	mov	r7, r1
   b450a:	4620      	mov	r0, r4
   b450c:	4629      	mov	r1, r5
   b450e:	f005 f8ab 	bl	b9668 <__aeabi_dmul>
   b4512:	4622      	mov	r2, r4
   b4514:	462b      	mov	r3, r5
   b4516:	f005 f8a7 	bl	b9668 <__aeabi_dmul>
   b451a:	4602      	mov	r2, r0
   b451c:	460b      	mov	r3, r1
   b451e:	4630      	mov	r0, r6
   b4520:	4639      	mov	r1, r7
   b4522:	f004 fee9 	bl	b92f8 <__aeabi_dsub>
   b4526:	a314      	add	r3, pc, #80	; (adr r3, b4578 <_Z9TDSsensorv+0x1a8>)
   b4528:	e9d3 2300 	ldrd	r2, r3, [r3]
   b452c:	4606      	mov	r6, r0
   b452e:	460f      	mov	r7, r1
   b4530:	4620      	mov	r0, r4
   b4532:	4629      	mov	r1, r5
   b4534:	f005 f898 	bl	b9668 <__aeabi_dmul>
   b4538:	4602      	mov	r2, r0
   b453a:	460b      	mov	r3, r1
   b453c:	4630      	mov	r0, r6
   b453e:	4639      	mov	r1, r7
   b4540:	f004 fedc 	bl	b92fc <__adddf3>
   b4544:	4b1b      	ldr	r3, [pc, #108]	; (b45b4 <_Z9TDSsensorv+0x1e4>)
   b4546:	2200      	movs	r2, #0
   b4548:	f005 f88e 	bl	b9668 <__aeabi_dmul>
   b454c:	f005 fb84 	bl	b9c58 <__aeabi_d2f>
   b4550:	4b19      	ldr	r3, [pc, #100]	; (b45b8 <_Z9TDSsensorv+0x1e8>)
   b4552:	6018      	str	r0, [r3, #0]
}
   b4554:	ecbd 8b02 	vpop	{d8}
   b4558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b455a:	bf00      	nop
   b455c:	f3af 8000 	nop.w
   b4560:	47ae147b 	.word	0x47ae147b
   b4564:	3f947ae1 	.word	0x3f947ae1
   b4568:	a3d70a3d 	.word	0xa3d70a3d
   b456c:	4060ad70 	.word	0x4060ad70
   b4570:	1eb851ec 	.word	0x1eb851ec
   b4574:	406ffb85 	.word	0x406ffb85
   b4578:	b851eb85 	.word	0xb851eb85
   b457c:	408acb1e 	.word	0x408acb1e
   b4580:	2003e26c 	.word	0x2003e26c
   b4584:	2003e274 	.word	0x2003e274
   b4588:	2003e314 	.word	0x2003e314
   b458c:	2003e29c 	.word	0x2003e29c
   b4590:	2003e268 	.word	0x2003e268
   b4594:	2003e270 	.word	0x2003e270
   b4598:	2003e3d8 	.word	0x2003e3d8
   b459c:	2003e318 	.word	0x2003e318
   b45a0:	457ff000 	.word	0x457ff000
   b45a4:	2003e390 	.word	0x2003e390
   b45a8:	2003dc18 	.word	0x2003dc18
   b45ac:	40390000 	.word	0x40390000
   b45b0:	3ff00000 	.word	0x3ff00000
   b45b4:	3fe00000 	.word	0x3fe00000
   b45b8:	2003e5cc 	.word	0x2003e5cc

000b45bc <_Z7wetTempv>:

void wetTemp () {
   b45bc:	b508      	push	{r3, lr}
  if (tempSensor.read()) {
   b45be:	4805      	ldr	r0, [pc, #20]	; (b45d4 <_Z7wetTempv+0x18>)
   b45c0:	f000 ffde 	bl	b5580 <_ZN4DS184readEv>
   b45c4:	b128      	cbz	r0, b45d2 <_Z7wetTempv+0x16>
    waterTemp = tempSensor.fahrenheit();
   b45c6:	4803      	ldr	r0, [pc, #12]	; (b45d4 <_Z7wetTempv+0x18>)
   b45c8:	f000 fffe 	bl	b55c8 <_ZN4DS1810fahrenheitEv>
   b45cc:	4b02      	ldr	r3, [pc, #8]	; (b45d8 <_Z7wetTempv+0x1c>)
   b45ce:	ed83 0a00 	vstr	s0, [r3]
    //Serial.printf(" Water Temperature = %.2f F\n", tempSensor.fahrenheit());
  }
}
   b45d2:	bd08      	pop	{r3, pc}
   b45d4:	2003e5d8 	.word	0x2003e5d8
   b45d8:	2003e61c 	.word	0x2003e61c
   b45dc:	00000000 	.word	0x00000000

000b45e0 <_Z8bmeCheckv>:

void bmeCheck (void) {
   b45e0:	b510      	push	{r4, lr}
  tempC = bme.readTemperature();
   b45e2:	4c25      	ldr	r4, [pc, #148]	; (b4678 <_Z8bmeCheckv+0x98>)
   b45e4:	4620      	mov	r0, r4
   b45e6:	f001 fadf 	bl	b5ba8 <_ZN15Adafruit_BME28015readTemperatureEv>
   b45ea:	4b24      	ldr	r3, [pc, #144]	; (b467c <_Z8bmeCheckv+0x9c>)
   b45ec:	ee10 0a10 	vmov	r0, s0
   b45f0:	ed83 0a00 	vstr	s0, [r3]
  tempF = map(tempC,0.0,100.0,32.0,212.0);
   b45f4:	f004 ffe0 	bl	b95b8 <__aeabi_f2d>
   b45f8:	ed9f 4b15 	vldr	d4, [pc, #84]	; b4650 <_Z8bmeCheckv+0x70>
   b45fc:	ed9f 3b16 	vldr	d3, [pc, #88]	; b4658 <_Z8bmeCheckv+0x78>
   b4600:	ed9f 2b17 	vldr	d2, [pc, #92]	; b4660 <_Z8bmeCheckv+0x80>
   b4604:	ed9f 1b18 	vldr	d1, [pc, #96]	; b4668 <_Z8bmeCheckv+0x88>
   b4608:	ec41 0b10 	vmov	d0, r0, r1
   b460c:	f003 fd84 	bl	b8118 <_Z3mapddddd>
   b4610:	ec51 0b10 	vmov	r0, r1, d0
   b4614:	f005 fb20 	bl	b9c58 <__aeabi_d2f>
   b4618:	4b19      	ldr	r3, [pc, #100]	; (b4680 <_Z8bmeCheckv+0xa0>)
   b461a:	6018      	str	r0, [r3, #0]
  pressPA = bme.readPressure();
   b461c:	4620      	mov	r0, r4
   b461e:	f001 fb3d 	bl	b5c9c <_ZN15Adafruit_BME28012readPressureEv>
   b4622:	4b18      	ldr	r3, [pc, #96]	; (b4684 <_Z8bmeCheckv+0xa4>)
   b4624:	ee10 0a10 	vmov	r0, s0
   b4628:	ed83 0a00 	vstr	s0, [r3]
  pressInHg = (pressPA*0.00029530);
   b462c:	f004 ffc4 	bl	b95b8 <__aeabi_f2d>
   b4630:	a30f      	add	r3, pc, #60	; (adr r3, b4670 <_Z8bmeCheckv+0x90>)
   b4632:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4636:	f005 f817 	bl	b9668 <__aeabi_dmul>
   b463a:	f005 fb0d 	bl	b9c58 <__aeabi_d2f>
   b463e:	4b12      	ldr	r3, [pc, #72]	; (b4688 <_Z8bmeCheckv+0xa8>)
   b4640:	6018      	str	r0, [r3, #0]
  relHumid = bme.readHumidity();
   b4642:	4620      	mov	r0, r4
   b4644:	f001 fae0 	bl	b5c08 <_ZN15Adafruit_BME28012readHumidityEv>
   b4648:	4b10      	ldr	r3, [pc, #64]	; (b468c <_Z8bmeCheckv+0xac>)
   b464a:	ed83 0a00 	vstr	s0, [r3]
  // Serial.printf("Air Temp = %.2f, Relative Humidity = %.2f, Air Pressure = %.2f InHG\n", tempF, relHumid, pressInHg);
}
   b464e:	bd10      	pop	{r4, pc}
   b4650:	00000000 	.word	0x00000000
   b4654:	406a8000 	.word	0x406a8000
   b4658:	00000000 	.word	0x00000000
   b465c:	40400000 	.word	0x40400000
   b4660:	00000000 	.word	0x00000000
   b4664:	40590000 	.word	0x40590000
	...
   b4670:	d7aea81f 	.word	0xd7aea81f
   b4674:	3f335a4f 	.word	0x3f335a4f
   b4678:	2003e394 	.word	0x2003e394
   b467c:	2003e5d0 	.word	0x2003e5d0
   b4680:	2003e5d4 	.word	0x2003e5d4
   b4684:	2003e584 	.word	0x2003e584
   b4688:	2003e580 	.word	0x2003e580
   b468c:	2003e5c8 	.word	0x2003e5c8

000b4690 <_Z8ORPcheckv>:

void ORPcheck () {
   b4690:	b508      	push	{r3, lr}
  ORP = random(266,288);
   b4692:	f44f 7190 	mov.w	r1, #288	; 0x120
   b4696:	f44f 7085 	mov.w	r0, #266	; 0x10a
   b469a:	f004 f854 	bl	b8746 <_Z6randomii>
   b469e:	4b01      	ldr	r3, [pc, #4]	; (b46a4 <_Z8ORPcheckv+0x14>)
   b46a0:	6018      	str	r0, [r3, #0]
}
   b46a2:	bd08      	pop	{r3, pc}
   b46a4:	2003e220 	.word	0x2003e220

000b46a8 <_Z7ECcheckv>:

void ECcheck () {
   b46a8:	b508      	push	{r3, lr}
  EC = ((random(1224,1248))/1000.0);
   b46aa:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
   b46ae:	f44f 6099 	mov.w	r0, #1224	; 0x4c8
   b46b2:	f004 f848 	bl	b8746 <_Z6randomii>
   b46b6:	f004 ff6d 	bl	b9594 <__aeabi_i2d>
   b46ba:	4b04      	ldr	r3, [pc, #16]	; (b46cc <_Z7ECcheckv+0x24>)
   b46bc:	2200      	movs	r2, #0
   b46be:	f005 f8fd 	bl	b98bc <__aeabi_ddiv>
   b46c2:	f005 fac9 	bl	b9c58 <__aeabi_d2f>
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <_Z7ECcheckv+0x28>)
   b46c8:	6018      	str	r0, [r3, #0]
}
   b46ca:	bd08      	pop	{r3, pc}
   b46cc:	408f4000 	.word	0x408f4000
   b46d0:	2003e21c 	.word	0x2003e21c

000b46d4 <_Z8oledShowv>:

void oledShow (void) {
   b46d4:	b510      	push	{r4, lr}
  char percent = 0x25;
  display.clearDisplay();
   b46d6:	4c30      	ldr	r4, [pc, #192]	; (b4798 <_Z8oledShowv+0xc4>)
void oledShow (void) {
   b46d8:	b088      	sub	sp, #32
  display.clearDisplay();
   b46da:	4620      	mov	r0, r4
   b46dc:	f002 f99c 	bl	b6a18 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b46e0:	4620      	mov	r0, r4
   b46e2:	2101      	movs	r1, #1
   b46e4:	f002 fce5 	bl	b70b2 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   b46e8:	4620      	mov	r0, r4
   b46ea:	2101      	movs	r1, #1
   b46ec:	f002 fce6 	bl	b70bc <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   b46f0:	2200      	movs	r2, #0
   b46f2:	4611      	mov	r1, r2
   b46f4:	4620      	mov	r0, r4
   b46f6:	f002 fcd9 	bl	b70ac <_ZN12Adafruit_GFX9setCursorEss>
  display.print("WaterTDS  = ");
   b46fa:	4928      	ldr	r1, [pc, #160]	; (b479c <_Z8oledShowv+0xc8>)
   b46fc:	4620      	mov	r0, r4
   b46fe:	f003 fb17 	bl	b7d30 <_ZN5Print5printEPKc>
  display.print(tdsValue, 0);
   b4702:	4b27      	ldr	r3, [pc, #156]	; (b47a0 <_Z8oledShowv+0xcc>)
   b4704:	2100      	movs	r1, #0
   b4706:	ed93 0a00 	vldr	s0, [r3]
   b470a:	4620      	mov	r0, r4
   b470c:	f003 fc14 	bl	b7f38 <_ZN5Print5printEfi>
  display.print(" ppm\n");
   b4710:	4924      	ldr	r1, [pc, #144]	; (b47a4 <_Z8oledShowv+0xd0>)
   b4712:	4620      	mov	r0, r4
   b4714:	f003 fb0c 	bl	b7d30 <_ZN5Print5printEPKc>
  display.printf("Water pH  = %.3f\nWater EC  = %.2f\nWaterORP  = %imV\nWaterTemp = %.2fF\n", pH, EC, ORP, waterTemp);
   b4718:	4b23      	ldr	r3, [pc, #140]	; (b47a8 <_Z8oledShowv+0xd4>)
   b471a:	6818      	ldr	r0, [r3, #0]
   b471c:	f004 ff4c 	bl	b95b8 <__aeabi_f2d>
   b4720:	460b      	mov	r3, r1
   b4722:	4922      	ldr	r1, [pc, #136]	; (b47ac <_Z8oledShowv+0xd8>)
   b4724:	4602      	mov	r2, r0
   b4726:	6808      	ldr	r0, [r1, #0]
   b4728:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b472c:	f004 ff44 	bl	b95b8 <__aeabi_f2d>
   b4730:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4734:	491e      	ldr	r1, [pc, #120]	; (b47b0 <_Z8oledShowv+0xdc>)
   b4736:	6809      	ldr	r1, [r1, #0]
   b4738:	9102      	str	r1, [sp, #8]
   b473a:	491e      	ldr	r1, [pc, #120]	; (b47b4 <_Z8oledShowv+0xe0>)
   b473c:	6808      	ldr	r0, [r1, #0]
   b473e:	f004 ff3b 	bl	b95b8 <__aeabi_f2d>
   b4742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b4746:	e9cd 0100 	strd	r0, r1, [sp]
   b474a:	491b      	ldr	r1, [pc, #108]	; (b47b8 <_Z8oledShowv+0xe4>)
   b474c:	4620      	mov	r0, r4
   b474e:	f7ff fd1d 	bl	b418c <_ZN5Print6printfEPKcz>
  display.printf("Air Temp  = %.2fF\nHumidity  = %.2f%c\nAirPressure = %.2f\n", tempF, relHumid, percent, pressInHg);
   b4752:	4b1a      	ldr	r3, [pc, #104]	; (b47bc <_Z8oledShowv+0xe8>)
   b4754:	6818      	ldr	r0, [r3, #0]
   b4756:	f004 ff2f 	bl	b95b8 <__aeabi_f2d>
   b475a:	460b      	mov	r3, r1
   b475c:	4918      	ldr	r1, [pc, #96]	; (b47c0 <_Z8oledShowv+0xec>)
   b475e:	4602      	mov	r2, r0
   b4760:	6808      	ldr	r0, [r1, #0]
   b4762:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b4766:	f004 ff27 	bl	b95b8 <__aeabi_f2d>
   b476a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b476e:	2125      	movs	r1, #37	; 0x25
   b4770:	9102      	str	r1, [sp, #8]
   b4772:	4914      	ldr	r1, [pc, #80]	; (b47c4 <_Z8oledShowv+0xf0>)
   b4774:	6808      	ldr	r0, [r1, #0]
   b4776:	f004 ff1f 	bl	b95b8 <__aeabi_f2d>
   b477a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b477e:	e9cd 0100 	strd	r0, r1, [sp]
   b4782:	4911      	ldr	r1, [pc, #68]	; (b47c8 <_Z8oledShowv+0xf4>)
   b4784:	4620      	mov	r0, r4
   b4786:	f7ff fd01 	bl	b418c <_ZN5Print6printfEPKcz>
  display.display();
   b478a:	4620      	mov	r0, r4
}
   b478c:	b008      	add	sp, #32
   b478e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
   b4792:	f002 b99d 	b.w	b6ad0 <_ZN16Adafruit_SSD13067displayEv>
   b4796:	bf00      	nop
   b4798:	2003e3dc 	.word	0x2003e3dc
   b479c:	000bc328 	.word	0x000bc328
   b47a0:	2003e5cc 	.word	0x2003e5cc
   b47a4:	000bc335 	.word	0x000bc335
   b47a8:	2003e51c 	.word	0x2003e51c
   b47ac:	2003e61c 	.word	0x2003e61c
   b47b0:	2003e220 	.word	0x2003e220
   b47b4:	2003e21c 	.word	0x2003e21c
   b47b8:	000bc33b 	.word	0x000bc33b
   b47bc:	2003e5d4 	.word	0x2003e5d4
   b47c0:	2003e580 	.word	0x2003e580
   b47c4:	2003e5c8 	.word	0x2003e5c8
   b47c8:	000bc381 	.word	0x000bc381

000b47cc <_Z10mqttUpdatev>:

void mqttUpdate (void) {
   b47cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(mqtt.Update()) {
   b47d0:	484c      	ldr	r0, [pc, #304]	; (b4904 <_Z10mqttUpdatev+0x138>)
   b47d2:	f8df 917c 	ldr.w	r9, [pc, #380]	; b4950 <_Z10mqttUpdatev+0x184>
   b47d6:	4c4c      	ldr	r4, [pc, #304]	; (b4908 <_Z10mqttUpdatev+0x13c>)
   b47d8:	f8df 8178 	ldr.w	r8, [pc, #376]	; b4954 <_Z10mqttUpdatev+0x188>
   b47dc:	4f4b      	ldr	r7, [pc, #300]	; (b490c <_Z10mqttUpdatev+0x140>)
   b47de:	4e4c      	ldr	r6, [pc, #304]	; (b4910 <_Z10mqttUpdatev+0x144>)
   b47e0:	4d4c      	ldr	r5, [pc, #304]	; (b4914 <_Z10mqttUpdatev+0x148>)
void mqttUpdate (void) {
   b47e2:	b087      	sub	sp, #28
  if(mqtt.Update()) {
   b47e4:	f001 fc14 	bl	b6010 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   b47e8:	2800      	cmp	r0, #0
   b47ea:	d046      	beq.n	b487a <_Z10mqttUpdatev+0xae>
      pHfeed.publish(pH);
   b47ec:	f8d9 0000 	ldr.w	r0, [r9]
   b47f0:	f004 fee2 	bl	b95b8 <__aeabi_f2d>
   b47f4:	ec41 0b10 	vmov	d0, r0, r1
   b47f8:	2102      	movs	r1, #2
   b47fa:	4847      	ldr	r0, [pc, #284]	; (b4918 <_Z10mqttUpdatev+0x14c>)
   b47fc:	f001 ff14 	bl	b6628 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      TDSfeed.publish(tdsValue);
   b4800:	6820      	ldr	r0, [r4, #0]
   b4802:	f004 fed9 	bl	b95b8 <__aeabi_f2d>
   b4806:	ec41 0b10 	vmov	d0, r0, r1
   b480a:	2102      	movs	r1, #2
   b480c:	4843      	ldr	r0, [pc, #268]	; (b491c <_Z10mqttUpdatev+0x150>)
   b480e:	f001 ff0b 	bl	b6628 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      wetTempFeed.publish(waterTemp);
   b4812:	f8d8 0000 	ldr.w	r0, [r8]
   b4816:	f004 fecf 	bl	b95b8 <__aeabi_f2d>
   b481a:	ec41 0b10 	vmov	d0, r0, r1
   b481e:	2102      	movs	r1, #2
   b4820:	483f      	ldr	r0, [pc, #252]	; (b4920 <_Z10mqttUpdatev+0x154>)
   b4822:	f001 ff01 	bl	b6628 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      waterECfeed.publish(EC);
   b4826:	4b3f      	ldr	r3, [pc, #252]	; (b4924 <_Z10mqttUpdatev+0x158>)
   b4828:	6818      	ldr	r0, [r3, #0]
   b482a:	f004 fec5 	bl	b95b8 <__aeabi_f2d>
   b482e:	ec41 0b10 	vmov	d0, r0, r1
   b4832:	2102      	movs	r1, #2
   b4834:	483c      	ldr	r0, [pc, #240]	; (b4928 <_Z10mqttUpdatev+0x15c>)
   b4836:	f001 fef7 	bl	b6628 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      waterORPfeed.publish(ORP);
   b483a:	4b3c      	ldr	r3, [pc, #240]	; (b492c <_Z10mqttUpdatev+0x160>)
   b483c:	483c      	ldr	r0, [pc, #240]	; (b4930 <_Z10mqttUpdatev+0x164>)
   b483e:	6819      	ldr	r1, [r3, #0]
   b4840:	f001 fee3 	bl	b660a <_ZN21Adafruit_MQTT_Publish7publishEi>
      airTempFeed.publish(tempF);
   b4844:	6838      	ldr	r0, [r7, #0]
   b4846:	f004 feb7 	bl	b95b8 <__aeabi_f2d>
   b484a:	ec41 0b10 	vmov	d0, r0, r1
   b484e:	2102      	movs	r1, #2
   b4850:	4838      	ldr	r0, [pc, #224]	; (b4934 <_Z10mqttUpdatev+0x168>)
   b4852:	f001 fee9 	bl	b6628 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      airPressureFeed.publish(pressInHg);
   b4856:	6830      	ldr	r0, [r6, #0]
   b4858:	f004 feae 	bl	b95b8 <__aeabi_f2d>
   b485c:	ec41 0b10 	vmov	d0, r0, r1
   b4860:	2102      	movs	r1, #2
   b4862:	4835      	ldr	r0, [pc, #212]	; (b4938 <_Z10mqttUpdatev+0x16c>)
   b4864:	f001 fee0 	bl	b6628 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      airHumidityFeed.publish(relHumid);
   b4868:	6828      	ldr	r0, [r5, #0]
   b486a:	f004 fea5 	bl	b95b8 <__aeabi_f2d>
   b486e:	ec41 0b10 	vmov	d0, r0, r1
   b4872:	4832      	ldr	r0, [pc, #200]	; (b493c <_Z10mqttUpdatev+0x170>)
   b4874:	2102      	movs	r1, #2
   b4876:	f001 fed7 	bl	b6628 <_ZN21Adafruit_MQTT_Publish7publishEdh>
  }
 
  Serial.print("Water TDS = ");
   b487a:	f003 fe2f 	bl	b84dc <_Z16_fetch_usbserialv>
   b487e:	4930      	ldr	r1, [pc, #192]	; (b4940 <_Z10mqttUpdatev+0x174>)
   b4880:	f003 fa56 	bl	b7d30 <_ZN5Print5printEPKc>
  Serial.print(tdsValue, 0);
   b4884:	f003 fe2a 	bl	b84dc <_Z16_fetch_usbserialv>
   b4888:	ed94 0a00 	vldr	s0, [r4]
   b488c:	2100      	movs	r1, #0
   b488e:	f003 fb53 	bl	b7f38 <_ZN5Print5printEfi>
  Serial.print(" ppm, ");
   b4892:	f003 fe23 	bl	b84dc <_Z16_fetch_usbserialv>
   b4896:	492b      	ldr	r1, [pc, #172]	; (b4944 <_Z10mqttUpdatev+0x178>)
   b4898:	f003 fa4a 	bl	b7d30 <_ZN5Print5printEPKc>
  Serial.printf("Water pH = %.3f, Water Temperature = %.2f F\n", pH, waterTemp);
   b489c:	f003 fe1e 	bl	b84dc <_Z16_fetch_usbserialv>
   b48a0:	4604      	mov	r4, r0
   b48a2:	f8d9 0000 	ldr.w	r0, [r9]
   b48a6:	f004 fe87 	bl	b95b8 <__aeabi_f2d>
   b48aa:	4602      	mov	r2, r0
   b48ac:	460b      	mov	r3, r1
   b48ae:	f8d8 0000 	ldr.w	r0, [r8]
   b48b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b48b6:	f004 fe7f 	bl	b95b8 <__aeabi_f2d>
   b48ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b48be:	e9cd 0100 	strd	r0, r1, [sp]
   b48c2:	4921      	ldr	r1, [pc, #132]	; (b4948 <_Z10mqttUpdatev+0x17c>)
   b48c4:	4620      	mov	r0, r4
   b48c6:	f7ff fc61 	bl	b418c <_ZN5Print6printfEPKcz>
  Serial.printf("Air Temp = %.2f, Relative Humidity = %.2f, Air Pressure = %.2f InHG\n\n", tempF, relHumid, pressInHg);
   b48ca:	f003 fe07 	bl	b84dc <_Z16_fetch_usbserialv>
   b48ce:	4604      	mov	r4, r0
   b48d0:	6838      	ldr	r0, [r7, #0]
   b48d2:	f004 fe71 	bl	b95b8 <__aeabi_f2d>
   b48d6:	4602      	mov	r2, r0
   b48d8:	460b      	mov	r3, r1
   b48da:	6830      	ldr	r0, [r6, #0]
   b48dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b48e0:	f004 fe6a 	bl	b95b8 <__aeabi_f2d>
   b48e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b48e8:	6828      	ldr	r0, [r5, #0]
   b48ea:	f004 fe65 	bl	b95b8 <__aeabi_f2d>
   b48ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b48f2:	e9cd 0100 	strd	r0, r1, [sp]
   b48f6:	4915      	ldr	r1, [pc, #84]	; (b494c <_Z10mqttUpdatev+0x180>)
   b48f8:	4620      	mov	r0, r4
   b48fa:	f7ff fc47 	bl	b418c <_ZN5Print6printfEPKcz>
}
   b48fe:	b007      	add	sp, #28
   b4900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4904:	2003e410 	.word	0x2003e410
   b4908:	2003e5cc 	.word	0x2003e5cc
   b490c:	2003e5d4 	.word	0x2003e5d4
   b4910:	2003e580 	.word	0x2003e580
   b4914:	2003e5c8 	.word	0x2003e5c8
   b4918:	2003e558 	.word	0x2003e558
   b491c:	2003e230 	.word	0x2003e230
   b4920:	2003e620 	.word	0x2003e620
   b4924:	2003e21c 	.word	0x2003e21c
   b4928:	2003e604 	.word	0x2003e604
   b492c:	2003e220 	.word	0x2003e220
   b4930:	2003e610 	.word	0x2003e610
   b4934:	2003e290 	.word	0x2003e290
   b4938:	2003e284 	.word	0x2003e284
   b493c:	2003e278 	.word	0x2003e278
   b4940:	000bc3ba 	.word	0x000bc3ba
   b4944:	000bc3c7 	.word	0x000bc3c7
   b4948:	000bc3ce 	.word	0x000bc3ce
   b494c:	000bc3fb 	.word	0x000bc3fb
   b4950:	2003e51c 	.word	0x2003e51c
   b4954:	2003e61c 	.word	0x2003e61c

000b4958 <_Z15mqttPumpControlv>:
        }
    }
  }
}

void mqttPumpControl (void) {
   b4958:	b538      	push	{r3, r4, r5, lr}
  bool manualPump;
  Adafruit_MQTT_Subscribe *subscription;
    while ((subscription = mqtt.readSubscription(1000))) {
   b495a:	4d07      	ldr	r5, [pc, #28]	; (b4978 <_Z15mqttPumpControlv+0x20>)
      if (subscription == &pumpControl) {
   b495c:	4c07      	ldr	r4, [pc, #28]	; (b497c <_Z15mqttPumpControlv+0x24>)
    while ((subscription = mqtt.readSubscription(1000))) {
   b495e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4962:	4628      	mov	r0, r5
   b4964:	f001 fc4b 	bl	b61fe <_ZN13Adafruit_MQTT16readSubscriptionEs>
   b4968:	b128      	cbz	r0, b4976 <_Z15mqttPumpControlv+0x1e>
      if (subscription == &pumpControl) {
   b496a:	42a0      	cmp	r0, r4
   b496c:	d1f7      	bne.n	b495e <_Z15mqttPumpControlv+0x6>
       manualPump = atof((char *)pumpControl.lastread);
   b496e:	1d60      	adds	r0, r4, #5
   b4970:	f005 fd02 	bl	ba378 <atof>
        if (manualPump != pumpOnOFF) {
   b4974:	e7f3      	b.n	b495e <_Z15mqttPumpControlv+0x6>
          manualPump = pumpOnOFF;
        }
    }
  }
}
   b4976:	bd38      	pop	{r3, r4, r5, pc}
   b4978:	2003e410 	.word	0x2003e410
   b497c:	2003e588 	.word	0x2003e588

000b4980 <_Z6phPumpv>:

void phPump (void) {
   b4980:	b508      	push	{r3, lr}
  digitalWrite(pHRelayPin, HIGH);
   b4982:	2101      	movs	r1, #1
   b4984:	2004      	movs	r0, #4
   b4986:	f004 faec 	bl	b8f62 <digitalWrite>
  delay(750);
   b498a:	f240 20ee 	movw	r0, #750	; 0x2ee
   b498e:	f003 fc06 	bl	b819e <delay>
  digitalWrite(pHRelayPin, LOW);
   b4992:	2100      	movs	r1, #0
   b4994:	2004      	movs	r0, #4
   b4996:	f004 fae4 	bl	b8f62 <digitalWrite>
  Serial.printf("Added pH Down\n");
   b499a:	f003 fd9f 	bl	b84dc <_Z16_fetch_usbserialv>
   b499e:	4902      	ldr	r1, [pc, #8]	; (b49a8 <_Z6phPumpv+0x28>)
   b49a0:	f7ff fbf4 	bl	b418c <_ZN5Print6printfEPKcz>
}
   b49a4:	bd08      	pop	{r3, pc}
   b49a6:	bf00      	nop
   b49a8:	000bc441 	.word	0x000bc441

000b49ac <_Z7amendPhv>:
  if (pH > 6.5) {
   b49ac:	4b06      	ldr	r3, [pc, #24]	; (b49c8 <_Z7amendPhv+0x1c>)
   b49ae:	ed93 7a00 	vldr	s14, [r3]
   b49b2:	eef1 7a0a 	vmov.f32	s15, #26	; 0x40d00000  6.5
   b49b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b49ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b49be:	dd01      	ble.n	b49c4 <_Z7amendPhv+0x18>
    phPump();
   b49c0:	f7ff bfde 	b.w	b4980 <_Z6phPumpv>
}
   b49c4:	4770      	bx	lr
   b49c6:	bf00      	nop
   b49c8:	2003e51c 	.word	0x2003e51c

000b49cc <_Z10mqttPHdownv>:
void mqttPHdown (void) {
   b49cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (subscription == &pHdown) {
   b49ce:	4c0d      	ldr	r4, [pc, #52]	; (b4a04 <_Z10mqttPHdownv+0x38>)
        if (adjustPH) {
   b49d0:	2600      	movs	r6, #0
   b49d2:	2700      	movs	r7, #0
    while ((subscription = mqtt.readSubscription(1000))) {
   b49d4:	4d0c      	ldr	r5, [pc, #48]	; (b4a08 <_Z10mqttPHdownv+0x3c>)
   b49d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b49da:	4628      	mov	r0, r5
   b49dc:	f001 fc0f 	bl	b61fe <_ZN13Adafruit_MQTT16readSubscriptionEs>
   b49e0:	b178      	cbz	r0, b4a02 <_Z10mqttPHdownv+0x36>
      if (subscription == &pHdown) {
   b49e2:	42a0      	cmp	r0, r4
   b49e4:	d1f7      	bne.n	b49d6 <_Z10mqttPHdownv+0xa>
       adjustPH = atof((char *)pHdown.lastread);
   b49e6:	1d60      	adds	r0, r4, #5
   b49e8:	f005 fcc6 	bl	ba378 <atof>
        if (adjustPH) {
   b49ec:	4632      	mov	r2, r6
       adjustPH = atof((char *)pHdown.lastread);
   b49ee:	ec51 0b10 	vmov	r0, r1, d0
        if (adjustPH) {
   b49f2:	463b      	mov	r3, r7
   b49f4:	f005 f8a0 	bl	b9b38 <__aeabi_dcmpeq>
   b49f8:	2800      	cmp	r0, #0
   b49fa:	d1eb      	bne.n	b49d4 <_Z10mqttPHdownv+0x8>
          phPump();
   b49fc:	f7ff ffc0 	bl	b4980 <_Z6phPumpv>
   b4a00:	e7e8      	b.n	b49d4 <_Z10mqttPHdownv+0x8>
}
   b4a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4a04:	2003e520 	.word	0x2003e520
   b4a08:	2003e410 	.word	0x2003e410

000b4a0c <_Z12nutrientPumpv>:

void nutrientPump (void) {
   b4a0c:	b508      	push	{r3, lr}
  digitalWrite(nutrientRelayPin, HIGH);
   b4a0e:	2101      	movs	r1, #1
   b4a10:	2005      	movs	r0, #5
   b4a12:	f004 faa6 	bl	b8f62 <digitalWrite>
  delay(750);
   b4a16:	f240 20ee 	movw	r0, #750	; 0x2ee
   b4a1a:	f003 fbc0 	bl	b819e <delay>
  digitalWrite(nutrientRelayPin, LOW);
   b4a1e:	2100      	movs	r1, #0
   b4a20:	2005      	movs	r0, #5
   b4a22:	f004 fa9e 	bl	b8f62 <digitalWrite>
  Serial.printf("Added Nutrients\n");
   b4a26:	f003 fd59 	bl	b84dc <_Z16_fetch_usbserialv>
   b4a2a:	4902      	ldr	r1, [pc, #8]	; (b4a34 <_Z12nutrientPumpv+0x28>)
   b4a2c:	f7ff fbae 	bl	b418c <_ZN5Print6printfEPKcz>
}
   b4a30:	bd08      	pop	{r3, pc}
   b4a32:	bf00      	nop
   b4a34:	000bc450 	.word	0x000bc450

000b4a38 <_Z14amendNutrientsv>:
  if (tdsValue < 650) {
   b4a38:	4b06      	ldr	r3, [pc, #24]	; (b4a54 <_Z14amendNutrientsv+0x1c>)
   b4a3a:	eddf 7a07 	vldr	s15, [pc, #28]	; b4a58 <_Z14amendNutrientsv+0x20>
   b4a3e:	ed93 7a00 	vldr	s14, [r3]
   b4a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a4a:	d501      	bpl.n	b4a50 <_Z14amendNutrientsv+0x18>
    nutrientPump();
   b4a4c:	f7ff bfde 	b.w	b4a0c <_Z12nutrientPumpv>
} 
   b4a50:	4770      	bx	lr
   b4a52:	bf00      	nop
   b4a54:	2003e5cc 	.word	0x2003e5cc
   b4a58:	44228000 	.word	0x44228000

000b4a5c <_Z15mqttNutrientAddv>:
void mqttNutrientAdd (void) {
   b4a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (subscription == &nutrientAdd) {
   b4a5e:	4c0d      	ldr	r4, [pc, #52]	; (b4a94 <_Z15mqttNutrientAddv+0x38>)
        if (addNutrient) {
   b4a60:	2600      	movs	r6, #0
   b4a62:	2700      	movs	r7, #0
    while ((subscription = mqtt.readSubscription(1000))) {
   b4a64:	4d0c      	ldr	r5, [pc, #48]	; (b4a98 <_Z15mqttNutrientAddv+0x3c>)
   b4a66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4a6a:	4628      	mov	r0, r5
   b4a6c:	f001 fbc7 	bl	b61fe <_ZN13Adafruit_MQTT16readSubscriptionEs>
   b4a70:	b178      	cbz	r0, b4a92 <_Z15mqttNutrientAddv+0x36>
      if (subscription == &nutrientAdd) {
   b4a72:	42a0      	cmp	r0, r4
   b4a74:	d1f7      	bne.n	b4a66 <_Z15mqttNutrientAddv+0xa>
       addNutrient = atof((char *)nutrientAdd.lastread);
   b4a76:	1d60      	adds	r0, r4, #5
   b4a78:	f005 fc7e 	bl	ba378 <atof>
        if (addNutrient) {
   b4a7c:	4632      	mov	r2, r6
       addNutrient = atof((char *)nutrientAdd.lastread);
   b4a7e:	ec51 0b10 	vmov	r0, r1, d0
        if (addNutrient) {
   b4a82:	463b      	mov	r3, r7
   b4a84:	f005 f858 	bl	b9b38 <__aeabi_dcmpeq>
   b4a88:	2800      	cmp	r0, #0
   b4a8a:	d1eb      	bne.n	b4a64 <_Z15mqttNutrientAddv+0x8>
          nutrientPump();
   b4a8c:	f7ff ffbe 	bl	b4a0c <_Z12nutrientPumpv>
   b4a90:	e7e8      	b.n	b4a64 <_Z15mqttNutrientAddv+0x8>
}
   b4a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4a94:	2003e4e4 	.word	0x2003e4e4
   b4a98:	2003e410 	.word	0x2003e410

000b4a9c <_Z12MQTT_connectv>:



// Function to connect and reconnect as necessary to the MQTT server.
void MQTT_connect() {
   b4a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int8_t ret;
  // Stop if already connected.
  if (mqtt.connected()) {
   b4aa0:	4818      	ldr	r0, [pc, #96]	; (b4b04 <_Z12MQTT_connectv+0x68>)
   b4aa2:	f001 fa37 	bl	b5f14 <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   b4aa6:	bb58      	cbnz	r0, b4b00 <_Z12MQTT_connectv+0x64>
    return;
  }
  Serial.print("Connecting to MQTT... ");
   b4aa8:	f003 fd18 	bl	b84dc <_Z16_fetch_usbserialv>
   b4aac:	4916      	ldr	r1, [pc, #88]	; (b4b08 <_Z12MQTT_connectv+0x6c>)
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b4aae:	4e15      	ldr	r6, [pc, #84]	; (b4b04 <_Z12MQTT_connectv+0x68>)
       Serial.printf("%s\n",(char *)mqtt.connectErrorString(ret));
   b4ab0:	f8df 8060 	ldr.w	r8, [pc, #96]	; b4b14 <_Z12MQTT_connectv+0x78>
       Serial.printf("Retrying MQTT connection in 5 seconds..\n");
   b4ab4:	4f15      	ldr	r7, [pc, #84]	; (b4b0c <_Z12MQTT_connectv+0x70>)
  Serial.print("Connecting to MQTT... ");
   b4ab6:	f003 f93b 	bl	b7d30 <_ZN5Print5printEPKc>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b4aba:	4812      	ldr	r0, [pc, #72]	; (b4b04 <_Z12MQTT_connectv+0x68>)
   b4abc:	f001 fd49 	bl	b6552 <_ZN13Adafruit_MQTT7connectEv>
   b4ac0:	4604      	mov	r4, r0
   b4ac2:	b1c0      	cbz	r0, b4af6 <_Z12MQTT_connectv+0x5a>
       Serial.printf("%s\n",(char *)mqtt.connectErrorString(ret));
   b4ac4:	f003 fd0a 	bl	b84dc <_Z16_fetch_usbserialv>
   b4ac8:	4621      	mov	r1, r4
   b4aca:	4605      	mov	r5, r0
   b4acc:	4630      	mov	r0, r6
   b4ace:	f001 fb59 	bl	b6184 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   b4ad2:	4641      	mov	r1, r8
   b4ad4:	4602      	mov	r2, r0
   b4ad6:	4628      	mov	r0, r5
   b4ad8:	f7ff fb58 	bl	b418c <_ZN5Print6printfEPKcz>
       Serial.printf("Retrying MQTT connection in 5 seconds..\n");
   b4adc:	f003 fcfe 	bl	b84dc <_Z16_fetch_usbserialv>
   b4ae0:	4639      	mov	r1, r7
   b4ae2:	f7ff fb53 	bl	b418c <_ZN5Print6printfEPKcz>
       mqtt.disconnect();
   b4ae6:	4630      	mov	r0, r6
   b4ae8:	f001 fb5a 	bl	b61a0 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  // wait 5 seconds
   b4aec:	f241 3088 	movw	r0, #5000	; 0x1388
   b4af0:	f003 fb55 	bl	b819e <delay>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b4af4:	e7e1      	b.n	b4aba <_Z12MQTT_connectv+0x1e>
  }
  Serial.printf("MQTT Connected!\n");
   b4af6:	f003 fcf1 	bl	b84dc <_Z16_fetch_usbserialv>
   b4afa:	4905      	ldr	r1, [pc, #20]	; (b4b10 <_Z12MQTT_connectv+0x74>)
   b4afc:	f7ff fb46 	bl	b418c <_ZN5Print6printfEPKcz>
}
   b4b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4b04:	2003e410 	.word	0x2003e410
   b4b08:	000bc461 	.word	0x000bc461
   b4b0c:	000bc47c 	.word	0x000bc47c
   b4b10:	000bc4a5 	.word	0x000bc4a5
   b4b14:	000bc478 	.word	0x000bc478

000b4b18 <_Z8mqttPingv>:

// Ping MQTT Broker every 2 minutes to keep connection alive
void mqttPing (void) {
   b4b18:	b510      	push	{r4, lr}
   if ((millis()-last)>120000) {
   b4b1a:	4c0f      	ldr	r4, [pc, #60]	; (b4b58 <_Z8mqttPingv+0x40>)
   b4b1c:	f002 fb4a 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
   b4b20:	6823      	ldr	r3, [r4, #0]
   b4b22:	1ac0      	subs	r0, r0, r3
   b4b24:	4b0d      	ldr	r3, [pc, #52]	; (b4b5c <_Z8mqttPingv+0x44>)
   b4b26:	4298      	cmp	r0, r3
   b4b28:	d914      	bls.n	b4b54 <_Z8mqttPingv+0x3c>
      Serial.printf("Pinging MQTT \n");
   b4b2a:	f003 fcd7 	bl	b84dc <_Z16_fetch_usbserialv>
   b4b2e:	490c      	ldr	r1, [pc, #48]	; (b4b60 <_Z8mqttPingv+0x48>)
   b4b30:	f7ff fb2c 	bl	b418c <_ZN5Print6printfEPKcz>
      if(! mqtt.ping()) {
   b4b34:	480b      	ldr	r0, [pc, #44]	; (b4b64 <_Z8mqttPingv+0x4c>)
   b4b36:	2101      	movs	r1, #1
   b4b38:	f001 fbdb 	bl	b62f2 <_ZN13Adafruit_MQTT4pingEh>
   b4b3c:	b938      	cbnz	r0, b4b4e <_Z8mqttPingv+0x36>
        Serial.printf("Disconnecting \n");
   b4b3e:	f003 fccd 	bl	b84dc <_Z16_fetch_usbserialv>
   b4b42:	4909      	ldr	r1, [pc, #36]	; (b4b68 <_Z8mqttPingv+0x50>)
   b4b44:	f7ff fb22 	bl	b418c <_ZN5Print6printfEPKcz>
        mqtt.disconnect();
   b4b48:	4806      	ldr	r0, [pc, #24]	; (b4b64 <_Z8mqttPingv+0x4c>)
   b4b4a:	f001 fb29 	bl	b61a0 <_ZN13Adafruit_MQTT10disconnectEv>
   b4b4e:	f002 fb31 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
      }
      last = millis();
   b4b52:	6020      	str	r0, [r4, #0]
   }
   b4b54:	bd10      	pop	{r4, pc}
   b4b56:	bf00      	nop
   b4b58:	2003e400 	.word	0x2003e400
   b4b5c:	0001d4c0 	.word	0x0001d4c0
   b4b60:	000bc4b6 	.word	0x000bc4b6
   b4b64:	2003e410 	.word	0x2003e410
   b4b68:	000bc4c5 	.word	0x000bc4c5

000b4b6c <loop>:
void loop() {
   b4b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  MQTT_connect();
   b4b6e:	f7ff ff95 	bl	b4a9c <_Z12MQTT_connectv>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b4b72:	f003 fab6 	bl	b80e2 <_ZN9TimeClass3nowEv>
   b4b76:	4602      	mov	r2, r0
   b4b78:	17c3      	asrs	r3, r0, #31
   b4b7a:	4668      	mov	r0, sp
   b4b7c:	f003 fa58 	bl	b8030 <_ZN9TimeClass7timeStrEx>
  DateTime = Time.timeStr();
   b4b80:	4669      	mov	r1, sp
   b4b82:	4837      	ldr	r0, [pc, #220]	; (b4c60 <loop+0xf4>)
  if (pumpOnOFF) {
   b4b84:	4c37      	ldr	r4, [pc, #220]	; (b4c64 <loop+0xf8>)
  DateTime = Time.timeStr();
   b4b86:	f003 f867 	bl	b7c58 <_ZN6StringaSEOS_>
   b4b8a:	4668      	mov	r0, sp
   b4b8c:	f002 ffe8 	bl	b7b60 <_ZN6StringD1Ev>
  TimeOnly = DateTime.substring(11,18);
   b4b90:	2312      	movs	r3, #18
   b4b92:	220b      	movs	r2, #11
   b4b94:	4932      	ldr	r1, [pc, #200]	; (b4c60 <loop+0xf4>)
   b4b96:	4668      	mov	r0, sp
   b4b98:	f003 f866 	bl	b7c68 <_ZNK6String9substringEjj>
   b4b9c:	4669      	mov	r1, sp
   b4b9e:	4832      	ldr	r0, [pc, #200]	; (b4c68 <loop+0xfc>)
   b4ba0:	f003 f85a 	bl	b7c58 <_ZN6StringaSEOS_>
   b4ba4:	4668      	mov	r0, sp
   b4ba6:	f002 ffdb 	bl	b7b60 <_ZN6StringD1Ev>
  wetTemp();
   b4baa:	f7ff fd07 	bl	b45bc <_Z7wetTempv>
  TDSsensor();
   b4bae:	f7ff fc0f 	bl	b43d0 <_Z9TDSsensorv>
  PHsensor();
   b4bb2:	f7ff fbb3 	bl	b431c <_Z8PHsensorv>
  bmeCheck();
   b4bb6:	f7ff fd13 	bl	b45e0 <_Z8bmeCheckv>
  ORPcheck();
   b4bba:	f7ff fd69 	bl	b4690 <_Z8ORPcheckv>
  ECcheck();
   b4bbe:	f7ff fd73 	bl	b46a8 <_Z7ECcheckv>
  if (pumpOnOFF) {
   b4bc2:	7823      	ldrb	r3, [r4, #0]
   b4bc4:	b1b3      	cbz	r3, b4bf4 <loop+0x88>
    digitalWrite(PONDPUMP, HIGH);
   b4bc6:	2101      	movs	r1, #1
   b4bc8:	2008      	movs	r0, #8
   b4bca:	f004 f9ca 	bl	b8f62 <digitalWrite>
   b4bce:	f002 faf1 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
    if ((millis()-pumpStart)>150000) {
   b4bd2:	4b26      	ldr	r3, [pc, #152]	; (b4c6c <loop+0x100>)
   b4bd4:	681b      	ldr	r3, [r3, #0]
   b4bd6:	1ac0      	subs	r0, r0, r3
   b4bd8:	4b25      	ldr	r3, [pc, #148]	; (b4c70 <loop+0x104>)
   b4bda:	4298      	cmp	r0, r3
   b4bdc:	d90a      	bls.n	b4bf4 <loop+0x88>
      digitalWrite(PONDPUMP, LOW);
   b4bde:	2100      	movs	r1, #0
   b4be0:	2008      	movs	r0, #8
   b4be2:	f004 f9be 	bl	b8f62 <digitalWrite>
       Serial.printf("Stop Pump\n");
   b4be6:	f003 fc79 	bl	b84dc <_Z16_fetch_usbserialv>
   b4bea:	4922      	ldr	r1, [pc, #136]	; (b4c74 <loop+0x108>)
   b4bec:	f7ff face 	bl	b418c <_ZN5Print6printfEPKcz>
       pumpOnOFF = false;
   b4bf0:	2300      	movs	r3, #0
   b4bf2:	7023      	strb	r3, [r4, #0]
  if((millis()-lastShow)>10000){
   b4bf4:	4c20      	ldr	r4, [pc, #128]	; (b4c78 <loop+0x10c>)
   b4bf6:	f002 fadd 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
   b4bfa:	6823      	ldr	r3, [r4, #0]
   b4bfc:	1ac0      	subs	r0, r0, r3
   b4bfe:	f242 7310 	movw	r3, #10000	; 0x2710
   b4c02:	4298      	cmp	r0, r3
   b4c04:	d904      	bls.n	b4c10 <loop+0xa4>
    oledShow();
   b4c06:	f7ff fd65 	bl	b46d4 <_Z8oledShowv>
   b4c0a:	f002 fad3 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
    lastShow = millis();
   b4c0e:	6020      	str	r0, [r4, #0]
  if((millis()-lastUpdate)>30000){
   b4c10:	4c1a      	ldr	r4, [pc, #104]	; (b4c7c <loop+0x110>)
   b4c12:	f002 facf 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
   b4c16:	6823      	ldr	r3, [r4, #0]
   b4c18:	1ac0      	subs	r0, r0, r3
   b4c1a:	f247 5330 	movw	r3, #30000	; 0x7530
   b4c1e:	4298      	cmp	r0, r3
   b4c20:	d904      	bls.n	b4c2c <loop+0xc0>
    mqttUpdate();
   b4c22:	f7ff fdd3 	bl	b47cc <_Z10mqttUpdatev>
   b4c26:	f002 fac5 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
    lastUpdate = millis();
   b4c2a:	6020      	str	r0, [r4, #0]
  if((millis()-lastAmend)>1200000){
   b4c2c:	4c14      	ldr	r4, [pc, #80]	; (b4c80 <loop+0x114>)
   b4c2e:	f002 fac1 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
   b4c32:	6823      	ldr	r3, [r4, #0]
   b4c34:	1ac0      	subs	r0, r0, r3
   b4c36:	4b13      	ldr	r3, [pc, #76]	; (b4c84 <loop+0x118>)
   b4c38:	4298      	cmp	r0, r3
   b4c3a:	d906      	bls.n	b4c4a <loop+0xde>
    amendPh();
   b4c3c:	f7ff feb6 	bl	b49ac <_Z7amendPhv>
    amendNutrients();
   b4c40:	f7ff fefa 	bl	b4a38 <_Z14amendNutrientsv>
   b4c44:	f002 fab6 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
    lastAmend = millis();
   b4c48:	6020      	str	r0, [r4, #0]
  mqttPing();
   b4c4a:	f7ff ff65 	bl	b4b18 <_Z8mqttPingv>
  mqttPHdown();
   b4c4e:	f7ff febd 	bl	b49cc <_Z10mqttPHdownv>
  mqttNutrientAdd();
   b4c52:	f7ff ff03 	bl	b4a5c <_Z15mqttNutrientAddv>
}
   b4c56:	b004      	add	sp, #16
   b4c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mqttPumpControl();
   b4c5c:	f7ff be7c 	b.w	b4958 <_Z15mqttPumpControlv>
   b4c60:	2003e20c 	.word	0x2003e20c
   b4c64:	2003e5c0 	.word	0x2003e5c0
   b4c68:	2003e258 	.word	0x2003e258
   b4c6c:	2003e5c4 	.word	0x2003e5c4
   b4c70:	000249f0 	.word	0x000249f0
   b4c74:	000bc4d5 	.word	0x000bc4d5
   b4c78:	2003e408 	.word	0x2003e408
   b4c7c:	2003e40c 	.word	0x2003e40c
   b4c80:	2003e404 	.word	0x2003e404
   b4c84:	00124f80 	.word	0x00124f80

000b4c88 <_ZN16Adafruit_SSD1306D0Ev>:
   b4c88:	b510      	push	{r4, lr}
   b4c8a:	2124      	movs	r1, #36	; 0x24
   b4c8c:	4604      	mov	r4, r0
   b4c8e:	f004 fa10 	bl	b90b2 <_ZdlPvj>
   b4c92:	4620      	mov	r0, r4
   b4c94:	bd10      	pop	{r4, pc}

000b4c96 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   b4c96:	b510      	push	{r4, lr}
   b4c98:	21d4      	movs	r1, #212	; 0xd4
   b4c9a:	4604      	mov	r4, r0
   b4c9c:	f004 fa09 	bl	b90b2 <_ZdlPvj>
   b4ca0:	4620      	mov	r0, r4
   b4ca2:	bd10      	pop	{r4, pc}

000b4ca4 <_GLOBAL__sub_I_DateTime>:
   b4ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
String DateTime, TimeOnly;
   b4ca6:	4f64      	ldr	r7, [pc, #400]	; (b4e38 <_GLOBAL__sub_I_DateTime+0x194>)
   b4ca8:	4c64      	ldr	r4, [pc, #400]	; (b4e3c <_GLOBAL__sub_I_DateTime+0x198>)
   b4caa:	4e65      	ldr	r6, [pc, #404]	; (b4e40 <_GLOBAL__sub_I_DateTime+0x19c>)
   b4cac:	4d65      	ldr	r5, [pc, #404]	; (b4e44 <_GLOBAL__sub_I_DateTime+0x1a0>)
   b4cae:	b089      	sub	sp, #36	; 0x24
String DateTime, TimeOnly;
   b4cb0:	4639      	mov	r1, r7
   b4cb2:	4620      	mov	r0, r4
   b4cb4:	f002 ff9f 	bl	b7bf6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4cb8:	4620      	mov	r0, r4
   b4cba:	4c63      	ldr	r4, [pc, #396]	; (b4e48 <_GLOBAL__sub_I_DateTime+0x1a4>)
   b4cbc:	4632      	mov	r2, r6
   b4cbe:	4629      	mov	r1, r5
   b4cc0:	f004 f9f2 	bl	b90a8 <__aeabi_atexit>
   b4cc4:	4639      	mov	r1, r7
   b4cc6:	4620      	mov	r0, r4
   b4cc8:	f002 ff95 	bl	b7bf6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4ccc:	4632      	mov	r2, r6
   b4cce:	4629      	mov	r1, r5
   b4cd0:	4620      	mov	r0, r4
   b4cd2:	f004 f9e9 	bl	b90a8 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4cd6:	4b5d      	ldr	r3, [pc, #372]	; (b4e4c <_GLOBAL__sub_I_DateTime+0x1a8>)
   b4cd8:	9304      	str	r3, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4cda:	af04      	add	r7, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4cdc:	4d5c      	ldr	r5, [pc, #368]	; (b4e50 <_GLOBAL__sub_I_DateTime+0x1ac>)
   b4cde:	4b5d      	ldr	r3, [pc, #372]	; (b4e54 <_GLOBAL__sub_I_DateTime+0x1b0>)
   b4ce0:	602b      	str	r3, [r5, #0]
   b4ce2:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4ce6:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4ce8:	f105 030c 	add.w	r3, r5, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4cec:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4cf0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4cf4:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4cf8:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4cfc:	e883 0003 	stmia.w	r3, {r0, r1}
   b4d00:	4b55      	ldr	r3, [pc, #340]	; (b4e58 <_GLOBAL__sub_I_DateTime+0x1b4>)
   b4d02:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4d04:	69ab      	ldr	r3, [r5, #24]
   b4d06:	9307      	str	r3, [sp, #28]
   b4d08:	2400      	movs	r4, #0
      __b = _GLIBCXX_MOVE(__tmp);
   b4d0a:	4b54      	ldr	r3, [pc, #336]	; (b4e5c <_GLOBAL__sub_I_DateTime+0x1b8>)
   b4d0c:	712c      	strb	r4, [r5, #4]
   b4d0e:	60ac      	str	r4, [r5, #8]
   b4d10:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4d12:	4a53      	ldr	r2, [pc, #332]	; (b4e60 <_GLOBAL__sub_I_DateTime+0x1bc>)
   b4d14:	4953      	ldr	r1, [pc, #332]	; (b4e64 <_GLOBAL__sub_I_DateTime+0x1c0>)
      __a = _GLIBCXX_MOVE(__b);
   b4d16:	9406      	str	r4, [sp, #24]
   b4d18:	462b      	mov	r3, r5
   b4d1a:	e9cd 4400 	strd	r4, r4, [sp]
   b4d1e:	f105 0008 	add.w	r0, r5, #8
   b4d22:	f002 fa7f 	bl	b7224 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b4d26:	4638      	mov	r0, r7
   b4d28:	f7ff fa3e 	bl	b41a8 <_ZNSt14_Function_baseD1Ev>
Timer pondPumpON(1200000, pumpSwitch);
   b4d2c:	4628      	mov	r0, r5
Adafruit_SSD1306 display(OLED_RESET);
   b4d2e:	4d4e      	ldr	r5, [pc, #312]	; (b4e68 <_GLOBAL__sub_I_DateTime+0x1c4>)
Timer pondPumpON(1200000, pumpSwitch);
   b4d30:	494e      	ldr	r1, [pc, #312]	; (b4e6c <_GLOBAL__sub_I_DateTime+0x1c8>)
TCPClient TheClient; 
   b4d32:	4f4f      	ldr	r7, [pc, #316]	; (b4e70 <_GLOBAL__sub_I_DateTime+0x1cc>)
Timer pondPumpON(1200000, pumpSwitch);
   b4d34:	4632      	mov	r2, r6
   b4d36:	f004 f9b7 	bl	b90a8 <__aeabi_atexit>
Adafruit_SSD1306 display(OLED_RESET);
   b4d3a:	2103      	movs	r1, #3
   b4d3c:	4628      	mov	r0, r5
   b4d3e:	f001 fe55 	bl	b69ec <_ZN16Adafruit_SSD1306C1Ea>
   b4d42:	4632      	mov	r2, r6
   b4d44:	494b      	ldr	r1, [pc, #300]	; (b4e74 <_GLOBAL__sub_I_DateTime+0x1d0>)
   b4d46:	4628      	mov	r0, r5
   b4d48:	f004 f9ae 	bl	b90a8 <__aeabi_atexit>
Adafruit_BME280 bme;
   b4d4c:	484a      	ldr	r0, [pc, #296]	; (b4e78 <_GLOBAL__sub_I_DateTime+0x1d4>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   b4d4e:	4d4b      	ldr	r5, [pc, #300]	; (b4e7c <_GLOBAL__sub_I_DateTime+0x1d8>)
   b4d50:	f000 fc86 	bl	b5660 <_ZN15Adafruit_BME280C1Ev>
DS18 tempSensor(TempPin);
   b4d54:	4622      	mov	r2, r4
   b4d56:	2112      	movs	r1, #18
   b4d58:	4849      	ldr	r0, [pc, #292]	; (b4e80 <_GLOBAL__sub_I_DateTime+0x1dc>)
   b4d5a:	f000 fb26 	bl	b53aa <_ZN4DS18C1Etb>
TCPClient TheClient; 
   b4d5e:	4638      	mov	r0, r7
   b4d60:	f003 ffb2 	bl	b8cc8 <_ZN9TCPClientC1Ev>
   b4d64:	4632      	mov	r2, r6
   b4d66:	4947      	ldr	r1, [pc, #284]	; (b4e84 <_GLOBAL__sub_I_DateTime+0x1e0>)
   b4d68:	4638      	mov	r0, r7
   b4d6a:	f004 f99d 	bl	b90a8 <__aeabi_atexit>
   b4d6e:	4b46      	ldr	r3, [pc, #280]	; (b4e88 <_GLOBAL__sub_I_DateTime+0x1e4>)
   b4d70:	9300      	str	r3, [sp, #0]
   b4d72:	4946      	ldr	r1, [pc, #280]	; (b4e8c <_GLOBAL__sub_I_DateTime+0x1e8>)
   b4d74:	4b46      	ldr	r3, [pc, #280]	; (b4e90 <_GLOBAL__sub_I_DateTime+0x1ec>)
   b4d76:	f240 725b 	movw	r2, #1883	; 0x75b
   b4d7a:	4628      	mov	r0, r5
   b4d7c:	f001 f97e 	bl	b607c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   b4d80:	4b44      	ldr	r3, [pc, #272]	; (b4e94 <_GLOBAL__sub_I_DateTime+0x1f0>)
   b4d82:	602b      	str	r3, [r5, #0]
   b4d84:	f8c5 70d0 	str.w	r7, [r5, #208]	; 0xd0
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   b4d88:	4632      	mov	r2, r6
   b4d8a:	4943      	ldr	r1, [pc, #268]	; (b4e98 <_GLOBAL__sub_I_DateTime+0x1f4>)
   b4d8c:	4628      	mov	r0, r5
   b4d8e:	f004 f98b 	bl	b90a8 <__aeabi_atexit>
Adafruit_MQTT_Publish TDSfeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/hydroponic-data.tdsfeed");
   b4d92:	4623      	mov	r3, r4
   b4d94:	4629      	mov	r1, r5
   b4d96:	4a41      	ldr	r2, [pc, #260]	; (b4e9c <_GLOBAL__sub_I_DateTime+0x1f8>)
   b4d98:	4841      	ldr	r0, [pc, #260]	; (b4ea0 <_GLOBAL__sub_I_DateTime+0x1fc>)
   b4d9a:	f001 fc31 	bl	b6600 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish pHfeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/hydroponic-data.phfeed");
   b4d9e:	4623      	mov	r3, r4
   b4da0:	4629      	mov	r1, r5
   b4da2:	4a40      	ldr	r2, [pc, #256]	; (b4ea4 <_GLOBAL__sub_I_DateTime+0x200>)
   b4da4:	4840      	ldr	r0, [pc, #256]	; (b4ea8 <_GLOBAL__sub_I_DateTime+0x204>)
   b4da6:	f001 fc2b 	bl	b6600 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish wetTempFeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/hydroponic-data.wettempfeed");
   b4daa:	4623      	mov	r3, r4
   b4dac:	4629      	mov	r1, r5
   b4dae:	4a3f      	ldr	r2, [pc, #252]	; (b4eac <_GLOBAL__sub_I_DateTime+0x208>)
   b4db0:	483f      	ldr	r0, [pc, #252]	; (b4eb0 <_GLOBAL__sub_I_DateTime+0x20c>)
   b4db2:	f001 fc25 	bl	b6600 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish waterECfeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/hydroponic-data.waterECfeed");
   b4db6:	4623      	mov	r3, r4
   b4db8:	4629      	mov	r1, r5
   b4dba:	4a3e      	ldr	r2, [pc, #248]	; (b4eb4 <_GLOBAL__sub_I_DateTime+0x210>)
   b4dbc:	483e      	ldr	r0, [pc, #248]	; (b4eb8 <_GLOBAL__sub_I_DateTime+0x214>)
   b4dbe:	f001 fc1f 	bl	b6600 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish waterORPfeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/hydroponic-data.waterORPfeed");
   b4dc2:	4623      	mov	r3, r4
   b4dc4:	4629      	mov	r1, r5
   b4dc6:	4a3d      	ldr	r2, [pc, #244]	; (b4ebc <_GLOBAL__sub_I_DateTime+0x218>)
   b4dc8:	483d      	ldr	r0, [pc, #244]	; (b4ec0 <_GLOBAL__sub_I_DateTime+0x21c>)
   b4dca:	f001 fc19 	bl	b6600 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish airTempFeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/hydroponic-data.airtempfeed");
   b4dce:	4623      	mov	r3, r4
   b4dd0:	4629      	mov	r1, r5
   b4dd2:	4a3c      	ldr	r2, [pc, #240]	; (b4ec4 <_GLOBAL__sub_I_DateTime+0x220>)
   b4dd4:	483c      	ldr	r0, [pc, #240]	; (b4ec8 <_GLOBAL__sub_I_DateTime+0x224>)
   b4dd6:	f001 fc13 	bl	b6600 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish airPressureFeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/hydroponic-data.airpressurefeed");
   b4dda:	4623      	mov	r3, r4
   b4ddc:	4629      	mov	r1, r5
   b4dde:	4a3b      	ldr	r2, [pc, #236]	; (b4ecc <_GLOBAL__sub_I_DateTime+0x228>)
   b4de0:	483b      	ldr	r0, [pc, #236]	; (b4ed0 <_GLOBAL__sub_I_DateTime+0x22c>)
   b4de2:	f001 fc0d 	bl	b6600 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish airHumidityFeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/hydroponic-data.airhumidityfeed");
   b4de6:	4623      	mov	r3, r4
   b4de8:	4629      	mov	r1, r5
   b4dea:	4a3a      	ldr	r2, [pc, #232]	; (b4ed4 <_GLOBAL__sub_I_DateTime+0x230>)
   b4dec:	483a      	ldr	r0, [pc, #232]	; (b4ed8 <_GLOBAL__sub_I_DateTime+0x234>)
   b4dee:	f001 fc07 	bl	b6600 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Subscribe pHdown = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/hydroponic-data.phdown");
   b4df2:	4623      	mov	r3, r4
   b4df4:	4629      	mov	r1, r5
   b4df6:	4a39      	ldr	r2, [pc, #228]	; (b4edc <_GLOBAL__sub_I_DateTime+0x238>)
   b4df8:	4839      	ldr	r0, [pc, #228]	; (b4ee0 <_GLOBAL__sub_I_DateTime+0x23c>)
   b4dfa:	f001 fc31 	bl	b6660 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Subscribe nutrientAdd = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/hydroponic-data.nutrientadd");
   b4dfe:	4623      	mov	r3, r4
   b4e00:	4629      	mov	r1, r5
   b4e02:	4a38      	ldr	r2, [pc, #224]	; (b4ee4 <_GLOBAL__sub_I_DateTime+0x240>)
   b4e04:	4838      	ldr	r0, [pc, #224]	; (b4ee8 <_GLOBAL__sub_I_DateTime+0x244>)
   b4e06:	f001 fc2b 	bl	b6660 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Subscribe pumpControl = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/hydroponic-data.pumpControl");
   b4e0a:	4629      	mov	r1, r5
   b4e0c:	4a37      	ldr	r2, [pc, #220]	; (b4eec <_GLOBAL__sub_I_DateTime+0x248>)
              error_(SYSTEM_ERROR_NONE) {
   b4e0e:	4d38      	ldr	r5, [pc, #224]	; (b4ef0 <_GLOBAL__sub_I_DateTime+0x24c>)
   b4e10:	4838      	ldr	r0, [pc, #224]	; (b4ef4 <_GLOBAL__sub_I_DateTime+0x250>)
   b4e12:	4623      	mov	r3, r4
   b4e14:	f001 fc24 	bl	b6660 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
    SleepResult() {}
   b4e18:	4b37      	ldr	r3, [pc, #220]	; (b4ef8 <_GLOBAL__sub_I_DateTime+0x254>)
   b4e1a:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e1c:	e9c5 4400 	strd	r4, r4, [r5]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e20:	2002      	movs	r0, #2
   b4e22:	f002 fbbf 	bl	b75a4 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   b4e26:	4935      	ldr	r1, [pc, #212]	; (b4efc <_GLOBAL__sub_I_DateTime+0x258>)
   b4e28:	4632      	mov	r2, r6
   b4e2a:	4628      	mov	r0, r5
   b4e2c:	b009      	add	sp, #36	; 0x24
   b4e2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
SYSTEM_MODE(SEMI_AUTOMATIC);
   b4e32:	f004 b939 	b.w	b90a8 <__aeabi_atexit>
   b4e36:	bf00      	nop
   b4e38:	000bc440 	.word	0x000bc440
   b4e3c:	2003e20c 	.word	0x2003e20c
   b4e40:	2003e208 	.word	0x2003e208
   b4e44:	000b7b61 	.word	0x000b7b61
   b4e48:	2003e258 	.word	0x2003e258
   b4e4c:	000b40cd 	.word	0x000b40cd
   b4e50:	2003e564 	.word	0x2003e564
   b4e54:	000bc6ec 	.word	0x000bc6ec
   b4e58:	000b4175 	.word	0x000b4175
   b4e5c:	000b4189 	.word	0x000b4189
   b4e60:	000b4105 	.word	0x000b4105
   b4e64:	00124f80 	.word	0x00124f80
   b4e68:	2003e3dc 	.word	0x2003e3dc
   b4e6c:	000b41bd 	.word	0x000b41bd
   b4e70:	2003e23c 	.word	0x2003e23c
   b4e74:	000b40c9 	.word	0x000b40c9
   b4e78:	2003e394 	.word	0x2003e394
   b4e7c:	2003e410 	.word	0x2003e410
   b4e80:	2003e5d8 	.word	0x2003e5d8
   b4e84:	000b4141 	.word	0x000b4141
   b4e88:	000bc4f8 	.word	0x000bc4f8
   b4e8c:	000bc4e8 	.word	0x000bc4e8
   b4e90:	000bc4e0 	.word	0x000bc4e0
   b4e94:	000bc758 	.word	0x000bc758
   b4e98:	000b40cb 	.word	0x000b40cb
   b4e9c:	000bc519 	.word	0x000bc519
   b4ea0:	2003e230 	.word	0x2003e230
   b4ea4:	000bc53f 	.word	0x000bc53f
   b4ea8:	2003e558 	.word	0x2003e558
   b4eac:	000bc564 	.word	0x000bc564
   b4eb0:	2003e620 	.word	0x2003e620
   b4eb4:	000bc58e 	.word	0x000bc58e
   b4eb8:	2003e604 	.word	0x2003e604
   b4ebc:	000bc5b8 	.word	0x000bc5b8
   b4ec0:	2003e610 	.word	0x2003e610
   b4ec4:	000bc5e3 	.word	0x000bc5e3
   b4ec8:	2003e290 	.word	0x2003e290
   b4ecc:	000bc60d 	.word	0x000bc60d
   b4ed0:	2003e284 	.word	0x2003e284
   b4ed4:	000bc63b 	.word	0x000bc63b
   b4ed8:	2003e278 	.word	0x2003e278
   b4edc:	000bc669 	.word	0x000bc669
   b4ee0:	2003e520 	.word	0x2003e520
   b4ee4:	000bc68e 	.word	0x000bc68e
   b4ee8:	2003e4e4 	.word	0x2003e4e4
   b4eec:	000bc6b8 	.word	0x000bc6b8
   b4ef0:	2003e224 	.word	0x2003e224
   b4ef4:	2003e588 	.word	0x2003e588
   b4ef8:	ffff0000 	.word	0xffff0000
   b4efc:	000b40e9 	.word	0x000b40e9

000b4f00 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b4f00:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b4f02:	6803      	ldr	r3, [r0, #0]
   b4f04:	2b2f      	cmp	r3, #47	; 0x2f
{
   b4f06:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b4f08:	d904      	bls.n	b4f14 <nrf_gpio_pin_port_decode+0x14>
   b4f0a:	4a07      	ldr	r2, [pc, #28]	; (b4f28 <nrf_gpio_pin_port_decode+0x28>)
   b4f0c:	2100      	movs	r1, #0
   b4f0e:	200a      	movs	r0, #10
   b4f10:	f002 fb30 	bl	b7574 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b4f14:	6823      	ldr	r3, [r4, #0]
   b4f16:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b4f18:	bf83      	ittte	hi
   b4f1a:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b4f1e:	4803      	ldrhi	r0, [pc, #12]	; (b4f2c <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b4f20:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b4f22:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b4f26:	bd10      	pop	{r4, pc}
   b4f28:	000b71a5 	.word	0x000b71a5
   b4f2c:	50000300 	.word	0x50000300

000b4f30 <_ZN7OneWire16pinModeFastInputEv.isra.0>:
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   b4f30:	2100      	movs	r1, #0
   b4f32:	f002 b8ef 	b.w	b7114 <HAL_Pin_Mode>

000b4f36 <_ZN7OneWire17pinModeFastOutputEv.isra.0>:
      HAL_Pin_Mode(_pin, OUTPUT);
   b4f36:	2101      	movs	r1, #1
   b4f38:	f002 b8ec 	b.w	b7114 <HAL_Pin_Mode>

000b4f3c <_ZN7OneWire11write_bytesEPKhtb.part.0>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
   b4f3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4f40:	4604      	mov	r4, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4f42:	4f20      	ldr	r7, [pc, #128]	; (b4fc4 <_ZN7OneWire11write_bytesEPKhtb.part.0+0x88>)
   b4f44:	4e20      	ldr	r6, [pc, #128]	; (b4fc8 <_ZN7OneWire11write_bytesEPKhtb.part.0+0x8c>)
        OneWire::write_bit((bitMask & v) ? 1 : 0);
    }

    if (power)
    {
        noInterrupts();
   b4f46:	f003 faf3 	bl	b8530 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   b4f4a:	8825      	ldrh	r5, [r4, #0]
   b4f4c:	783b      	ldrb	r3, [r7, #0]
   b4f4e:	f3bf 8f5b 	dmb	ish
   b4f52:	f013 0f01 	tst.w	r3, #1
   b4f56:	d109      	bne.n	b4f6c <_ZN7OneWire11write_bytesEPKhtb.part.0+0x30>
   b4f58:	4638      	mov	r0, r7
   b4f5a:	f7ff f8ad 	bl	b40b8 <__cxa_guard_acquire>
   b4f5e:	b128      	cbz	r0, b4f6c <_ZN7OneWire11write_bytesEPKhtb.part.0+0x30>
   b4f60:	f002 f8c8 	bl	b70f4 <HAL_Pin_Map>
   b4f64:	6030      	str	r0, [r6, #0]
   b4f66:	4638      	mov	r0, r7
   b4f68:	f7ff f8ab 	bl	b40c2 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4f6c:	6833      	ldr	r3, [r6, #0]
   b4f6e:	012d      	lsls	r5, r5, #4
   b4f70:	5d5b      	ldrb	r3, [r3, r5]
   b4f72:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4f76:	783b      	ldrb	r3, [r7, #0]
   b4f78:	f3bf 8f5b 	dmb	ish
   b4f7c:	07db      	lsls	r3, r3, #31
   b4f7e:	d409      	bmi.n	b4f94 <_ZN7OneWire11write_bytesEPKhtb.part.0+0x58>
   b4f80:	4810      	ldr	r0, [pc, #64]	; (b4fc4 <_ZN7OneWire11write_bytesEPKhtb.part.0+0x88>)
   b4f82:	f7ff f899 	bl	b40b8 <__cxa_guard_acquire>
   b4f86:	b128      	cbz	r0, b4f94 <_ZN7OneWire11write_bytesEPKhtb.part.0+0x58>
   b4f88:	f002 f8b4 	bl	b70f4 <HAL_Pin_Map>
   b4f8c:	6030      	str	r0, [r6, #0]
   b4f8e:	480d      	ldr	r0, [pc, #52]	; (b4fc4 <_ZN7OneWire11write_bytesEPKhtb.part.0+0x88>)
   b4f90:	f7ff f897 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4f94:	6833      	ldr	r3, [r6, #0]
   b4f96:	441d      	add	r5, r3
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b4f98:	a801      	add	r0, sp, #4
   b4f9a:	786b      	ldrb	r3, [r5, #1]
   b4f9c:	f003 031f 	and.w	r3, r3, #31
   b4fa0:	ea43 0308 	orr.w	r3, r3, r8
   b4fa4:	9301      	str	r3, [sp, #4]
   b4fa6:	f7ff ffab 	bl	b4f00 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b4faa:	9a01      	ldr	r2, [sp, #4]
   b4fac:	2301      	movs	r3, #1
   b4fae:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b4fb0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        pinModeFastOutput(); // Drive pin High when power is True
   b4fb4:	8820      	ldrh	r0, [r4, #0]
   b4fb6:	f7ff ffbe 	bl	b4f36 <_ZN7OneWire17pinModeFastOutputEv.isra.0>

        interrupts();
    }
}
   b4fba:	b002      	add	sp, #8
   b4fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        interrupts();
   b4fc0:	f003 bab8 	b.w	b8534 <_Z10interruptsv>
   b4fc4:	2003e62c 	.word	0x2003e62c
   b4fc8:	2003e630 	.word	0x2003e630

000b4fcc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
    inline void digitalWriteFastLow() {
   b4fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4fce:	4d1b      	ldr	r5, [pc, #108]	; (b503c <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x70>)
   b4fd0:	4e1b      	ldr	r6, [pc, #108]	; (b5040 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x74>)
   b4fd2:	782b      	ldrb	r3, [r5, #0]
   b4fd4:	f3bf 8f5b 	dmb	ish
   b4fd8:	f013 0f01 	tst.w	r3, #1
   b4fdc:	4604      	mov	r4, r0
   b4fde:	d109      	bne.n	b4ff4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x28>
   b4fe0:	4628      	mov	r0, r5
   b4fe2:	f7ff f869 	bl	b40b8 <__cxa_guard_acquire>
   b4fe6:	b128      	cbz	r0, b4ff4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x28>
   b4fe8:	f002 f884 	bl	b70f4 <HAL_Pin_Map>
   b4fec:	6030      	str	r0, [r6, #0]
   b4fee:	4628      	mov	r0, r5
   b4ff0:	f7ff f867 	bl	b40c2 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4ff4:	6833      	ldr	r3, [r6, #0]
   b4ff6:	0124      	lsls	r4, r4, #4
   b4ff8:	5d1b      	ldrb	r3, [r3, r4]
   b4ffa:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4ffc:	782b      	ldrb	r3, [r5, #0]
   b4ffe:	f3bf 8f5b 	dmb	ish
   b5002:	07db      	lsls	r3, r3, #31
   b5004:	d409      	bmi.n	b501a <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x4e>
   b5006:	480d      	ldr	r0, [pc, #52]	; (b503c <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x70>)
   b5008:	f7ff f856 	bl	b40b8 <__cxa_guard_acquire>
   b500c:	b128      	cbz	r0, b501a <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x4e>
   b500e:	f002 f871 	bl	b70f4 <HAL_Pin_Map>
   b5012:	6030      	str	r0, [r6, #0]
   b5014:	4809      	ldr	r0, [pc, #36]	; (b503c <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x70>)
   b5016:	f7ff f854 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b501a:	6830      	ldr	r0, [r6, #0]
   b501c:	4404      	add	r4, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b501e:	a801      	add	r0, sp, #4
   b5020:	7863      	ldrb	r3, [r4, #1]
   b5022:	f003 031f 	and.w	r3, r3, #31
   b5026:	433b      	orrs	r3, r7
   b5028:	9301      	str	r3, [sp, #4]
   b502a:	f7ff ff69 	bl	b4f00 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b502e:	9a01      	ldr	r2, [sp, #4]
   b5030:	2301      	movs	r3, #1
   b5032:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b5034:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    }
   b5038:	b003      	add	sp, #12
   b503a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b503c:	2003e62c 	.word	0x2003e62c
   b5040:	2003e630 	.word	0x2003e630

000b5044 <_ZN7OneWire15digitalReadFastEv.isra.0>:
    }

    inline uint8_t digitalReadFast(void){
   b5044:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5048:	4e20      	ldr	r6, [pc, #128]	; (b50cc <_ZN7OneWire15digitalReadFastEv.isra.0+0x88>)
   b504a:	4f21      	ldr	r7, [pc, #132]	; (b50d0 <_ZN7OneWire15digitalReadFastEv.isra.0+0x8c>)
   b504c:	7833      	ldrb	r3, [r6, #0]
   b504e:	f3bf 8f5b 	dmb	ish
   b5052:	f013 0f01 	tst.w	r3, #1
   b5056:	4605      	mov	r5, r0
   b5058:	d109      	bne.n	b506e <_ZN7OneWire15digitalReadFastEv.isra.0+0x2a>
   b505a:	4630      	mov	r0, r6
   b505c:	f7ff f82c 	bl	b40b8 <__cxa_guard_acquire>
   b5060:	b128      	cbz	r0, b506e <_ZN7OneWire15digitalReadFastEv.isra.0+0x2a>
   b5062:	f002 f847 	bl	b70f4 <HAL_Pin_Map>
   b5066:	6038      	str	r0, [r7, #0]
   b5068:	4630      	mov	r0, r6
   b506a:	f7ff f82a 	bl	b40c2 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b506e:	683b      	ldr	r3, [r7, #0]
   b5070:	012d      	lsls	r5, r5, #4
   b5072:	5d5c      	ldrb	r4, [r3, r5]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5074:	7833      	ldrb	r3, [r6, #0]
   b5076:	f3bf 8f5b 	dmb	ish
   b507a:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b507c:	ea4f 1844 	mov.w	r8, r4, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5080:	d409      	bmi.n	b5096 <_ZN7OneWire15digitalReadFastEv.isra.0+0x52>
   b5082:	4812      	ldr	r0, [pc, #72]	; (b50cc <_ZN7OneWire15digitalReadFastEv.isra.0+0x88>)
   b5084:	f7ff f818 	bl	b40b8 <__cxa_guard_acquire>
   b5088:	b128      	cbz	r0, b5096 <_ZN7OneWire15digitalReadFastEv.isra.0+0x52>
   b508a:	f002 f833 	bl	b70f4 <HAL_Pin_Map>
   b508e:	6038      	str	r0, [r7, #0]
   b5090:	480e      	ldr	r0, [pc, #56]	; (b50cc <_ZN7OneWire15digitalReadFastEv.isra.0+0x88>)
   b5092:	f7ff f816 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5096:	6838      	ldr	r0, [r7, #0]
   b5098:	4405      	add	r5, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b509a:	a801      	add	r0, sp, #4
   b509c:	786c      	ldrb	r4, [r5, #1]
   b509e:	f004 041f 	and.w	r4, r4, #31
   b50a2:	ea44 0408 	orr.w	r4, r4, r8
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   b50a6:	9401      	str	r4, [sp, #4]
   b50a8:	f7ff ff2a 	bl	b4f00 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   b50ac:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return nrf_gpio_pin_read(nrf_pin);
   b50b0:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b50b2:	a801      	add	r0, sp, #4
   b50b4:	f7ff ff24 	bl	b4f00 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b50b8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   b50ba:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b50be:	40d8      	lsrs	r0, r3
      return pinReadFast(_pin);
    }
   b50c0:	f000 0001 	and.w	r0, r0, #1
   b50c4:	b002      	add	sp, #8
   b50c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b50ca:	bf00      	nop
   b50cc:	2003e62c 	.word	0x2003e62c
   b50d0:	2003e630 	.word	0x2003e630

000b50d4 <_ZN7OneWireC1Et>:
OneWire::OneWire(uint16_t pin)
   b50d4:	b538      	push	{r3, r4, r5, lr}
   b50d6:	4604      	mov	r4, r0
   b50d8:	460d      	mov	r5, r1
    pinMode(pin, INPUT);
   b50da:	4628      	mov	r0, r5
   b50dc:	2100      	movs	r1, #0
   b50de:	f003 ff2f 	bl	b8f40 <pinMode>
    _pin = pin;
   b50e2:	8025      	strh	r5, [r4, #0]
}
   b50e4:	4620      	mov	r0, r4
   b50e6:	bd38      	pop	{r3, r4, r5, pc}

000b50e8 <_ZN7OneWire5resetEv>:
{
   b50e8:	b570      	push	{r4, r5, r6, lr}
   b50ea:	4605      	mov	r5, r0
    noInterrupts();
   b50ec:	f003 fa20 	bl	b8530 <_Z12noInterruptsv>
    pinModeFastInput();
   b50f0:	8828      	ldrh	r0, [r5, #0]
   b50f2:	f7ff ff1d 	bl	b4f30 <_ZN7OneWire16pinModeFastInputEv.isra.0>
    interrupts();
   b50f6:	f003 fa1d 	bl	b8534 <_Z10interruptsv>
   b50fa:	247d      	movs	r4, #125	; 0x7d
        if (--retries == 0)
   b50fc:	3c01      	subs	r4, #1
   b50fe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   b5102:	d02b      	beq.n	b515c <_ZN7OneWire5resetEv+0x74>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5104:	2002      	movs	r0, #2
   b5106:	f002 f84d 	bl	b71a4 <HAL_Delay_Microseconds>
    } while (!digitalReadFast());
   b510a:	8828      	ldrh	r0, [r5, #0]
   b510c:	f7ff ff9a 	bl	b5044 <_ZN7OneWire15digitalReadFastEv.isra.0>
   b5110:	2800      	cmp	r0, #0
   b5112:	d0f3      	beq.n	b50fc <_ZN7OneWire5resetEv+0x14>
    noInterrupts();
   b5114:	f003 fa0c 	bl	b8530 <_Z12noInterruptsv>
    digitalWriteFastLow();
   b5118:	8828      	ldrh	r0, [r5, #0]
   b511a:	f7ff ff57 	bl	b4fcc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    pinModeFastOutput(); // drive output low
   b511e:	8828      	ldrh	r0, [r5, #0]
   b5120:	f7ff ff09 	bl	b4f36 <_ZN7OneWire17pinModeFastOutputEv.isra.0>
    interrupts();
   b5124:	f003 fa06 	bl	b8534 <_Z10interruptsv>
   b5128:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   b512c:	f002 f83a 	bl	b71a4 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   b5130:	f002 f848 	bl	b71c4 <HAL_disable_irq>
   b5134:	4606      	mov	r6, r0
        pinModeFastInput(); // allow it to float
   b5136:	8828      	ldrh	r0, [r5, #0]
   b5138:	f7ff fefa 	bl	b4f30 <_ZN7OneWire16pinModeFastInputEv.isra.0>
   b513c:	2046      	movs	r0, #70	; 0x46
   b513e:	f002 f831 	bl	b71a4 <HAL_Delay_Microseconds>
        r = !digitalReadFast();
   b5142:	8828      	ldrh	r0, [r5, #0]
   b5144:	f7ff ff7e 	bl	b5044 <_ZN7OneWire15digitalReadFastEv.isra.0>
   b5148:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   b514c:	4630      	mov	r0, r6
   b514e:	f002 f841 	bl	b71d4 <HAL_enable_irq>
   b5152:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   b5156:	0964      	lsrs	r4, r4, #5
   b5158:	f002 f824 	bl	b71a4 <HAL_Delay_Microseconds>
}
   b515c:	4620      	mov	r0, r4
   b515e:	bd70      	pop	{r4, r5, r6, pc}

000b5160 <_ZN7OneWire9write_bitEh>:
{
   b5160:	b538      	push	{r3, r4, r5, lr}
    if (v & 1)
   b5162:	07cb      	lsls	r3, r1, #31
{
   b5164:	4604      	mov	r4, r0
    if (v & 1)
   b5166:	d516      	bpl.n	b5196 <_ZN7OneWire9write_bitEh+0x36>
		prev = HAL_disable_irq();
   b5168:	f002 f82c 	bl	b71c4 <HAL_disable_irq>
   b516c:	4605      	mov	r5, r0
            digitalWriteFastLow();
   b516e:	8820      	ldrh	r0, [r4, #0]
   b5170:	f7ff ff2c 	bl	b4fcc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
            pinModeFastOutput(); // drive output low
   b5174:	8820      	ldrh	r0, [r4, #0]
   b5176:	f7ff fede 	bl	b4f36 <_ZN7OneWire17pinModeFastOutputEv.isra.0>
   b517a:	2001      	movs	r0, #1
   b517c:	f002 f812 	bl	b71a4 <HAL_Delay_Microseconds>
            pinModeFastInput(); // float high
   b5180:	8820      	ldrh	r0, [r4, #0]
   b5182:	f7ff fed5 	bl	b4f30 <_ZN7OneWire16pinModeFastInputEv.isra.0>
		HAL_enable_irq(prev);
   b5186:	4628      	mov	r0, r5
   b5188:	f002 f824 	bl	b71d4 <HAL_enable_irq>
   b518c:	203b      	movs	r0, #59	; 0x3b
}
   b518e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5192:	f002 b807 	b.w	b71a4 <HAL_Delay_Microseconds>
		prev = HAL_disable_irq();
   b5196:	f002 f815 	bl	b71c4 <HAL_disable_irq>
   b519a:	4605      	mov	r5, r0
            digitalWriteFastLow();
   b519c:	8820      	ldrh	r0, [r4, #0]
   b519e:	f7ff ff15 	bl	b4fcc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
            pinModeFastOutput(); // drive output low
   b51a2:	8820      	ldrh	r0, [r4, #0]
   b51a4:	f7ff fec7 	bl	b4f36 <_ZN7OneWire17pinModeFastOutputEv.isra.0>
   b51a8:	2041      	movs	r0, #65	; 0x41
   b51aa:	f001 fffb 	bl	b71a4 <HAL_Delay_Microseconds>
            pinModeFastInput(); // float high
   b51ae:	8820      	ldrh	r0, [r4, #0]
   b51b0:	f7ff febe 	bl	b4f30 <_ZN7OneWire16pinModeFastInputEv.isra.0>
		HAL_enable_irq(prev);
   b51b4:	4628      	mov	r0, r5
   b51b6:	f002 f80d 	bl	b71d4 <HAL_enable_irq>
   b51ba:	2005      	movs	r0, #5
   b51bc:	e7e7      	b.n	b518e <_ZN7OneWire9write_bitEh+0x2e>

000b51be <_ZN7OneWire8read_bitEv>:
{
   b51be:	b538      	push	{r3, r4, r5, lr}
   b51c0:	4604      	mov	r4, r0
		prev = HAL_disable_irq();
   b51c2:	f001 ffff 	bl	b71c4 <HAL_disable_irq>
   b51c6:	4605      	mov	r5, r0
        digitalWriteFastLow();
   b51c8:	8820      	ldrh	r0, [r4, #0]
   b51ca:	f7ff feff 	bl	b4fcc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
        pinModeFastOutput();
   b51ce:	8820      	ldrh	r0, [r4, #0]
   b51d0:	f7ff feb1 	bl	b4f36 <_ZN7OneWire17pinModeFastOutputEv.isra.0>
   b51d4:	2001      	movs	r0, #1
   b51d6:	f001 ffe5 	bl	b71a4 <HAL_Delay_Microseconds>
        pinModeFastInput(); // let pin float, pull up will raise
   b51da:	8820      	ldrh	r0, [r4, #0]
   b51dc:	f7ff fea8 	bl	b4f30 <_ZN7OneWire16pinModeFastInputEv.isra.0>
   b51e0:	200d      	movs	r0, #13
   b51e2:	f001 ffdf 	bl	b71a4 <HAL_Delay_Microseconds>
        r = digitalReadFast();
   b51e6:	8820      	ldrh	r0, [r4, #0]
   b51e8:	f7ff ff2c 	bl	b5044 <_ZN7OneWire15digitalReadFastEv.isra.0>
   b51ec:	4604      	mov	r4, r0
		HAL_enable_irq(prev);
   b51ee:	4628      	mov	r0, r5
   b51f0:	f001 fff0 	bl	b71d4 <HAL_enable_irq>
   b51f4:	202e      	movs	r0, #46	; 0x2e
   b51f6:	f001 ffd5 	bl	b71a4 <HAL_Delay_Microseconds>
}
   b51fa:	4620      	mov	r0, r4
   b51fc:	bd38      	pop	{r3, r4, r5, pc}

000b51fe <_ZN7OneWire5writeEhh>:
{
   b51fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5200:	460f      	mov	r7, r1
   b5202:	4615      	mov	r5, r2
   b5204:	2608      	movs	r6, #8
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   b5206:	2401      	movs	r4, #1
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   b5208:	4227      	tst	r7, r4
   b520a:	bf14      	ite	ne
   b520c:	2101      	movne	r1, #1
   b520e:	2100      	moveq	r1, #0
   b5210:	9001      	str	r0, [sp, #4]
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   b5212:	0064      	lsls	r4, r4, #1
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   b5214:	f7ff ffa4 	bl	b5160 <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   b5218:	3e01      	subs	r6, #1
   b521a:	9801      	ldr	r0, [sp, #4]
   b521c:	b2e4      	uxtb	r4, r4
   b521e:	d1f3      	bne.n	b5208 <_ZN7OneWire5writeEhh+0xa>
    if (power)
   b5220:	b125      	cbz	r5, b522c <_ZN7OneWire5writeEhh+0x2e>
}
   b5222:	b003      	add	sp, #12
   b5224:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5228:	f7ff be88 	b.w	b4f3c <_ZN7OneWire11write_bytesEPKhtb.part.0>
   b522c:	b003      	add	sp, #12
   b522e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5230 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   b5230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5232:	4607      	mov	r7, r0
   b5234:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   b5236:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   b5238:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   b523a:	4638      	mov	r0, r7
   b523c:	f7ff ffbf 	bl	b51be <_ZN7OneWire8read_bitEv>
   b5240:	b100      	cbz	r0, b5244 <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   b5242:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   b5244:	0064      	lsls	r4, r4, #1
   b5246:	3e01      	subs	r6, #1
   b5248:	b2e4      	uxtb	r4, r4
   b524a:	d1f6      	bne.n	b523a <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
   b524c:	4628      	mov	r0, r5
   b524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5250 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   b5250:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   b5252:	2200      	movs	r2, #0
{
   b5254:	460c      	mov	r4, r1
    write(0x55); // Choose ROM
   b5256:	2155      	movs	r1, #85	; 0x55
{
   b5258:	4606      	mov	r6, r0
    write(0x55); // Choose ROM
   b525a:	f7ff ffd0 	bl	b51fe <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++)
   b525e:	1e65      	subs	r5, r4, #1
   b5260:	3407      	adds	r4, #7
        write(rom[i]);
   b5262:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   b5266:	2200      	movs	r2, #0
   b5268:	4630      	mov	r0, r6
   b526a:	f7ff ffc8 	bl	b51fe <_ZN7OneWire5writeEhh>
    for (i = 0; i < 8; i++)
   b526e:	42a5      	cmp	r5, r4
   b5270:	d1f7      	bne.n	b5262 <_ZN7OneWire6selectEPKh+0x12>
}
   b5272:	bd70      	pop	{r4, r5, r6, pc}

000b5274 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   b5274:	2300      	movs	r3, #0
   b5276:	8143      	strh	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   b5278:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   b527a:	f8c0 3002 	str.w	r3, [r0, #2]
   b527e:	f8c0 3006 	str.w	r3, [r0, #6]
        if (i == 0)
            break;
    }
}
   b5282:	4770      	bx	lr

000b5284 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   b5284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   b5288:	7b05      	ldrb	r5, [r0, #12]
{
   b528a:	4604      	mov	r4, r0
   b528c:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
   b528e:	b16d      	cbz	r5, b52ac <_ZN7OneWire6searchEPh+0x28>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   b5290:	2000      	movs	r0, #0
   b5292:	8160      	strh	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   b5294:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   b5296:	1ca3      	adds	r3, r4, #2
   b5298:	f108 38ff 	add.w	r8, r8, #4294967295
   b529c:	340a      	adds	r4, #10
        newAddr[i] = ROM_NO[i];
   b529e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b52a2:	f808 2f01 	strb.w	r2, [r8, #1]!
    for (int i = 0; i < 8; i++)
   b52a6:	429c      	cmp	r4, r3
   b52a8:	d1f9      	bne.n	b529e <_ZN7OneWire6searchEPh+0x1a>
   b52aa:	e004      	b.n	b52b6 <_ZN7OneWire6searchEPh+0x32>
        if (!reset())
   b52ac:	f7ff ff1c 	bl	b50e8 <_ZN7OneWire5resetEv>
   b52b0:	b918      	cbnz	r0, b52ba <_ZN7OneWire6searchEPh+0x36>
            LastDiscrepancy = 0;
   b52b2:	8160      	strh	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   b52b4:	7320      	strb	r0, [r4, #12]

    return search_result;
}
   b52b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write(0xF0);
   b52ba:	462a      	mov	r2, r5
   b52bc:	21f0      	movs	r1, #240	; 0xf0
   b52be:	4620      	mov	r0, r4
   b52c0:	f7ff ff9d 	bl	b51fe <_ZN7OneWire5writeEhh>
    rom_byte_mask = 1;
   b52c4:	2701      	movs	r7, #1
    last_zero = 0;
   b52c6:	46aa      	mov	sl, r5
    id_bit_number = 1;
   b52c8:	463e      	mov	r6, r7
            id_bit = read_bit();
   b52ca:	4620      	mov	r0, r4
   b52cc:	f7ff ff77 	bl	b51be <_ZN7OneWire8read_bitEv>
   b52d0:	4681      	mov	r9, r0
   b52d2:	4683      	mov	fp, r0
            cmp_id_bit = read_bit();
   b52d4:	4620      	mov	r0, r4
   b52d6:	f7ff ff72 	bl	b51be <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1))
   b52da:	f1b9 0f01 	cmp.w	r9, #1
   b52de:	d10f      	bne.n	b5300 <_ZN7OneWire6searchEPh+0x7c>
   b52e0:	2801      	cmp	r0, #1
   b52e2:	d117      	bne.n	b5314 <_ZN7OneWire6searchEPh+0x90>
        if (!(id_bit_number < 65))
   b52e4:	2e40      	cmp	r6, #64	; 0x40
   b52e6:	d9d3      	bls.n	b5290 <_ZN7OneWire6searchEPh+0xc>
            LastDiscrepancy = last_zero;
   b52e8:	f884 a00a 	strb.w	sl, [r4, #10]
            if (LastDiscrepancy == 0)
   b52ec:	f1ba 0f00 	cmp.w	sl, #0
   b52f0:	d101      	bne.n	b52f6 <_ZN7OneWire6searchEPh+0x72>
                LastDeviceFlag = TRUE;
   b52f2:	2301      	movs	r3, #1
   b52f4:	7323      	strb	r3, [r4, #12]
    if (!search_result || !ROM_NO[0])
   b52f6:	78a3      	ldrb	r3, [r4, #2]
   b52f8:	2b00      	cmp	r3, #0
   b52fa:	d0c9      	beq.n	b5290 <_ZN7OneWire6searchEPh+0xc>
            search_result = TRUE;
   b52fc:	2001      	movs	r0, #1
   b52fe:	e7ca      	b.n	b5296 <_ZN7OneWire6searchEPh+0x12>
                if (id_bit != cmp_id_bit)
   b5300:	4581      	cmp	r9, r0
   b5302:	eb04 0305 	add.w	r3, r4, r5
   b5306:	d122      	bne.n	b534e <_ZN7OneWire6searchEPh+0xca>
                    if (id_bit_number < LastDiscrepancy)
   b5308:	7aa2      	ldrb	r2, [r4, #10]
   b530a:	42b2      	cmp	r2, r6
   b530c:	d918      	bls.n	b5340 <_ZN7OneWire6searchEPh+0xbc>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   b530e:	789a      	ldrb	r2, [r3, #2]
                    if (search_direction == 0)
   b5310:	4217      	tst	r7, r2
   b5312:	d016      	beq.n	b5342 <_ZN7OneWire6searchEPh+0xbe>
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   b5314:	1962      	adds	r2, r4, r5
   b5316:	f04f 0b01 	mov.w	fp, #1
   b531a:	7893      	ldrb	r3, [r2, #2]
   b531c:	433b      	orrs	r3, r7
   b531e:	7093      	strb	r3, [r2, #2]
                write_bit(search_direction);
   b5320:	4659      	mov	r1, fp
   b5322:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
   b5324:	007f      	lsls	r7, r7, #1
                write_bit(search_direction);
   b5326:	f7ff ff1b 	bl	b5160 <_ZN7OneWire9write_bitEh>
                id_bit_number++;
   b532a:	3601      	adds	r6, #1
                if (rom_byte_mask == 0)
   b532c:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
                id_bit_number++;
   b5330:	b2f6      	uxtb	r6, r6
                if (rom_byte_mask == 0)
   b5332:	d1ca      	bne.n	b52ca <_ZN7OneWire6searchEPh+0x46>
                    rom_byte_number++;
   b5334:	3501      	adds	r5, #1
   b5336:	b2ed      	uxtb	r5, r5
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   b5338:	2d08      	cmp	r5, #8
   b533a:	d0d3      	beq.n	b52e4 <_ZN7OneWire6searchEPh+0x60>
                    rom_byte_mask = 1;
   b533c:	2701      	movs	r7, #1
   b533e:	e7c4      	b.n	b52ca <_ZN7OneWire6searchEPh+0x46>
                    if (search_direction == 0)
   b5340:	d0e8      	beq.n	b5314 <_ZN7OneWire6searchEPh+0x90>
                        if (last_zero < 9)
   b5342:	2e08      	cmp	r6, #8
   b5344:	d800      	bhi.n	b5348 <_ZN7OneWire6searchEPh+0xc4>
                            LastFamilyDiscrepancy = last_zero;
   b5346:	72e6      	strb	r6, [r4, #11]
                if (search_direction == 1)
   b5348:	f04f 0b00 	mov.w	fp, #0
   b534c:	46b2      	mov	sl, r6
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   b534e:	789a      	ldrb	r2, [r3, #2]
   b5350:	ea22 0207 	bic.w	r2, r2, r7
   b5354:	709a      	strb	r2, [r3, #2]
   b5356:	e7e3      	b.n	b5320 <_ZN7OneWire6searchEPh+0x9c>

000b5358 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   b5358:	b530      	push	{r4, r5, lr}
   b535a:	4602      	mov	r2, r0
    uint8_t crc = 0;
   b535c:	4401      	add	r1, r0
   b535e:	2000      	movs	r0, #0

    while (len--)
   b5360:	428a      	cmp	r2, r1
   b5362:	d013      	beq.n	b538c <_ZN7OneWire4crc8EPhh+0x34>
    {
        uint8_t inbyte = *addr++;
   b5364:	f812 5b01 	ldrb.w	r5, [r2], #1
   b5368:	2408      	movs	r4, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   b536a:	ea80 0305 	eor.w	r3, r0, r5
            crc >>= 1;
            if (mix)
   b536e:	f013 0f01 	tst.w	r3, #1
   b5372:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   b5376:	bf1c      	itt	ne
   b5378:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   b537c:	b2d8      	uxtbne	r0, r3
        for (uint8_t i = 8; i; i--)
   b537e:	1e63      	subs	r3, r4, #1
   b5380:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
            inbyte >>= 1;
   b5384:	ea4f 0555 	mov.w	r5, r5, lsr #1
        for (uint8_t i = 8; i; i--)
   b5388:	d1ef      	bne.n	b536a <_ZN7OneWire4crc8EPhh+0x12>
   b538a:	e7e9      	b.n	b5360 <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
   b538c:	bd30      	pop	{r4, r5, pc}

000b538e <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
   b538e:	2300      	movs	r3, #0
  _celsius = 0;
   b5390:	2200      	movs	r2, #0
  _raw = 0;
   b5392:	8243      	strh	r3, [r0, #18]
  _celsius = 0;
   b5394:	6142      	str	r2, [r0, #20]
  memset(_addr, 0, sizeof(_addr));
   b5396:	6183      	str	r3, [r0, #24]
   b5398:	61c3      	str	r3, [r0, #28]
  memset(_data, 0, sizeof(_data));
   b539a:	6203      	str	r3, [r0, #32]
   b539c:	6243      	str	r3, [r0, #36]	; 0x24
   b539e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _type = WIRE_UNKNOWN;
   b53a2:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _searchDone = false;
   b53a6:	8543      	strh	r3, [r0, #42]	; 0x2a
  _crcError = false;
}
   b53a8:	4770      	bx	lr

000b53aa <_ZN4DS18C1Etb>:
DS18::DS18(uint16_t pin, bool parasitic)
   b53aa:	b538      	push	{r3, r4, r5, lr}
   b53ac:	4604      	mov	r4, r0
   b53ae:	4615      	mov	r5, r2
  _conversionTime{1000}
   b53b0:	f7ff fe90 	bl	b50d4 <_ZN7OneWireC1Et>
   b53b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  init();
   b53b8:	4620      	mov	r0, r4
  _conversionTime{1000}
   b53ba:	73a5      	strb	r5, [r4, #14]
   b53bc:	8223      	strh	r3, [r4, #16]
  init();
   b53be:	f7ff ffe6 	bl	b538e <_ZN4DS184initEv>
}
   b53c2:	bd38      	pop	{r3, r4, r5, pc}

000b53c4 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   b53c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
   b53c8:	680b      	ldr	r3, [r1, #0]
   b53ca:	6183      	str	r3, [r0, #24]
   b53cc:	684b      	ldr	r3, [r1, #4]
   b53ce:	61c3      	str	r3, [r0, #28]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   b53d0:	780b      	ldrb	r3, [r1, #0]
   b53d2:	2b26      	cmp	r3, #38	; 0x26
bool DS18::read(uint8_t addr[8]) {
   b53d4:	4604      	mov	r4, r0
  memcpy(_addr, addr, sizeof(_addr));
   b53d6:	f100 0518 	add.w	r5, r0, #24
  switch (addr[0]) {
   b53da:	d060      	beq.n	b549e <_ZN4DS184readEPh+0xda>
   b53dc:	d808      	bhi.n	b53f0 <_ZN4DS184readEPh+0x2c>
   b53de:	2b10      	cmp	r3, #16
   b53e0:	d00a      	beq.n	b53f8 <_ZN4DS184readEPh+0x34>
   b53e2:	2b22      	cmp	r3, #34	; 0x22
   b53e4:	d059      	beq.n	b549a <_ZN4DS184readEPh+0xd6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
   b53e6:	2000      	movs	r0, #0
   b53e8:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
      }
  }

  // Got a good reading!
  return true;
}
   b53ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (addr[0]) {
   b53f0:	2b28      	cmp	r3, #40	; 0x28
   b53f2:	d1f8      	bne.n	b53e6 <_ZN4DS184readEPh+0x22>
    case 0x28: _type = WIRE_DS18B20; break;
   b53f4:	2302      	movs	r3, #2
   b53f6:	e000      	b.n	b53fa <_ZN4DS184readEPh+0x36>
    case 0x10: _type = WIRE_DS1820; break;
   b53f8:	2301      	movs	r3, #1
    case 0x26: _type = WIRE_DS2438; break;
   b53fa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  _wire.reset();               // first clear the 1-wire bus
   b53fe:	4620      	mov	r0, r4
   b5400:	f7ff fe72 	bl	b50e8 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
   b5404:	4629      	mov	r1, r5
   b5406:	4620      	mov	r0, r4
   b5408:	f7ff ff22 	bl	b5250 <_ZN7OneWire6selectEPKh>
  _wire.write(0x44, power);    // tell it to start a conversion
   b540c:	7ba2      	ldrb	r2, [r4, #14]
   b540e:	2144      	movs	r1, #68	; 0x44
   b5410:	4620      	mov	r0, r4
   b5412:	f7ff fef4 	bl	b51fe <_ZN7OneWire5writeEhh>
  delay(_conversionTime); // wait for conversion to finish
   b5416:	8a20      	ldrh	r0, [r4, #16]
   b5418:	f002 fec1 	bl	b819e <delay>
  _wire.reset();
   b541c:	4620      	mov	r0, r4
   b541e:	f7ff fe63 	bl	b50e8 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   b5422:	4629      	mov	r1, r5
   b5424:	4620      	mov	r0, r4
   b5426:	f7ff ff13 	bl	b5250 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
   b542a:	2200      	movs	r2, #0
   b542c:	21b8      	movs	r1, #184	; 0xb8
   b542e:	4620      	mov	r0, r4
   b5430:	f7ff fee5 	bl	b51fe <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
   b5434:	2200      	movs	r2, #0
   b5436:	4611      	mov	r1, r2
   b5438:	4620      	mov	r0, r4
   b543a:	f7ff fee0 	bl	b51fe <_ZN7OneWire5writeEhh>
  _wire.reset();
   b543e:	4620      	mov	r0, r4
   b5440:	f7ff fe52 	bl	b50e8 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   b5444:	4629      	mov	r1, r5
   b5446:	4620      	mov	r0, r4
   b5448:	f7ff ff02 	bl	b5250 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
   b544c:	2200      	movs	r2, #0
   b544e:	21be      	movs	r1, #190	; 0xbe
   b5450:	4620      	mov	r0, r4
   b5452:	f7ff fed4 	bl	b51fe <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
   b5456:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   b545a:	2b04      	cmp	r3, #4
   b545c:	d104      	bne.n	b5468 <_ZN4DS184readEPh+0xa4>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
   b545e:	2200      	movs	r2, #0
   b5460:	4611      	mov	r1, r2
   b5462:	4620      	mov	r0, r4
   b5464:	f7ff fecb 	bl	b51fe <_ZN7OneWire5writeEhh>
   b5468:	f104 0520 	add.w	r5, r4, #32
   b546c:	f104 0729 	add.w	r7, r4, #41	; 0x29
   b5470:	462e      	mov	r6, r5
    _data[i] = _wire.read();
   b5472:	4620      	mov	r0, r4
   b5474:	f7ff fedc 	bl	b5230 <_ZN7OneWire4readEv>
   b5478:	f805 0b01 	strb.w	r0, [r5], #1
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
   b547c:	42bd      	cmp	r5, r7
   b547e:	d1f8      	bne.n	b5472 <_ZN4DS184readEPh+0xae>
  if (OneWire::crc8(_data, 8) != _data[8]) {
   b5480:	2108      	movs	r1, #8
   b5482:	4630      	mov	r0, r6
   b5484:	f7ff ff68 	bl	b5358 <_ZN7OneWire4crc8EPhh>
   b5488:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b548c:	4283      	cmp	r3, r0
   b548e:	d008      	beq.n	b54a2 <_ZN4DS184readEPh+0xde>
    _crcError = true;
   b5490:	2301      	movs	r3, #1
   b5492:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   b5496:	2000      	movs	r0, #0
   b5498:	e7a8      	b.n	b53ec <_ZN4DS184readEPh+0x28>
    case 0x22: _type = WIRE_DS1822; break;
   b549a:	2303      	movs	r3, #3
   b549c:	e7ad      	b.n	b53fa <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
   b549e:	2304      	movs	r3, #4
   b54a0:	e7ab      	b.n	b53fa <_ZN4DS184readEPh+0x36>
  _raw = (_data[1] << 8) | _data[0];
   b54a2:	8c23      	ldrh	r3, [r4, #32]
   b54a4:	8263      	strh	r3, [r4, #18]
  if (_type == WIRE_DS2438) {
   b54a6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
  _raw = (_data[1] << 8) | _data[0];
   b54aa:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
  if (_type == WIRE_DS2438) {
   b54ae:	2b04      	cmp	r3, #4
   b54b0:	d14d      	bne.n	b554e <_ZN4DS184readEPh+0x18a>
    _raw = (_data[2] << 8) | _data[1];
   b54b2:	f894 8022 	ldrb.w	r8, [r4, #34]	; 0x22
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   b54b6:	ee07 8a90 	vmov	s15, r8
   b54ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _raw = (_data[2] << 8) | _data[1];
   b54be:	ea45 2308 	orr.w	r3, r5, r8, lsl #8
      _data[1] = (_data[1] >> 3) & 0x1f;
   b54c2:	08ed      	lsrs	r5, r5, #3
    _raw = (_data[2] << 8) | _data[1];
   b54c4:	8263      	strh	r3, [r4, #18]
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   b54c6:	ee17 0a90 	vmov	r0, s15
      _data[1] = (_data[1] >> 3) & 0x1f;
   b54ca:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   b54ce:	f004 f873 	bl	b95b8 <__aeabi_f2d>
   b54d2:	ee07 5a90 	vmov	s15, r5
   b54d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b54da:	4606      	mov	r6, r0
   b54dc:	ee17 0a90 	vmov	r0, s15
   b54e0:	460f      	mov	r7, r1
   b54e2:	f004 f869 	bl	b95b8 <__aeabi_f2d>
   b54e6:	4b25      	ldr	r3, [pc, #148]	; (b557c <_ZN4DS184readEPh+0x1b8>)
   b54e8:	2200      	movs	r2, #0
   b54ea:	f004 f8bd 	bl	b9668 <__aeabi_dmul>
      if (_data[2] > 127) {
   b54ee:	f018 0f80 	tst.w	r8, #128	; 0x80
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   b54f2:	4602      	mov	r2, r0
   b54f4:	460b      	mov	r3, r1
      if (_data[2] > 127) {
   b54f6:	d025      	beq.n	b5544 <_ZN4DS184readEPh+0x180>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   b54f8:	4630      	mov	r0, r6
   b54fa:	4639      	mov	r1, r7
   b54fc:	f003 fefc 	bl	b92f8 <__aeabi_dsub>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   b5500:	f004 fbaa 	bl	b9c58 <__aeabi_d2f>
   b5504:	6160      	str	r0, [r4, #20]
   b5506:	e015      	b.n	b5534 <_ZN4DS184readEPh+0x170>
  byte cfg = (_data[4] & 0x60);
   b5508:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
      _raw = _raw << 3; // 9 bit resolution default
   b550c:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
   b5510:	f012 0260 	ands.w	r2, r2, #96	; 0x60
   b5514:	d102      	bne.n	b551c <_ZN4DS184readEPh+0x158>
   b5516:	f023 0307 	bic.w	r3, r3, #7
   b551a:	e02c      	b.n	b5576 <_ZN4DS184readEPh+0x1b2>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   b551c:	2a20      	cmp	r2, #32
   b551e:	d00b      	beq.n	b5538 <_ZN4DS184readEPh+0x174>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   b5520:	2a40      	cmp	r2, #64	; 0x40
   b5522:	d00c      	beq.n	b553e <_ZN4DS184readEPh+0x17a>
      _celsius = (float)_raw * 0.0625;
   b5524:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
   b5528:	ee07 3a90 	vmov	s15, r3
   b552c:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
   b5530:	edc4 7a05 	vstr	s15, [r4, #20]
  switch (_type) {
   b5534:	2001      	movs	r0, #1
   b5536:	e759      	b.n	b53ec <_ZN4DS184readEPh+0x28>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   b5538:	f023 0303 	bic.w	r3, r3, #3
   b553c:	e01b      	b.n	b5576 <_ZN4DS184readEPh+0x1b2>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   b553e:	f023 0301 	bic.w	r3, r3, #1
   b5542:	e018      	b.n	b5576 <_ZN4DS184readEPh+0x1b2>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   b5544:	4630      	mov	r0, r6
   b5546:	4639      	mov	r1, r7
   b5548:	f003 fed8 	bl	b92fc <__adddf3>
   b554c:	e7d8      	b.n	b5500 <_ZN4DS184readEPh+0x13c>
  switch (_type) {
   b554e:	2b03      	cmp	r3, #3
   b5550:	d8f0      	bhi.n	b5534 <_ZN4DS184readEPh+0x170>
   b5552:	2b01      	cmp	r3, #1
   b5554:	d8d8      	bhi.n	b5508 <_ZN4DS184readEPh+0x144>
   b5556:	d1ed      	bne.n	b5534 <_ZN4DS184readEPh+0x170>
      _raw = _raw << 3; // 9 bit resolution default
   b5558:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (_data[7] == 0x10) {
   b555c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
      _raw = _raw << 3; // 9 bit resolution default
   b5560:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
   b5562:	2a10      	cmp	r2, #16
      _raw = _raw << 3; // 9 bit resolution default
   b5564:	8263      	strh	r3, [r4, #18]
      if (_data[7] == 0x10) {
   b5566:	d1dd      	bne.n	b5524 <_ZN4DS184readEPh+0x160>
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
   b5568:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   b556c:	f023 030f 	bic.w	r3, r3, #15
   b5570:	f1c2 020c 	rsb	r2, r2, #12
   b5574:	4413      	add	r3, r2
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   b5576:	8263      	strh	r3, [r4, #18]
   b5578:	e7d4      	b.n	b5524 <_ZN4DS184readEPh+0x160>
   b557a:	bf00      	nop
   b557c:	3fa00000 	.word	0x3fa00000

000b5580 <_ZN4DS184readEv>:
bool DS18::read() {
   b5580:	b538      	push	{r3, r4, r5, lr}
  if (!_wire.search(_addr)) {
   b5582:	f100 0518 	add.w	r5, r0, #24
   b5586:	4629      	mov	r1, r5
  init();
   b5588:	f7ff ff01 	bl	b538e <_ZN4DS184initEv>
bool DS18::read() {
   b558c:	4604      	mov	r4, r0
  if (!_wire.search(_addr)) {
   b558e:	f7ff fe79 	bl	b5284 <_ZN7OneWire6searchEPh>
   b5592:	b938      	cbnz	r0, b55a4 <_ZN4DS184readEv+0x24>
    _searchDone = true;
   b5594:	2301      	movs	r3, #1
   b5596:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    _wire.reset_search();
   b559a:	4620      	mov	r0, r4
   b559c:	f7ff fe6a 	bl	b5274 <_ZN7OneWire12reset_searchEv>
}
   b55a0:	2000      	movs	r0, #0
   b55a2:	bd38      	pop	{r3, r4, r5, pc}
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
   b55a4:	2107      	movs	r1, #7
   b55a6:	4628      	mov	r0, r5
   b55a8:	f7ff fed6 	bl	b5358 <_ZN7OneWire4crc8EPhh>
   b55ac:	7fe3      	ldrb	r3, [r4, #31]
   b55ae:	4283      	cmp	r3, r0
   b55b0:	d003      	beq.n	b55ba <_ZN4DS184readEv+0x3a>
    _crcError = true;
   b55b2:	2301      	movs	r3, #1
   b55b4:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   b55b8:	e7f2      	b.n	b55a0 <_ZN4DS184readEv+0x20>
  return read(_addr);
   b55ba:	4629      	mov	r1, r5
   b55bc:	4620      	mov	r0, r4
}
   b55be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return read(_addr);
   b55c2:	f7ff beff 	b.w	b53c4 <_ZN4DS184readEPh>
	...

000b55c8 <_ZN4DS1810fahrenheitEv>:

float DS18::celsius() {
  return _celsius;
}

float DS18::fahrenheit() {
   b55c8:	b508      	push	{r3, lr}
  return _celsius * 1.8 + 32.0;
   b55ca:	6940      	ldr	r0, [r0, #20]
   b55cc:	f003 fff4 	bl	b95b8 <__aeabi_f2d>
   b55d0:	a308      	add	r3, pc, #32	; (adr r3, b55f4 <_ZN4DS1810fahrenheitEv+0x2c>)
   b55d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55d6:	f004 f847 	bl	b9668 <__aeabi_dmul>
   b55da:	4b05      	ldr	r3, [pc, #20]	; (b55f0 <_ZN4DS1810fahrenheitEv+0x28>)
   b55dc:	2200      	movs	r2, #0
   b55de:	f003 fe8d 	bl	b92fc <__adddf3>
   b55e2:	f004 fb39 	bl	b9c58 <__aeabi_d2f>
}
   b55e6:	ee00 0a10 	vmov	s0, r0
   b55ea:	bd08      	pop	{r3, pc}
   b55ec:	f3af 8000 	nop.w
   b55f0:	40400000 	.word	0x40400000
   b55f4:	cccccccd 	.word	0xcccccccd
   b55f8:	3ffccccc 	.word	0x3ffccccc

000b55fc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b55fc:	4770      	bx	lr

000b55fe <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b55fe:	b510      	push	{r4, lr}
  }
   b5600:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5602:	4604      	mov	r4, r0
  }
   b5604:	f003 fd55 	bl	b90b2 <_ZdlPvj>
   b5608:	4620      	mov	r0, r4
   b560a:	bd10      	pop	{r4, pc}

000b560c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b560c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b560e:	4604      	mov	r4, r0
   b5610:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5612:	7922      	ldrb	r2, [r4, #4]
   b5614:	68a3      	ldr	r3, [r4, #8]
   b5616:	b132      	cbz	r2, b5626 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5618:	b9a3      	cbnz	r3, b5644 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b561a:	490b      	ldr	r1, [pc, #44]	; (b5648 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b561c:	b002      	add	sp, #8
   b561e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5622:	f002 bb85 	b.w	b7d30 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5626:	4a09      	ldr	r2, [pc, #36]	; (b564c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5628:	7b26      	ldrb	r6, [r4, #12]
   b562a:	4d09      	ldr	r5, [pc, #36]	; (b5650 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b562c:	4909      	ldr	r1, [pc, #36]	; (b5654 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b562e:	7b64      	ldrb	r4, [r4, #13]
   b5630:	2e01      	cmp	r6, #1
   b5632:	bf18      	it	ne
   b5634:	4629      	movne	r1, r5
   b5636:	e9cd 1400 	strd	r1, r4, [sp]
   b563a:	4907      	ldr	r1, [pc, #28]	; (b5658 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b563c:	f7fe fda6 	bl	b418c <_ZN5Print6printfEPKcz>
  }
   b5640:	b002      	add	sp, #8
   b5642:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5644:	4a05      	ldr	r2, [pc, #20]	; (b565c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5646:	e7ef      	b.n	b5628 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5648:	000bc709 	.word	0x000bc709
   b564c:	000bc440 	.word	0x000bc440
   b5650:	000bc705 	.word	0x000bc705
   b5654:	000bc701 	.word	0x000bc701
   b5658:	000bc71f 	.word	0x000bc71f
   b565c:	000bc6f8 	.word	0x000bc6f8

000b5660 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b5660:	f04f 33ff 	mov.w	r3, #4294967295
   b5664:	6103      	str	r3, [r0, #16]
{ }
   b5666:	4770      	bx	lr

000b5668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5668:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b566a:	4c0b      	ldr	r4, [pc, #44]	; (b5698 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b566c:	7821      	ldrb	r1, [r4, #0]
   b566e:	f3bf 8f5b 	dmb	ish
   b5672:	f011 0101 	ands.w	r1, r1, #1
   b5676:	d10b      	bne.n	b5690 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5678:	4620      	mov	r0, r4
   b567a:	9101      	str	r1, [sp, #4]
   b567c:	f7fe fd1c 	bl	b40b8 <__cxa_guard_acquire>
   b5680:	9901      	ldr	r1, [sp, #4]
   b5682:	b128      	cbz	r0, b5690 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5684:	4805      	ldr	r0, [pc, #20]	; (b569c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5686:	f002 f8dd 	bl	b7844 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b568a:	4620      	mov	r0, r4
   b568c:	f7fe fd19 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b5690:	4802      	ldr	r0, [pc, #8]	; (b569c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5692:	b002      	add	sp, #8
   b5694:	bd10      	pop	{r4, pc}
   b5696:	bf00      	nop
   b5698:	2003e634 	.word	0x2003e634
   b569c:	2003e638 	.word	0x2003e638

000b56a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b56a0:	b508      	push	{r3, lr}
        instance().endTransaction();
   b56a2:	f7ff ffe1 	bl	b5668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b56a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b56aa:	f002 b911 	b.w	b78d0 <_ZN8SPIClass14endTransactionEv>

000b56ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b56ae:	b507      	push	{r0, r1, r2, lr}
   b56b0:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b56b2:	f7ff ffd9 	bl	b5668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b56b6:	9901      	ldr	r1, [sp, #4]
    }
   b56b8:	b003      	add	sp, #12
   b56ba:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b56be:	f002 b921 	b.w	b7904 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b56c2 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b56c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b56c6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b56ca:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b56cc:	4605      	mov	r5, r0
   b56ce:	460f      	mov	r7, r1
    if (_sck == -1)
   b56d0:	d106      	bne.n	b56e0 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b56d2:	f7ff ffc9 	bl	b5668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b56d6:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b56d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b56dc:	f002 b9d8 	b.w	b7a90 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b56e0:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b56e2:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b56e4:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b56e8:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b56ec:	2100      	movs	r1, #0
   b56ee:	b280      	uxth	r0, r0
   b56f0:	f003 fc37 	bl	b8f62 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b56f4:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b56f8:	fa08 f106 	lsl.w	r1, r8, r6
   b56fc:	4039      	ands	r1, r7
   b56fe:	b280      	uxth	r0, r0
   b5700:	f003 fc2f 	bl	b8f62 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b5704:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b5708:	2101      	movs	r1, #1
   b570a:	b280      	uxth	r0, r0
   b570c:	f003 fc29 	bl	b8f62 <digitalWrite>
        if (digitalRead(_miso))
   b5710:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b5714:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b5716:	b280      	uxth	r0, r0
        reply <<= 1;
   b5718:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b571a:	f003 fc3b 	bl	b8f94 <digitalRead>
   b571e:	b108      	cbz	r0, b5724 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b5720:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b5724:	3e01      	subs	r6, #1
   b5726:	d2df      	bcs.n	b56e8 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b5728:	4620      	mov	r0, r4
   b572a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b5730 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b5730:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b5732:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b5736:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b5738:	4604      	mov	r4, r0
   b573a:	460e      	mov	r6, r1
   b573c:	4615      	mov	r5, r2
    if (_cs == -1) {
   b573e:	d113      	bne.n	b5768 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5740:	7901      	ldrb	r1, [r0, #4]
   b5742:	6800      	ldr	r0, [r0, #0]
   b5744:	f002 ffe6 	bl	b8714 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5748:	6820      	ldr	r0, [r4, #0]
   b574a:	6803      	ldr	r3, [r0, #0]
   b574c:	4631      	mov	r1, r6
   b574e:	689b      	ldr	r3, [r3, #8]
   b5750:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b5752:	6820      	ldr	r0, [r4, #0]
   b5754:	6803      	ldr	r3, [r0, #0]
   b5756:	4629      	mov	r1, r5
   b5758:	689b      	ldr	r3, [r3, #8]
   b575a:	4798      	blx	r3
        _wire -> endTransmission();
   b575c:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b575e:	b004      	add	sp, #16
   b5760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b5764:	f002 bfe1 	b.w	b872a <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b5768:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b576c:	3301      	adds	r3, #1
   b576e:	d10c      	bne.n	b578a <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b5770:	4b16      	ldr	r3, [pc, #88]	; (b57cc <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b5772:	9300      	str	r3, [sp, #0]
   b5774:	2300      	movs	r3, #0
   b5776:	f88d 3004 	strb.w	r3, [sp, #4]
   b577a:	4b15      	ldr	r3, [pc, #84]	; (b57d0 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b577c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b577e:	4668      	mov	r0, sp
   b5780:	2301      	movs	r3, #1
   b5782:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5786:	f7ff ff92 	bl	b56ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b578a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b578e:	2100      	movs	r1, #0
   b5790:	b280      	uxth	r0, r0
   b5792:	f003 fbe6 	bl	b8f62 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b5796:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b579a:	4620      	mov	r0, r4
   b579c:	f7ff ff91 	bl	b56c2 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b57a0:	4629      	mov	r1, r5
   b57a2:	4620      	mov	r0, r4
   b57a4:	f7ff ff8d 	bl	b56c2 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b57a8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b57ac:	2101      	movs	r1, #1
   b57ae:	b280      	uxth	r0, r0
   b57b0:	f003 fbd7 	bl	b8f62 <digitalWrite>
    if (_sck == -1)
   b57b4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b57b8:	3301      	adds	r3, #1
   b57ba:	d104      	bne.n	b57c6 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b57bc:	b004      	add	sp, #16
   b57be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b57c2:	f7ff bf6d 	b.w	b56a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b57c6:	b004      	add	sp, #16
   b57c8:	bd70      	pop	{r4, r5, r6, pc}
   b57ca:	bf00      	nop
   b57cc:	000bc744 	.word	0x000bc744
   b57d0:	0007a120 	.word	0x0007a120

000b57d4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b57d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b57d6:	00db      	lsls	r3, r3, #3
   b57d8:	f002 0207 	and.w	r2, r2, #7
   b57dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b57e0:	4313      	orrs	r3, r2
   b57e2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b57e6:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b57ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b57ee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b57f2:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b57f6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b57fa:	f366 1347 	bfi	r3, r6, #5, #3
   b57fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b5802:	00ed      	lsls	r5, r5, #3
   b5804:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b5808:	f007 0707 	and.w	r7, r7, #7
   b580c:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b5810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b5814:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b5816:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b5818:	431d      	orrs	r5, r3
   b581a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b581e:	f006 0207 	and.w	r2, r6, #7
   b5822:	21f2      	movs	r1, #242	; 0xf2
   b5824:	f7ff ff84 	bl	b5730 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b5828:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b582c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b5830:	f002 0107 	and.w	r1, r2, #7
   b5834:	009b      	lsls	r3, r3, #2
   b5836:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b583a:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b583e:	4620      	mov	r0, r4
   b5840:	21f5      	movs	r1, #245	; 0xf5
   b5842:	f7ff ff75 	bl	b5730 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b5846:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b584a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b584e:	f002 0107 	and.w	r1, r2, #7
   b5852:	009b      	lsls	r3, r3, #2
   b5854:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b5858:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b585c:	4620      	mov	r0, r4
   b585e:	21f4      	movs	r1, #244	; 0xf4
}
   b5860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b5864:	f7ff bf64 	b.w	b5730 <_ZN15Adafruit_BME2806write8Ehh>

000b5868 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b5868:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b586a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b586e:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b5870:	b085      	sub	sp, #20
   b5872:	4604      	mov	r4, r0
   b5874:	460d      	mov	r5, r1
    if (_cs == -1) {
   b5876:	d118      	bne.n	b58aa <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5878:	7901      	ldrb	r1, [r0, #4]
   b587a:	6800      	ldr	r0, [r0, #0]
   b587c:	f002 ff4a 	bl	b8714 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5880:	6820      	ldr	r0, [r4, #0]
   b5882:	6803      	ldr	r3, [r0, #0]
   b5884:	4629      	mov	r1, r5
   b5886:	689b      	ldr	r3, [r3, #8]
   b5888:	4798      	blx	r3
        _wire -> endTransmission();
   b588a:	6820      	ldr	r0, [r4, #0]
   b588c:	f002 ff4d 	bl	b872a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b5890:	7921      	ldrb	r1, [r4, #4]
   b5892:	6820      	ldr	r0, [r4, #0]
   b5894:	2201      	movs	r2, #1
   b5896:	f002 ff3a 	bl	b870e <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b589a:	6820      	ldr	r0, [r4, #0]
   b589c:	6803      	ldr	r3, [r0, #0]
   b589e:	695b      	ldr	r3, [r3, #20]
   b58a0:	4798      	blx	r3
   b58a2:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b58a4:	4628      	mov	r0, r5
   b58a6:	b005      	add	sp, #20
   b58a8:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b58aa:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b58ae:	3301      	adds	r3, #1
   b58b0:	d10c      	bne.n	b58cc <_ZN15Adafruit_BME2805read8Eh+0x64>
   b58b2:	4b15      	ldr	r3, [pc, #84]	; (b5908 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b58b4:	9300      	str	r3, [sp, #0]
   b58b6:	2300      	movs	r3, #0
   b58b8:	f88d 3004 	strb.w	r3, [sp, #4]
   b58bc:	4b13      	ldr	r3, [pc, #76]	; (b590c <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b58be:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b58c0:	4668      	mov	r0, sp
   b58c2:	2301      	movs	r3, #1
   b58c4:	f8ad 300c 	strh.w	r3, [sp, #12]
   b58c8:	f7ff fef1 	bl	b56ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b58cc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b58d0:	2100      	movs	r1, #0
   b58d2:	b280      	uxth	r0, r0
   b58d4:	f003 fb45 	bl	b8f62 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b58d8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b58dc:	4620      	mov	r0, r4
   b58de:	f7ff fef0 	bl	b56c2 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b58e2:	2100      	movs	r1, #0
   b58e4:	4620      	mov	r0, r4
   b58e6:	f7ff feec 	bl	b56c2 <_ZN15Adafruit_BME2807spixferEh>
   b58ea:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b58ec:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b58f0:	2101      	movs	r1, #1
   b58f2:	b280      	uxth	r0, r0
   b58f4:	f003 fb35 	bl	b8f62 <digitalWrite>
        if (_sck == -1)
   b58f8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b58fc:	3301      	adds	r3, #1
   b58fe:	d1d1      	bne.n	b58a4 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b5900:	f7ff fece 	bl	b56a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b5904:	e7ce      	b.n	b58a4 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b5906:	bf00      	nop
   b5908:	000bc744 	.word	0x000bc744
   b590c:	0007a120 	.word	0x0007a120

000b5910 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b5910:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b5912:	21f3      	movs	r1, #243	; 0xf3
   b5914:	f7ff ffa8 	bl	b5868 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b5918:	f000 0001 	and.w	r0, r0, #1
   b591c:	bd08      	pop	{r3, pc}
	...

000b5920 <_ZN15Adafruit_BME2806read16Eh>:
{
   b5920:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b5922:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b5926:	3301      	adds	r3, #1
{
   b5928:	b085      	sub	sp, #20
   b592a:	4604      	mov	r4, r0
   b592c:	460d      	mov	r5, r1
    if (_cs == -1) {
   b592e:	d11f      	bne.n	b5970 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5930:	7901      	ldrb	r1, [r0, #4]
   b5932:	6800      	ldr	r0, [r0, #0]
   b5934:	f002 feee 	bl	b8714 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5938:	6820      	ldr	r0, [r4, #0]
   b593a:	6803      	ldr	r3, [r0, #0]
   b593c:	4629      	mov	r1, r5
   b593e:	689b      	ldr	r3, [r3, #8]
   b5940:	4798      	blx	r3
        _wire -> endTransmission();
   b5942:	6820      	ldr	r0, [r4, #0]
   b5944:	f002 fef1 	bl	b872a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b5948:	7921      	ldrb	r1, [r4, #4]
   b594a:	6820      	ldr	r0, [r4, #0]
   b594c:	2202      	movs	r2, #2
   b594e:	f002 fede 	bl	b870e <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b5952:	6820      	ldr	r0, [r4, #0]
   b5954:	6803      	ldr	r3, [r0, #0]
   b5956:	695b      	ldr	r3, [r3, #20]
   b5958:	4798      	blx	r3
   b595a:	4605      	mov	r5, r0
   b595c:	6820      	ldr	r0, [r4, #0]
   b595e:	6803      	ldr	r3, [r0, #0]
   b5960:	695b      	ldr	r3, [r3, #20]
   b5962:	4798      	blx	r3
   b5964:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b5968:	b285      	uxth	r5, r0
}
   b596a:	4628      	mov	r0, r5
   b596c:	b005      	add	sp, #20
   b596e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b5970:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5974:	3301      	adds	r3, #1
   b5976:	d10c      	bne.n	b5992 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b5978:	4b18      	ldr	r3, [pc, #96]	; (b59dc <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b597a:	9300      	str	r3, [sp, #0]
   b597c:	2300      	movs	r3, #0
   b597e:	f88d 3004 	strb.w	r3, [sp, #4]
   b5982:	4b17      	ldr	r3, [pc, #92]	; (b59e0 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b5984:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b5986:	4668      	mov	r0, sp
   b5988:	2301      	movs	r3, #1
   b598a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b598e:	f7ff fe8e 	bl	b56ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5992:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5996:	2100      	movs	r1, #0
   b5998:	b280      	uxth	r0, r0
   b599a:	f003 fae2 	bl	b8f62 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b599e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b59a2:	4620      	mov	r0, r4
   b59a4:	f7ff fe8d 	bl	b56c2 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b59a8:	2100      	movs	r1, #0
   b59aa:	4620      	mov	r0, r4
   b59ac:	f7ff fe89 	bl	b56c2 <_ZN15Adafruit_BME2807spixferEh>
   b59b0:	2100      	movs	r1, #0
   b59b2:	4605      	mov	r5, r0
   b59b4:	4620      	mov	r0, r4
   b59b6:	f7ff fe84 	bl	b56c2 <_ZN15Adafruit_BME2807spixferEh>
   b59ba:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b59be:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b59c0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b59c4:	2101      	movs	r1, #1
   b59c6:	b280      	uxth	r0, r0
   b59c8:	f003 facb 	bl	b8f62 <digitalWrite>
        if (_sck == -1)
   b59cc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b59d0:	3301      	adds	r3, #1
   b59d2:	d1ca      	bne.n	b596a <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b59d4:	f7ff fe64 	bl	b56a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b59d8:	e7c7      	b.n	b596a <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b59da:	bf00      	nop
   b59dc:	000bc744 	.word	0x000bc744
   b59e0:	0007a120 	.word	0x0007a120

000b59e4 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b59e4:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b59e6:	f7ff ff9b 	bl	b5920 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b59ea:	ba40      	rev16	r0, r0
}
   b59ec:	b280      	uxth	r0, r0
   b59ee:	bd08      	pop	{r3, pc}

000b59f0 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b59f0:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b59f2:	2188      	movs	r1, #136	; 0x88
{
   b59f4:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b59f6:	f7ff fff5 	bl	b59e4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b59fa:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b59fc:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b59fe:	4620      	mov	r0, r4
   b5a00:	f7ff fff0 	bl	b59e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b5a04:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b5a06:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b5a08:	4620      	mov	r0, r4
   b5a0a:	f7ff ffeb 	bl	b59e4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b5a0e:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b5a10:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b5a12:	4620      	mov	r0, r4
   b5a14:	f7ff ffe6 	bl	b59e4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b5a18:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b5a1a:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b5a1c:	4620      	mov	r0, r4
   b5a1e:	f7ff ffe1 	bl	b59e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b5a22:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b5a24:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b5a26:	4620      	mov	r0, r4
   b5a28:	f7ff ffdc 	bl	b59e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b5a2c:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b5a2e:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b5a30:	4620      	mov	r0, r4
   b5a32:	f7ff ffd7 	bl	b59e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b5a36:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b5a38:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b5a3a:	4620      	mov	r0, r4
   b5a3c:	f7ff ffd2 	bl	b59e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b5a40:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b5a42:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b5a44:	4620      	mov	r0, r4
   b5a46:	f7ff ffcd 	bl	b59e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b5a4a:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b5a4c:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b5a4e:	4620      	mov	r0, r4
   b5a50:	f7ff ffc8 	bl	b59e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b5a54:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b5a56:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b5a58:	4620      	mov	r0, r4
   b5a5a:	f7ff ffc3 	bl	b59e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b5a5e:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b5a60:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b5a62:	4620      	mov	r0, r4
   b5a64:	f7ff ffbe 	bl	b59e4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b5a68:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b5a6a:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b5a6c:	4620      	mov	r0, r4
   b5a6e:	f7ff fefb 	bl	b5868 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b5a72:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b5a74:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b5a78:	4620      	mov	r0, r4
   b5a7a:	f7ff ffb3 	bl	b59e4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b5a7e:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b5a80:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b5a82:	4620      	mov	r0, r4
   b5a84:	f7ff fef0 	bl	b5868 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b5a88:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b5a8a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b5a8e:	4620      	mov	r0, r4
   b5a90:	f7ff feea 	bl	b5868 <_ZN15Adafruit_BME2805read8Eh>
   b5a94:	21e5      	movs	r1, #229	; 0xe5
   b5a96:	4605      	mov	r5, r0
   b5a98:	4620      	mov	r0, r4
   b5a9a:	f7ff fee5 	bl	b5868 <_ZN15Adafruit_BME2805read8Eh>
   b5a9e:	f000 030f 	and.w	r3, r0, #15
   b5aa2:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b5aa6:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b5aa8:	21e6      	movs	r1, #230	; 0xe6
   b5aaa:	4620      	mov	r0, r4
   b5aac:	f7ff fedc 	bl	b5868 <_ZN15Adafruit_BME2805read8Eh>
   b5ab0:	21e5      	movs	r1, #229	; 0xe5
   b5ab2:	4605      	mov	r5, r0
   b5ab4:	4620      	mov	r0, r4
   b5ab6:	f7ff fed7 	bl	b5868 <_ZN15Adafruit_BME2805read8Eh>
   b5aba:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b5abe:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b5ac2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b5ac4:	21e7      	movs	r1, #231	; 0xe7
   b5ac6:	4620      	mov	r0, r4
   b5ac8:	f7ff fece 	bl	b5868 <_ZN15Adafruit_BME2805read8Eh>
   b5acc:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b5ad0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5ad4 <_ZN15Adafruit_BME2806read24Eh>:
{
   b5ad4:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b5ad6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b5ada:	3301      	adds	r3, #1
{
   b5adc:	b085      	sub	sp, #20
   b5ade:	4604      	mov	r4, r0
   b5ae0:	460d      	mov	r5, r1
    if (_cs == -1) {
   b5ae2:	d123      	bne.n	b5b2c <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5ae4:	7901      	ldrb	r1, [r0, #4]
   b5ae6:	6800      	ldr	r0, [r0, #0]
   b5ae8:	f002 fe14 	bl	b8714 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5aec:	6820      	ldr	r0, [r4, #0]
   b5aee:	6803      	ldr	r3, [r0, #0]
   b5af0:	4629      	mov	r1, r5
   b5af2:	689b      	ldr	r3, [r3, #8]
   b5af4:	4798      	blx	r3
        _wire -> endTransmission();
   b5af6:	6820      	ldr	r0, [r4, #0]
   b5af8:	f002 fe17 	bl	b872a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b5afc:	7921      	ldrb	r1, [r4, #4]
   b5afe:	6820      	ldr	r0, [r4, #0]
   b5b00:	2203      	movs	r2, #3
   b5b02:	f002 fe04 	bl	b870e <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b5b06:	6820      	ldr	r0, [r4, #0]
   b5b08:	6803      	ldr	r3, [r0, #0]
   b5b0a:	695b      	ldr	r3, [r3, #20]
   b5b0c:	4798      	blx	r3
        value <<= 8;
   b5b0e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b5b10:	6820      	ldr	r0, [r4, #0]
   b5b12:	6803      	ldr	r3, [r0, #0]
   b5b14:	695b      	ldr	r3, [r3, #20]
   b5b16:	4798      	blx	r3
   b5b18:	4328      	orrs	r0, r5
        value <<= 8;
   b5b1a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b5b1c:	6820      	ldr	r0, [r4, #0]
   b5b1e:	6803      	ldr	r3, [r0, #0]
   b5b20:	695b      	ldr	r3, [r3, #20]
   b5b22:	4798      	blx	r3
   b5b24:	4305      	orrs	r5, r0
}
   b5b26:	4628      	mov	r0, r5
   b5b28:	b005      	add	sp, #20
   b5b2a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b5b2c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5b30:	3301      	adds	r3, #1
   b5b32:	d10c      	bne.n	b5b4e <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b5b34:	4b1a      	ldr	r3, [pc, #104]	; (b5ba0 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b5b36:	9300      	str	r3, [sp, #0]
   b5b38:	2300      	movs	r3, #0
   b5b3a:	f88d 3004 	strb.w	r3, [sp, #4]
   b5b3e:	4b19      	ldr	r3, [pc, #100]	; (b5ba4 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b5b40:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b5b42:	4668      	mov	r0, sp
   b5b44:	2301      	movs	r3, #1
   b5b46:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5b4a:	f7ff fdb0 	bl	b56ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5b4e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5b52:	2100      	movs	r1, #0
   b5b54:	b280      	uxth	r0, r0
   b5b56:	f003 fa04 	bl	b8f62 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b5b5a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5b5e:	4620      	mov	r0, r4
   b5b60:	f7ff fdaf 	bl	b56c2 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b5b64:	2100      	movs	r1, #0
   b5b66:	4620      	mov	r0, r4
   b5b68:	f7ff fdab 	bl	b56c2 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b5b6c:	2100      	movs	r1, #0
        value <<= 8;
   b5b6e:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b5b70:	4620      	mov	r0, r4
   b5b72:	f7ff fda6 	bl	b56c2 <_ZN15Adafruit_BME2807spixferEh>
   b5b76:	4328      	orrs	r0, r5
        value <<= 8;
   b5b78:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b5b7a:	2100      	movs	r1, #0
   b5b7c:	4620      	mov	r0, r4
   b5b7e:	f7ff fda0 	bl	b56c2 <_ZN15Adafruit_BME2807spixferEh>
   b5b82:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b5b84:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5b88:	2101      	movs	r1, #1
   b5b8a:	b280      	uxth	r0, r0
   b5b8c:	f003 f9e9 	bl	b8f62 <digitalWrite>
        if (_sck == -1)
   b5b90:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5b94:	3301      	adds	r3, #1
   b5b96:	d1c6      	bne.n	b5b26 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b5b98:	f7ff fd82 	bl	b56a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b5b9c:	e7c3      	b.n	b5b26 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b5b9e:	bf00      	nop
   b5ba0:	000bc744 	.word	0x000bc744
   b5ba4:	0007a120 	.word	0x0007a120

000b5ba8 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b5ba8:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b5baa:	21fa      	movs	r1, #250	; 0xfa
{
   b5bac:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b5bae:	f7ff ff91 	bl	b5ad4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b5bb2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b5bb6:	d01f      	beq.n	b5bf8 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5bb8:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b5bba:	ed9f 7a11 	vldr	s14, [pc, #68]	; b5c00 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5bbe:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b5bc0:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5bc4:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b5bc8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5bcc:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b5bce:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b5bd2:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b5bd6:	131b      	asrs	r3, r3, #12
   b5bd8:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b5bda:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b5bdc:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b5be0:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b5be2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5be6:	3380      	adds	r3, #128	; 0x80
   b5be8:	121b      	asrs	r3, r3, #8
   b5bea:	ee07 3a90 	vmov	s15, r3
   b5bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b5bf2:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b5bf6:	bd10      	pop	{r4, pc}
        return NAN;
   b5bf8:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5c04 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b5bfc:	e7fb      	b.n	b5bf6 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b5bfe:	bf00      	nop
   b5c00:	42c80000 	.word	0x42c80000
   b5c04:	7fc00000 	.word	0x7fc00000

000b5c08 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b5c08:	b538      	push	{r3, r4, r5, lr}
   b5c0a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b5c0c:	f7ff ffcc 	bl	b5ba8 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b5c10:	21fd      	movs	r1, #253	; 0xfd
   b5c12:	4620      	mov	r0, r4
   b5c14:	f7ff fe84 	bl	b5920 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b5c18:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b5c1c:	d038      	beq.n	b5c90 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b5c1e:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b5c20:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b5c24:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b5c28:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b5c2c:	0509      	lsls	r1, r1, #20
   b5c2e:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b5c32:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b5c36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b5c3a:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5c3c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b5c40:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5c44:	436b      	muls	r3, r5
   b5c46:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b5c48:	4369      	muls	r1, r5
   b5c4a:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5c4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b5c50:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5c52:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b5c54:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5c58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b5c5c:	434b      	muls	r3, r1
   b5c5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b5c62:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b5c64:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b5c66:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b5c68:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b5c6c:	4352      	muls	r2, r2
   b5c6e:	11d2      	asrs	r2, r2, #7
   b5c70:	434a      	muls	r2, r1
   b5c72:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b5c76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b5c7a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b5c7e:	bfa8      	it	ge
   b5c80:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b5c84:	131b      	asrs	r3, r3, #12
   b5c86:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b5c8a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b5c8e:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b5c90:	ed9f 0a01 	vldr	s0, [pc, #4]	; b5c98 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b5c94:	e7fb      	b.n	b5c8e <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b5c96:	bf00      	nop
   b5c98:	7fc00000 	.word	0x7fc00000

000b5c9c <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b5c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5ca0:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b5ca2:	f7ff ff81 	bl	b5ba8 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b5ca6:	21f7      	movs	r1, #247	; 0xf7
   b5ca8:	4628      	mov	r0, r5
   b5caa:	f7ff ff13 	bl	b5ad4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b5cae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b5cb2:	f000 80b6 	beq.w	b5e22 <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b5cb6:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5cb8:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b5cbc:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b5cc0:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b5cc4:	f14e 3eff 	adc.w	lr, lr, #4294967295
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5cc8:	17dc      	asrs	r4, r3, #31
   b5cca:	fb03 f20e 	mul.w	r2, r3, lr
   b5cce:	fb01 2204 	mla	r2, r1, r4, r2
   b5cd2:	fba3 3401 	umull	r3, r4, r3, r1
   b5cd6:	4422      	add	r2, r4
   b5cd8:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5cda:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5cde:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5ce0:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5ce4:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b5ce8:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5cec:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b5cf0:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b5cf4:	fb03 f608 	mul.w	r6, r3, r8
   b5cf8:	fb07 660c 	mla	r6, r7, ip, r6
   b5cfc:	fba3 3c07 	umull	r3, ip, r3, r7
   b5d00:	4466      	add	r6, ip
   b5d02:	0a1b      	lsrs	r3, r3, #8
   b5d04:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b5d08:	191b      	adds	r3, r3, r4
   b5d0a:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b5d0e:	8b6e      	ldrh	r6, [r5, #26]
   b5d10:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b5d14:	fba3 3406 	umull	r3, r4, r3, r6
   b5d18:	fb06 4402 	mla	r4, r6, r2, r4
   b5d1c:	17e3      	asrs	r3, r4, #31
   b5d1e:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b5d20:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b5d24:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b5d28:	d07e      	beq.n	b5e28 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5d2a:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b5d2e:	fb04 f608 	mul.w	r6, r4, r8
   b5d32:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b5d36:	fb07 6609 	mla	r6, r7, r9, r6
   b5d3a:	fba4 4707 	umull	r4, r7, r4, r7
   b5d3e:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b5d40:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b5d44:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b5d48:	fb07 fe0e 	mul.w	lr, r7, lr
   b5d4c:	fb01 ee08 	mla	lr, r1, r8, lr
   b5d50:	fba7 7101 	umull	r7, r1, r7, r1
   b5d54:	4471      	add	r1, lr
   b5d56:	0449      	lsls	r1, r1, #17
   b5d58:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b5d5c:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b5d5e:	047f      	lsls	r7, r7, #17
   b5d60:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b5d62:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b5d66:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b5d6a:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b5d6e:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b5d72:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b5d76:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b5d7a:	07e4      	lsls	r4, r4, #31
   b5d7c:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b5d7e:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b5d82:	f640 4135 	movw	r1, #3125	; 0xc35
   b5d86:	eb60 0606 	sbc.w	r6, r0, r6
   b5d8a:	fba4 0401 	umull	r0, r4, r4, r1
   b5d8e:	fb01 4106 	mla	r1, r1, r6, r4
   b5d92:	f004 f8bf 	bl	b9f14 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b5d96:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5d9a:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b5d9e:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b5da2:	0b43      	lsrs	r3, r0, #13
   b5da4:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b5da8:	fb02 f70c 	mul.w	r7, r2, ip
   b5dac:	17d4      	asrs	r4, r2, #31
   b5dae:	fb03 7704 	mla	r7, r3, r4, r7
   b5db2:	fba2 2403 	umull	r2, r4, r2, r3
   b5db6:	443c      	add	r4, r7
   b5db8:	fb02 f70c 	mul.w	r7, r2, ip
   b5dbc:	fb03 7704 	mla	r7, r3, r4, r7
   b5dc0:	fba2 2303 	umull	r2, r3, r2, r3
   b5dc4:	441f      	add	r7, r3
   b5dc6:	0e53      	lsrs	r3, r2, #25
   b5dc8:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5dcc:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5dce:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b5dd2:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b5dd6:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5dd8:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5ddc:	fb02 4100 	mla	r1, r2, r0, r4
   b5de0:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5de4:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5de8:	4431      	add	r1, r6
   b5dea:	0cc0      	lsrs	r0, r0, #19
   b5dec:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5df0:	1818      	adds	r0, r3, r0
   b5df2:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b5df6:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b5dfa:	0a00      	lsrs	r0, r0, #8
   b5dfc:	012d      	lsls	r5, r5, #4
   b5dfe:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b5e02:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b5e06:	0124      	lsls	r4, r4, #4
   b5e08:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b5e0a:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b5e0e:	f004 f843 	bl	b9e98 <__aeabi_l2f>
   b5e12:	ed9f 0a07 	vldr	s0, [pc, #28]	; b5e30 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b5e16:	ee07 0a90 	vmov	s15, r0
   b5e1a:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b5e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b5e22:	ed9f 0a04 	vldr	s0, [pc, #16]	; b5e34 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b5e26:	e7fa      	b.n	b5e1e <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b5e28:	ed9f 0a03 	vldr	s0, [pc, #12]	; b5e38 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b5e2c:	e7f7      	b.n	b5e1e <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b5e2e:	bf00      	nop
   b5e30:	3b800000 	.word	0x3b800000
   b5e34:	7fc00000 	.word	0x7fc00000
   b5e38:	00000000 	.word	0x00000000

000b5e3c <_ZN15Adafruit_BME2804initEv>:
{
   b5e3c:	b530      	push	{r4, r5, lr}
   b5e3e:	4604      	mov	r4, r0
    if (_cs == -1) {
   b5e40:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b5e44:	1c42      	adds	r2, r0, #1
{
   b5e46:	b085      	sub	sp, #20
    if (_cs == -1) {
   b5e48:	d119      	bne.n	b5e7e <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b5e4a:	6820      	ldr	r0, [r4, #0]
   b5e4c:	f002 fc30 	bl	b86b0 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b5e50:	21d0      	movs	r1, #208	; 0xd0
   b5e52:	4620      	mov	r0, r4
   b5e54:	f7ff fd08 	bl	b5868 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b5e58:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b5e5a:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b5e5c:	d145      	bne.n	b5eea <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b5e5e:	4620      	mov	r0, r4
   b5e60:	22b6      	movs	r2, #182	; 0xb6
   b5e62:	21e0      	movs	r1, #224	; 0xe0
   b5e64:	f7ff fc64 	bl	b5730 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b5e68:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b5e6c:	f002 f997 	bl	b819e <delay>
    while (isReadingCalibration())
   b5e70:	4620      	mov	r0, r4
   b5e72:	f7ff fd4d 	bl	b5910 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b5e76:	4605      	mov	r5, r0
   b5e78:	b328      	cbz	r0, b5ec6 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b5e7a:	2064      	movs	r0, #100	; 0x64
   b5e7c:	e7f6      	b.n	b5e6c <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b5e7e:	2101      	movs	r1, #1
   b5e80:	b280      	uxth	r0, r0
   b5e82:	f003 f86e 	bl	b8f62 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b5e86:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5e8a:	2101      	movs	r1, #1
   b5e8c:	b280      	uxth	r0, r0
   b5e8e:	f003 f857 	bl	b8f40 <pinMode>
        if (_sck == -1) {
   b5e92:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b5e96:	1c43      	adds	r3, r0, #1
   b5e98:	d104      	bne.n	b5ea4 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b5e9a:	f7ff fbe5 	bl	b5668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5e9e:	f001 fcdb 	bl	b7858 <_ZN8SPIClass5beginEv>
    }
   b5ea2:	e7d5      	b.n	b5e50 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b5ea4:	2101      	movs	r1, #1
   b5ea6:	b280      	uxth	r0, r0
   b5ea8:	f003 f84a 	bl	b8f40 <pinMode>
            pinMode(_mosi, OUTPUT);
   b5eac:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b5eb0:	2101      	movs	r1, #1
   b5eb2:	b280      	uxth	r0, r0
   b5eb4:	f003 f844 	bl	b8f40 <pinMode>
            pinMode(_miso, INPUT);
   b5eb8:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b5ebc:	2100      	movs	r1, #0
   b5ebe:	b280      	uxth	r0, r0
   b5ec0:	f003 f83e 	bl	b8f40 <pinMode>
   b5ec4:	e7c4      	b.n	b5e50 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b5ec6:	4620      	mov	r0, r4
   b5ec8:	f7ff fd92 	bl	b59f0 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b5ecc:	2305      	movs	r3, #5
   b5ece:	9300      	str	r3, [sp, #0]
   b5ed0:	461a      	mov	r2, r3
   b5ed2:	2103      	movs	r1, #3
   b5ed4:	4620      	mov	r0, r4
   b5ed6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5eda:	f7ff fc7b 	bl	b57d4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b5ede:	2064      	movs	r0, #100	; 0x64
   b5ee0:	f002 f95d 	bl	b819e <delay>
    return true;
   b5ee4:	2001      	movs	r0, #1
}
   b5ee6:	b005      	add	sp, #20
   b5ee8:	bd30      	pop	{r4, r5, pc}
        return false;
   b5eea:	2000      	movs	r0, #0
   b5eec:	e7fb      	b.n	b5ee6 <_ZN15Adafruit_BME2804initEv+0xaa>

000b5eee <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b5eee:	2377      	movs	r3, #119	; 0x77
{
   b5ef0:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b5ef2:	7103      	strb	r3, [r0, #4]
{
   b5ef4:	4604      	mov	r4, r0
	_wire = &Wire;
   b5ef6:	f003 f8af 	bl	b9058 <_Z19__fetch_global_Wirev>
   b5efa:	6020      	str	r0, [r4, #0]
	status = init();
   b5efc:	4620      	mov	r0, r4
   b5efe:	f7ff ff9d 	bl	b5e3c <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b5f02:	b930      	cbnz	r0, b5f12 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b5f04:	2376      	movs	r3, #118	; 0x76
   b5f06:	7123      	strb	r3, [r4, #4]
 		status = init();
   b5f08:	4620      	mov	r0, r4
}
   b5f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b5f0e:	f7ff bf95 	b.w	b5e3c <_ZN15Adafruit_BME2804initEv>
}
   b5f12:	bd10      	pop	{r4, pc}

000b5f14 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   b5f14:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   b5f16:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b5f1a:	6803      	ldr	r3, [r0, #0]
   b5f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f1e:	4798      	blx	r3
}
   b5f20:	3800      	subs	r0, #0
   b5f22:	bf18      	it	ne
   b5f24:	2001      	movne	r0, #1
   b5f26:	bd08      	pop	{r3, pc}

000b5f28 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   b5f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f2a:	4606      	mov	r6, r0
   b5f2c:	460f      	mov	r7, r1
   b5f2e:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   b5f30:	b1c4      	cbz	r4, b5f64 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   b5f32:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b5f36:	6803      	ldr	r3, [r0, #0]
   b5f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f3a:	4798      	blx	r3
   b5f3c:	b908      	cbnz	r0, b5f42 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   b5f3e:	2000      	movs	r0, #0
    }
  }
  return true;
}
   b5f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   b5f42:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   b5f46:	2cfa      	cmp	r4, #250	; 0xfa
   b5f48:	6803      	ldr	r3, [r0, #0]
   b5f4a:	4625      	mov	r5, r4
   b5f4c:	bfa8      	it	ge
   b5f4e:	25fa      	movge	r5, #250	; 0xfa
   b5f50:	68db      	ldr	r3, [r3, #12]
   b5f52:	462a      	mov	r2, r5
   b5f54:	4639      	mov	r1, r7
   b5f56:	4798      	blx	r3
   b5f58:	b283      	uxth	r3, r0
      len -= ret;
   b5f5a:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   b5f5c:	429d      	cmp	r5, r3
      len -= ret;
   b5f5e:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   b5f60:	d0e6      	beq.n	b5f30 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   b5f62:	e7ec      	b.n	b5f3e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   b5f64:	2001      	movs	r0, #1
   b5f66:	e7eb      	b.n	b5f40 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000b5f68 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   b5f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5f6c:	4606      	mov	r6, r0
   b5f6e:	4688      	mov	r8, r1
   b5f70:	4691      	mov	r9, r2
   b5f72:	461f      	mov	r7, r3
   b5f74:	461d      	mov	r5, r3
  uint16_t len = 0;
   b5f76:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   b5f78:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b5f7c:	6803      	ldr	r3, [r0, #0]
   b5f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f80:	4798      	blx	r3
   b5f82:	b1d0      	cbz	r0, b5fba <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   b5f84:	2d00      	cmp	r5, #0
   b5f86:	db18      	blt.n	b5fba <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   b5f88:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b5f8c:	6803      	ldr	r3, [r0, #0]
   b5f8e:	691b      	ldr	r3, [r3, #16]
   b5f90:	4798      	blx	r3
   b5f92:	b160      	cbz	r0, b5fae <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   b5f94:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b5f98:	6803      	ldr	r3, [r0, #0]
   b5f9a:	695b      	ldr	r3, [r3, #20]
   b5f9c:	4798      	blx	r3
   b5f9e:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   b5fa2:	3401      	adds	r4, #1
   b5fa4:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   b5fa6:	454c      	cmp	r4, r9
   b5fa8:	d007      	beq.n	b5fba <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   b5faa:	463d      	mov	r5, r7
   b5fac:	e7ec      	b.n	b5f88 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b5fae:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b5fb0:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b5fb2:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b5fb4:	f002 f8f3 	bl	b819e <delay>
  while (client->connected() && (timeout >= 0)) {
   b5fb8:	e7de      	b.n	b5f78 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   b5fba:	4620      	mov	r0, r4
   b5fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5fc0 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   b5fc0:	b570      	push	{r4, r5, r6, lr}
   b5fc2:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   b5fc4:	f100 0522 	add.w	r5, r0, #34	; 0x22
   b5fc8:	2296      	movs	r2, #150	; 0x96
   b5fca:	2100      	movs	r1, #0
   b5fcc:	4628      	mov	r0, r5
   b5fce:	f004 fa21 	bl	ba414 <memset>
  strcpy((char *)buffer, servername);
   b5fd2:	6861      	ldr	r1, [r4, #4]
   b5fd4:	4628      	mov	r0, r5
   b5fd6:	f004 fa9b 	bl	ba510 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   b5fda:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b5fde:	8922      	ldrh	r2, [r4, #8]
   b5fe0:	6803      	ldr	r3, [r0, #0]
   b5fe2:	4629      	mov	r1, r5
   b5fe4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   b5fe6:	2300      	movs	r3, #0
   b5fe8:	47b0      	blx	r6
}
   b5fea:	3800      	subs	r0, #0
   b5fec:	bf18      	it	ne
   b5fee:	2001      	movne	r0, #1
   b5ff0:	bd70      	pop	{r4, r5, r6, pc}

000b5ff2 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   b5ff2:	b510      	push	{r4, lr}
   b5ff4:	4604      	mov	r4, r0
  if (client->connected()) {
   b5ff6:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b5ffa:	6803      	ldr	r3, [r0, #0]
   b5ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ffe:	4798      	blx	r3
   b6000:	b120      	cbz	r0, b600c <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   b6002:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b6006:	6803      	ldr	r3, [r0, #0]
   b6008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b600a:	4798      	blx	r3
}
   b600c:	2001      	movs	r0, #1
   b600e:	bd10      	pop	{r4, pc}

000b6010 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
{
   b6010:	b570      	push	{r4, r5, r6, lr}
    if (!connected())
   b6012:	6803      	ldr	r3, [r0, #0]
   b6014:	689b      	ldr	r3, [r3, #8]
{
   b6016:	4604      	mov	r4, r0
    if (!connected())
   b6018:	4798      	blx	r3
   b601a:	b9c8      	cbnz	r0, b6050 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b601c:	4620      	mov	r0, r4
   b601e:	f000 fa98 	bl	b6552 <_ZN13Adafruit_MQTT7connectEv>
   b6022:	2504      	movs	r5, #4
   b6024:	b170      	cbz	r0, b6044 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   b6026:	3d01      	subs	r5, #1
   b6028:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b602c:	d00a      	beq.n	b6044 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
            disconnect();
   b602e:	4620      	mov	r0, r4
   b6030:	f000 f8b6 	bl	b61a0 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   b6034:	f241 3088 	movw	r0, #5000	; 0x1388
   b6038:	f002 f8b1 	bl	b819e <delay>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b603c:	4620      	mov	r0, r4
   b603e:	f000 fa88 	bl	b6552 <_ZN13Adafruit_MQTT7connectEv>
   b6042:	e7ef      	b.n	b6024 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
        if( connected() )
   b6044:	6823      	ldr	r3, [r4, #0]
   b6046:	4620      	mov	r0, r4
   b6048:	689b      	ldr	r3, [r3, #8]
}
   b604a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if( connected() )
   b604e:	4718      	bx	r3
}
   b6050:	bd70      	pop	{r4, r5, r6, pc}

000b6052 <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   b6052:	b513      	push	{r0, r1, r4, lr}
   b6054:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   b6056:	4608      	mov	r0, r1
   b6058:	9101      	str	r1, [sp, #4]
   b605a:	f004 fa61 	bl	ba520 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   b605e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   b6062:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   b6064:	7060      	strb	r0, [r4, #1]
   b6066:	1ca3      	adds	r3, r4, #2
  strncpy((char *)p, s, len);
   b6068:	b284      	uxth	r4, r0
   b606a:	9901      	ldr	r1, [sp, #4]
   b606c:	4622      	mov	r2, r4
   b606e:	4618      	mov	r0, r3
   b6070:	f004 fa94 	bl	ba59c <strncpy>
  return p+len;
}
   b6074:	4420      	add	r0, r4
   b6076:	b002      	add	sp, #8
   b6078:	bd10      	pop	{r4, pc}
	...

000b607c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   b607c:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   b607e:	8102      	strh	r2, [r0, #8]
  clientid = "";
   b6080:	4a0a      	ldr	r2, [pc, #40]	; (b60ac <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   b6082:	4d0b      	ldr	r5, [pc, #44]	; (b60b0 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   b6084:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   b6088:	9b03      	ldr	r3, [sp, #12]
   b608a:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   b608c:	2300      	movs	r3, #0
  servername = server;
   b608e:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   b6092:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   b6096:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   b609a:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   b609e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   b60a2:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   b60a4:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   b60a8:	bd30      	pop	{r4, r5, pc}
   b60aa:	bf00      	nop
   b60ac:	000bc440 	.word	0x000bc440
   b60b0:	000bc964 	.word	0x000bc964

000b60b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b60b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b60b8:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   b60ba:	6802      	ldr	r2, [r0, #0]
   b60bc:	b21b      	sxth	r3, r3
   b60be:	6997      	ldr	r7, [r2, #24]
   b60c0:	9301      	str	r3, [sp, #4]
   b60c2:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b60c4:	4605      	mov	r5, r0
   b60c6:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   b60c8:	47b8      	blx	r7
  if (rlen != 1) return 0;
   b60ca:	b2c7      	uxtb	r7, r0
   b60cc:	2f01      	cmp	r7, #1
   b60ce:	9b01      	ldr	r3, [sp, #4]
   b60d0:	d003      	beq.n	b60da <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   b60d2:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   b60d4:	b003      	add	sp, #12
   b60d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   b60da:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   b60de:	f104 0a05 	add.w	sl, r4, #5
  uint32_t value = 0;
   b60e2:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   b60e6:	682a      	ldr	r2, [r5, #0]
   b60e8:	9301      	str	r3, [sp, #4]
   b60ea:	f8d2 b018 	ldr.w	fp, [r2, #24]
   b60ee:	4641      	mov	r1, r8
   b60f0:	2201      	movs	r2, #1
   b60f2:	4628      	mov	r0, r5
   b60f4:	47d8      	blx	fp
    if (rlen != 1) return 0;
   b60f6:	b2c0      	uxtb	r0, r0
   b60f8:	2801      	cmp	r0, #1
   b60fa:	d1ea      	bne.n	b60d2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   b60fc:	f818 2b01 	ldrb.w	r2, [r8], #1
    uint32_t intermediate = encodedByte & 0x7F;
   b6100:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    if (multiplier > (128UL*128UL*128UL)) {
   b6104:	45c2      	cmp	sl, r8
    value += intermediate;
   b6106:	fb01 9907 	mla	r9, r1, r7, r9
    multiplier *= 128;
   b610a:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   b610e:	d0e0      	beq.n	b60d2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
  } while (encodedByte & 0x80);
   b6110:	f012 0f80 	tst.w	r2, #128	; 0x80
   b6114:	9b01      	ldr	r3, [sp, #4]
   b6116:	d1e6      	bne.n	b60e6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b6118:	eba8 0404 	sub.w	r4, r8, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b611c:	b2a7      	uxth	r7, r4
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b611e:	1b34      	subs	r4, r6, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b6120:	682a      	ldr	r2, [r5, #0]
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b6122:	3c01      	subs	r4, #1
   b6124:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b6126:	f8d2 a018 	ldr.w	sl, [r2, #24]
   b612a:	bf3d      	ittte	cc
   b612c:	f106 32ff 	addcc.w	r2, r6, #4294967295
   b6130:	1bd2      	subcc	r2, r2, r7
   b6132:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   b6134:	fa1f f289 	uxthcs.w	r2, r9
   b6138:	4641      	mov	r1, r8
   b613a:	4628      	mov	r0, r5
   b613c:	47d0      	blx	sl
   b613e:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   b6140:	4438      	add	r0, r7
   b6142:	b280      	uxth	r0, r0
   b6144:	e7c6      	b.n	b60d4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
	...

000b6148 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b6148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   b614c:	f8df 8030 	ldr.w	r8, [pc, #48]	; b6180 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b6150:	4605      	mov	r5, r0
   b6152:	460c      	mov	r4, r1
   b6154:	4616      	mov	r6, r2
   b6156:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b6158:	463b      	mov	r3, r7
   b615a:	2296      	movs	r2, #150	; 0x96
   b615c:	4621      	mov	r1, r4
   b615e:	4628      	mov	r0, r5
   b6160:	f7ff ffa8 	bl	b60b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   b6164:	b148      	cbz	r0, b617a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   b6166:	7823      	ldrb	r3, [r4, #0]
   b6168:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   b616c:	d005      	beq.n	b617a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   b616e:	f002 f9b5 	bl	b84dc <_Z16_fetch_usbserialv>
   b6172:	4641      	mov	r1, r8
   b6174:	f001 fdef 	bl	b7d56 <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b6178:	e7ee      	b.n	b6158 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   b617a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b617e:	bf00      	nop
   b6180:	000bc774 	.word	0x000bc774

000b6184 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   switch (code) {
   b6184:	3102      	adds	r1, #2
   b6186:	b2c9      	uxtb	r1, r1
   b6188:	2909      	cmp	r1, #9
   b618a:	bf9a      	itte	ls
   b618c:	4b02      	ldrls	r3, [pc, #8]	; (b6198 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   b618e:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   b6192:	4802      	ldrhi	r0, [pc, #8]	; (b619c <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   b6194:	4770      	bx	lr
   b6196:	bf00      	nop
   b6198:	000bc980 	.word	0x000bc980
   b619c:	000bc785 	.word	0x000bc785

000b61a0 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   b61a0:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   b61a2:	23e0      	movs	r3, #224	; 0xe0
   b61a4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  uint8_t len = disconnectPacket(buffer);
   b61a8:	4601      	mov	r1, r0
  packet[1] = 0;
   b61aa:	2300      	movs	r3, #0
   b61ac:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
  if (! sendPacket(buffer, len))
   b61b0:	f851 3b22 	ldr.w	r3, [r1], #34
bool Adafruit_MQTT::disconnect() {
   b61b4:	4604      	mov	r4, r0
  if (! sendPacket(buffer, len))
   b61b6:	695b      	ldr	r3, [r3, #20]
   b61b8:	2202      	movs	r2, #2
   b61ba:	4798      	blx	r3
  return disconnectServer();
   b61bc:	6823      	ldr	r3, [r4, #0]
   b61be:	4620      	mov	r0, r4
   b61c0:	691b      	ldr	r3, [r3, #16]
}
   b61c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return disconnectServer();
   b61c6:	4718      	bx	r3

000b61c8 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b61c8:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   b61cc:	b530      	push	{r4, r5, lr}
   b61ce:	4613      	mov	r3, r2
   b61d0:	f100 04d0 	add.w	r4, r0, #208	; 0xd0
    if (subscriptions[i] == sub) {
   b61d4:	f853 5b04 	ldr.w	r5, [r3], #4
   b61d8:	428d      	cmp	r5, r1
   b61da:	d009      	beq.n	b61f0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x28>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b61dc:	42a3      	cmp	r3, r4
   b61de:	d1f9      	bne.n	b61d4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   b61e0:	2300      	movs	r3, #0
      if (subscriptions[i] == 0) {
   b61e2:	f852 4b04 	ldr.w	r4, [r2], #4
   b61e6:	b92c      	cbnz	r4, b61f4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2c>
        subscriptions[i] = sub;
   b61e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   b61ec:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
      return true;
   b61f0:	2001      	movs	r0, #1
   b61f2:	e003      	b.n	b61fc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b61f4:	3301      	adds	r3, #1
   b61f6:	2b05      	cmp	r3, #5
   b61f8:	d1f3      	bne.n	b61e2 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
  return false;
   b61fa:	2000      	movs	r0, #0
}
   b61fc:	bd30      	pop	{r4, r5, pc}

000b61fe <_ZN13Adafruit_MQTT16readSubscriptionEs>:
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b61fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b6202:	f100 0922 	add.w	r9, r0, #34	; 0x22
   b6206:	b28b      	uxth	r3, r1
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b6208:	b085      	sub	sp, #20
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b620a:	2296      	movs	r2, #150	; 0x96
   b620c:	4649      	mov	r1, r9
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b620e:	4605      	mov	r5, r0
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b6210:	f7ff ff50 	bl	b60b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   b6214:	4606      	mov	r6, r0
   b6216:	b1f0      	cbz	r0, b6256 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x58>
  topiclen = buffer[3];
   b6218:	f895 7025 	ldrb.w	r7, [r5, #37]	; 0x25
   b621c:	9700      	str	r7, [sp, #0]
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b621e:	f105 0abc 	add.w	sl, r5, #188	; 0xbc
  topiclen = buffer[3];
   b6222:	f04f 0800 	mov.w	r8, #0
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   b6226:	f105 0b26 	add.w	fp, r5, #38	; 0x26
    if (subscriptions[i]) {
   b622a:	f85a 4b04 	ldr.w	r4, [sl], #4
   b622e:	b16c      	cbz	r4, b624c <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strlen(subscriptions[i]->topic) != topiclen)
   b6230:	6821      	ldr	r1, [r4, #0]
   b6232:	9101      	str	r1, [sp, #4]
   b6234:	4608      	mov	r0, r1
   b6236:	f004 f973 	bl	ba520 <strlen>
   b623a:	42b8      	cmp	r0, r7
   b623c:	d106      	bne.n	b624c <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   b623e:	9901      	ldr	r1, [sp, #4]
   b6240:	463a      	mov	r2, r7
   b6242:	4658      	mov	r0, fp
   b6244:	f004 f974 	bl	ba530 <strncasecmp>
   b6248:	2800      	cmp	r0, #0
   b624a:	d048      	beq.n	b62de <_ZN13Adafruit_MQTT16readSubscriptionEs+0xe0>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b624c:	f108 0801 	add.w	r8, r8, #1
   b6250:	f1b8 0f05 	cmp.w	r8, #5
   b6254:	d1e9      	bne.n	b622a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2c>
    return NULL;  // No data available, just quit.
   b6256:	2000      	movs	r0, #0
   b6258:	e03e      	b.n	b62d8 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xda>
    packetid = buffer[topiclen+4];
   b625a:	19ea      	adds	r2, r5, r7
   b625c:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
    packetid |= buffer[topiclen+5];
   b6260:	f892 a027 	ldrb.w	sl, [r2, #39]	; 0x27
   b6264:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   b6268:	2214      	movs	r2, #20
   b626a:	2100      	movs	r1, #0
   b626c:	1d60      	adds	r0, r4, #5
   b626e:	f004 f8d1 	bl	ba414 <memset>
  datalen = len - topiclen - packet_id_len - 4;
   b6272:	9b00      	ldr	r3, [sp, #0]
   b6274:	f5c3 447f 	rsb	r4, r3, #65280	; 0xff00
   b6278:	34fc      	adds	r4, #252	; 0xfc
   b627a:	4426      	add	r6, r4
   b627c:	eb05 0888 	add.w	r8, r5, r8, lsl #2
   b6280:	eba6 060b 	sub.w	r6, r6, fp
   b6284:	b2b6      	uxth	r6, r6
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   b6286:	2e15      	cmp	r6, #21
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   b6288:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
   b628c:	f107 0104 	add.w	r1, r7, #4
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   b6290:	bf28      	it	cs
   b6292:	2613      	movcs	r6, #19
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   b6294:	4459      	add	r1, fp
   b6296:	4632      	mov	r2, r6
   b6298:	4449      	add	r1, r9
   b629a:	3005      	adds	r0, #5
   b629c:	f004 f8a0 	bl	ba3e0 <memmove>
  subscriptions[i]->datalen = datalen;
   b62a0:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
   b62a4:	835e      	strh	r6, [r3, #26]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   b62a6:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   b62aa:	f003 0306 	and.w	r3, r3, #6
   b62ae:	2b02      	cmp	r3, #2
   b62b0:	d110      	bne.n	b62d4 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xd6>
  packet[1] = 2;
   b62b2:	f88d 300d 	strb.w	r3, [sp, #13]
  packet[2] = packetid >> 8;
   b62b6:	ea4f 231a 	mov.w	r3, sl, lsr #8
   b62ba:	f88d 300e 	strb.w	r3, [sp, #14]
    if (!sendPacket(ackpacket, len))
   b62be:	682b      	ldr	r3, [r5, #0]
  packet[3] = packetid;
   b62c0:	f88d a00f 	strb.w	sl, [sp, #15]
  packet[0] = MQTT_CTRL_PUBACK << 4;
   b62c4:	2240      	movs	r2, #64	; 0x40
   b62c6:	f88d 200c 	strb.w	r2, [sp, #12]
    if (!sendPacket(ackpacket, len))
   b62ca:	695b      	ldr	r3, [r3, #20]
   b62cc:	2204      	movs	r2, #4
   b62ce:	a903      	add	r1, sp, #12
   b62d0:	4628      	mov	r0, r5
   b62d2:	4798      	blx	r3
  return subscriptions[i];
   b62d4:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
}
   b62d8:	b005      	add	sp, #20
   b62da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((buffer[0] & 0x6) == 0x2) {
   b62de:	f895 b022 	ldrb.w	fp, [r5, #34]	; 0x22
   b62e2:	f00b 0b06 	and.w	fp, fp, #6
   b62e6:	f1bb 0f02 	cmp.w	fp, #2
   b62ea:	d0b6      	beq.n	b625a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x5c>
  uint16_t packetid=0;
   b62ec:	4682      	mov	sl, r0
  uint8_t packet_id_len = 0;
   b62ee:	4683      	mov	fp, r0
   b62f0:	e7ba      	b.n	b6268 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x6a>

000b62f2 <_ZN13Adafruit_MQTT4pingEh>:
bool Adafruit_MQTT::ping(uint8_t num) {
   b62f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b62f6:	4604      	mov	r4, r0
   b62f8:	460d      	mov	r5, r1
   b62fa:	f04f 0800 	mov.w	r8, #0
    uint8_t len = pingPacket(buffer);
   b62fe:	f100 0722 	add.w	r7, r0, #34	; 0x22
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   b6302:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  while (num--) {
   b6306:	b1e5      	cbz	r5, b6342 <_ZN13Adafruit_MQTT4pingEh+0x50>
    if (!sendPacket(buffer, len))
   b6308:	6823      	ldr	r3, [r4, #0]
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   b630a:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   b630e:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
    if (!sendPacket(buffer, len))
   b6312:	695b      	ldr	r3, [r3, #20]
   b6314:	2202      	movs	r2, #2
   b6316:	4639      	mov	r1, r7
   b6318:	4620      	mov	r0, r4
   b631a:	4798      	blx	r3
   b631c:	4606      	mov	r6, r0
   b631e:	b168      	cbz	r0, b633c <_ZN13Adafruit_MQTT4pingEh+0x4a>
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   b6320:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b6324:	220d      	movs	r2, #13
   b6326:	4639      	mov	r1, r7
   b6328:	4620      	mov	r0, r4
   b632a:	f7ff ff0d 	bl	b6148 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   b632e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b6332:	2bd0      	cmp	r3, #208	; 0xd0
   b6334:	d102      	bne.n	b633c <_ZN13Adafruit_MQTT4pingEh+0x4a>
}
   b6336:	4630      	mov	r0, r6
   b6338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b633c:	3d01      	subs	r5, #1
   b633e:	b2ed      	uxtb	r5, r5
   b6340:	e7e1      	b.n	b6306 <_ZN13Adafruit_MQTT4pingEh+0x14>
  return false;
   b6342:	462e      	mov	r6, r5
   b6344:	e7f7      	b.n	b6336 <_ZN13Adafruit_MQTT4pingEh+0x44>
	...

000b6348 <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b6348:	b538      	push	{r3, r4, r5, lr}
   b634a:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   b634c:	4608      	mov	r0, r1
   b634e:	2310      	movs	r3, #16
   b6350:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b6354:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   b6356:	4929      	ldr	r1, [pc, #164]	; (b63fc <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   b6358:	f7ff fe7b 	bl	b6052 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   b635c:	2304      	movs	r3, #4
   b635e:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   b6360:	2302      	movs	r3, #2
   b6362:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b6364:	69ab      	ldr	r3, [r5, #24]
   b6366:	b18b      	cbz	r3, b638c <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   b6368:	781b      	ldrb	r3, [r3, #0]
   b636a:	b17b      	cbz	r3, b638c <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   b636c:	2306      	movs	r3, #6
   b636e:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   b6370:	f895 3020 	ldrb.w	r3, [r5, #32]
   b6374:	2b01      	cmp	r3, #1
   b6376:	d139      	bne.n	b63ec <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   b6378:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   b637a:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   b637c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   b6380:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   b6382:	bf02      	ittt	eq
   b6384:	7843      	ldrbeq	r3, [r0, #1]
   b6386:	f043 0320 	orreq.w	r3, r3, #32
   b638a:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   b638c:	692b      	ldr	r3, [r5, #16]
   b638e:	781b      	ldrb	r3, [r3, #0]
   b6390:	b11b      	cbz	r3, b639a <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   b6392:	7843      	ldrb	r3, [r0, #1]
   b6394:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b6398:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   b639a:	696b      	ldr	r3, [r5, #20]
   b639c:	781b      	ldrb	r3, [r3, #0]
   b639e:	b11b      	cbz	r3, b63a8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   b63a0:	7843      	ldrb	r3, [r0, #1]
   b63a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   b63a6:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   b63a8:	2301      	movs	r3, #1
   b63aa:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   b63ac:	232c      	movs	r3, #44	; 0x2c
   b63ae:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   b63b0:	68e9      	ldr	r1, [r5, #12]
   b63b2:	780b      	ldrb	r3, [r1, #0]
   b63b4:	b1f3      	cbz	r3, b63f4 <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   b63b6:	3004      	adds	r0, #4
   b63b8:	f7ff fe4b 	bl	b6052 <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b63bc:	69a9      	ldr	r1, [r5, #24]
   b63be:	b131      	cbz	r1, b63ce <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   b63c0:	780b      	ldrb	r3, [r1, #0]
   b63c2:	b123      	cbz	r3, b63ce <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   b63c4:	f7ff fe45 	bl	b6052 <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   b63c8:	69e9      	ldr	r1, [r5, #28]
   b63ca:	f7ff fe42 	bl	b6052 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   b63ce:	6929      	ldr	r1, [r5, #16]
   b63d0:	780b      	ldrb	r3, [r1, #0]
   b63d2:	b10b      	cbz	r3, b63d8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   b63d4:	f7ff fe3d 	bl	b6052 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   b63d8:	6969      	ldr	r1, [r5, #20]
   b63da:	780b      	ldrb	r3, [r1, #0]
   b63dc:	b10b      	cbz	r3, b63e2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   b63de:	f7ff fe38 	bl	b6052 <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   b63e2:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   b63e4:	b2c0      	uxtb	r0, r0
   b63e6:	1e83      	subs	r3, r0, #2
   b63e8:	7063      	strb	r3, [r4, #1]
}
   b63ea:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   b63ec:	2b02      	cmp	r3, #2
   b63ee:	d1c5      	bne.n	b637c <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   b63f0:	231e      	movs	r3, #30
   b63f2:	e7c2      	b.n	b637a <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   b63f4:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   b63f6:	7143      	strb	r3, [r0, #5]
      p++;
   b63f8:	3006      	adds	r0, #6
   b63fa:	e7df      	b.n	b63bc <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   b63fc:	000bc793 	.word	0x000bc793

000b6400 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b6400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6404:	4605      	mov	r5, r0
  len += strlen(topic); // topic length
   b6406:	4610      	mov	r0, r2
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b6408:	460e      	mov	r6, r1
   b640a:	4698      	mov	r8, r3
  len += strlen(topic); // topic length
   b640c:	9201      	str	r2, [sp, #4]
   b640e:	f004 f887 	bl	ba520 <strlen>
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b6412:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b6416:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  if(qos > 0) { 
   b641a:	9901      	ldr	r1, [sp, #4]
  len += strlen(topic); // topic length
   b641c:	b284      	uxth	r4, r0
  if(qos > 0) { 
   b641e:	f1b9 0f00 	cmp.w	r9, #0
   b6422:	d135      	bne.n	b6490 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x90>
  len += strlen(topic); // topic length
   b6424:	3402      	adds	r4, #2
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b6426:	ea4f 0349 	mov.w	r3, r9, lsl #1
   b642a:	4630      	mov	r0, r6
    len += 2; // qos packet id
   b642c:	b2a4      	uxth	r4, r4
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b642e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  len += bLen; // payload length
   b6432:	443c      	add	r4, r7
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b6434:	f800 3b01 	strb.w	r3, [r0], #1
  len += bLen; // payload length
   b6438:	b2a4      	uxth	r4, r4
    uint8_t encodedByte = len % 128;
   b643a:	4622      	mov	r2, r4
   b643c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    if ( len > 0 ) {
   b6440:	2a7f      	cmp	r2, #127	; 0x7f
      encodedByte |= 0x80;
   b6442:	bf88      	it	hi
   b6444:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
  } while ( len > 0 );
   b6448:	2a7f      	cmp	r2, #127	; 0x7f
    p[0] = encodedByte;
   b644a:	f800 3b01 	strb.w	r3, [r0], #1
    len /= 128;
   b644e:	ea4f 14d4 	mov.w	r4, r4, lsr #7
  } while ( len > 0 );
   b6452:	d8f2      	bhi.n	b643a <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3a>
  p = stringprint(p, topic);
   b6454:	f7ff fdfd 	bl	b6052 <_ZL11stringprintPhPKct.constprop.0>
   b6458:	4603      	mov	r3, r0
  if(qos > 0) {
   b645a:	f1b9 0f00 	cmp.w	r9, #0
   b645e:	d00c      	beq.n	b647a <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x7a>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   b6460:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b6464:	0a12      	lsrs	r2, r2, #8
   b6466:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   b6468:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b646c:	7042      	strb	r2, [r0, #1]
    packet_id_counter++;
   b646e:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b6472:	3201      	adds	r2, #1
    p+=2;
   b6474:	3302      	adds	r3, #2
    packet_id_counter++;
   b6476:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  memmove(p, data, bLen);
   b647a:	463a      	mov	r2, r7
   b647c:	4641      	mov	r1, r8
   b647e:	4618      	mov	r0, r3
   b6480:	f003 ffae 	bl	ba3e0 <memmove>
  p+= bLen;
   b6484:	4438      	add	r0, r7
  len = p - packet;
   b6486:	1b80      	subs	r0, r0, r6
}
   b6488:	b280      	uxth	r0, r0
   b648a:	b003      	add	sp, #12
   b648c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    len += 2; // qos packet id
   b6490:	3404      	adds	r4, #4
   b6492:	e7c8      	b.n	b6426 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>

000b6494 <_ZN13Adafruit_MQTT7publishEPKcPhth>:
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b6494:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6496:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b649a:	f100 0522 	add.w	r5, r0, #34	; 0x22
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b649e:	4604      	mov	r4, r0
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b64a0:	e9cd 3600 	strd	r3, r6, [sp]
   b64a4:	4613      	mov	r3, r2
   b64a6:	460a      	mov	r2, r1
   b64a8:	4629      	mov	r1, r5
   b64aa:	f7ff ffa9 	bl	b6400 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   b64ae:	6823      	ldr	r3, [r4, #0]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b64b0:	4602      	mov	r2, r0
  if (!sendPacket(buffer, len))
   b64b2:	695b      	ldr	r3, [r3, #20]
   b64b4:	4629      	mov	r1, r5
   b64b6:	4620      	mov	r0, r4
   b64b8:	4798      	blx	r3
   b64ba:	b910      	cbnz	r0, b64c2 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2e>
    return false;
   b64bc:	2000      	movs	r0, #0
}
   b64be:	b002      	add	sp, #8
   b64c0:	bd70      	pop	{r4, r5, r6, pc}
  if (qos > 0) {
   b64c2:	2e00      	cmp	r6, #0
   b64c4:	d0fb      	beq.n	b64be <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   b64c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b64ca:	2296      	movs	r2, #150	; 0x96
   b64cc:	4629      	mov	r1, r5
   b64ce:	4620      	mov	r0, r4
   b64d0:	f7ff fdf0 	bl	b60b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    if (len != 4)
   b64d4:	2804      	cmp	r0, #4
   b64d6:	d1f1      	bne.n	b64bc <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   b64d8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b64dc:	091b      	lsrs	r3, r3, #4
   b64de:	2b04      	cmp	r3, #4
   b64e0:	d1ec      	bne.n	b64bc <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    packnum |= buffer[3];
   b64e2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if (packnum != packet_id_counter)
   b64e4:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   b64e8:	ba5b      	rev16	r3, r3
    packnum++;
   b64ea:	3301      	adds	r3, #1
    if (packnum != packet_id_counter)
   b64ec:	b29b      	uxth	r3, r3
   b64ee:	1ac3      	subs	r3, r0, r3
   b64f0:	4258      	negs	r0, r3
   b64f2:	4158      	adcs	r0, r3
   b64f4:	e7e3      	b.n	b64be <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>

000b64f6 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b64f6:	b530      	push	{r4, r5, lr}
   b64f8:	b085      	sub	sp, #20
   b64fa:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b64fc:	4610      	mov	r0, r2
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b64fe:	461d      	mov	r5, r3
   b6500:	9103      	str	r1, [sp, #12]
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b6502:	9202      	str	r2, [sp, #8]
   b6504:	f004 f80c 	bl	ba520 <strlen>
   b6508:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b650c:	b283      	uxth	r3, r0
   b650e:	9500      	str	r5, [sp, #0]
   b6510:	4620      	mov	r0, r4
   b6512:	f7ff ffbf 	bl	b6494 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   b6516:	b005      	add	sp, #20
   b6518:	bd30      	pop	{r4, r5, pc}

000b651a <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   b651a:	b538      	push	{r3, r4, r5, lr}
   b651c:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   b651e:	2382      	movs	r3, #130	; 0x82
   b6520:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   b6522:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b6526:	0a1b      	lsrs	r3, r3, #8
   b6528:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   b652a:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b652e:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   b6530:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   b6534:	460c      	mov	r4, r1
  packet_id_counter++;
   b6536:	3301      	adds	r3, #1
   b6538:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   b653c:	4611      	mov	r1, r2
   b653e:	1d20      	adds	r0, r4, #4
   b6540:	f7ff fd87 	bl	b6052 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   b6544:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   b6548:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   b654a:	b2c0      	uxtb	r0, r0
   b654c:	1e83      	subs	r3, r0, #2
   b654e:	7063      	strb	r3, [r4, #1]
}
   b6550:	bd38      	pop	{r3, r4, r5, pc}

000b6552 <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   b6552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   b6556:	6803      	ldr	r3, [r0, #0]
   b6558:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   b655a:	4604      	mov	r4, r0
  if (!connectServer())
   b655c:	4798      	blx	r3
   b655e:	2800      	cmp	r0, #0
   b6560:	d04b      	beq.n	b65fa <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   b6562:	f104 0522 	add.w	r5, r4, #34	; 0x22
   b6566:	4629      	mov	r1, r5
   b6568:	4620      	mov	r0, r4
   b656a:	f7ff feed 	bl	b6348 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   b656e:	6823      	ldr	r3, [r4, #0]
   b6570:	b282      	uxth	r2, r0
   b6572:	695b      	ldr	r3, [r3, #20]
   b6574:	4629      	mov	r1, r5
   b6576:	4620      	mov	r0, r4
   b6578:	4798      	blx	r3
   b657a:	2800      	cmp	r0, #0
   b657c:	d03d      	beq.n	b65fa <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   b657e:	f241 7370 	movw	r3, #6000	; 0x1770
   b6582:	2296      	movs	r2, #150	; 0x96
   b6584:	4629      	mov	r1, r5
   b6586:	4620      	mov	r0, r4
   b6588:	f7ff fd94 	bl	b60b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   b658c:	b2c0      	uxtb	r0, r0
   b658e:	2804      	cmp	r0, #4
   b6590:	d133      	bne.n	b65fa <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   b6592:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b6594:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   b6598:	d12f      	bne.n	b65fa <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   b659a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   b659e:	b110      	cbz	r0, b65a6 <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   b65a0:	b240      	sxtb	r0, r0
}
   b65a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b65a6:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   b65aa:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   b65ae:	f857 3b04 	ldr.w	r3, [r7], #4
   b65b2:	b1f3      	cbz	r3, b65f2 <_ZN13Adafruit_MQTT7connectEv+0xa0>
   b65b4:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   b65b6:	f857 2c04 	ldr.w	r2, [r7, #-4]
   b65ba:	4629      	mov	r1, r5
   b65bc:	7913      	ldrb	r3, [r2, #4]
   b65be:	6812      	ldr	r2, [r2, #0]
   b65c0:	4620      	mov	r0, r4
   b65c2:	f7ff ffaa 	bl	b651a <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   b65c6:	6823      	ldr	r3, [r4, #0]
   b65c8:	b282      	uxth	r2, r0
   b65ca:	695b      	ldr	r3, [r3, #20]
   b65cc:	4629      	mov	r1, r5
   b65ce:	4620      	mov	r0, r4
   b65d0:	4798      	blx	r3
   b65d2:	b190      	cbz	r0, b65fa <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   b65d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b65d8:	2209      	movs	r2, #9
   b65da:	4629      	mov	r1, r5
   b65dc:	4620      	mov	r0, r4
   b65de:	f7ff fdb3 	bl	b6148 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   b65e2:	b930      	cbnz	r0, b65f2 <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   b65e4:	3e01      	subs	r6, #1
   b65e6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b65ea:	d1e4      	bne.n	b65b6 <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   b65ec:	f06f 0001 	mvn.w	r0, #1
   b65f0:	e7d7      	b.n	b65a2 <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   b65f2:	45b8      	cmp	r8, r7
   b65f4:	d1db      	bne.n	b65ae <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   b65f6:	2000      	movs	r0, #0
   b65f8:	e7d3      	b.n	b65a2 <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   b65fa:	f04f 30ff 	mov.w	r0, #4294967295
   b65fe:	e7d0      	b.n	b65a2 <_ZN13Adafruit_MQTT7connectEv+0x50>

000b6600 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   b6600:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   b6602:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   b6606:	7203      	strb	r3, [r0, #8]
}
   b6608:	bd10      	pop	{r4, pc}

000b660a <_ZN21Adafruit_MQTT_Publish7publishEi>:

bool Adafruit_MQTT_Publish::publish(int i) {
   b660a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b660c:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   b660e:	220a      	movs	r2, #10
bool Adafruit_MQTT_Publish::publish(int i) {
   b6610:	4608      	mov	r0, r1
  ltoa(i, payload, 10);
   b6612:	a901      	add	r1, sp, #4
   b6614:	f001 fa60 	bl	b7ad8 <ltoa>
  return mqtt->publish(topic, payload, qos);
   b6618:	e9d4 0100 	ldrd	r0, r1, [r4]
   b661c:	7a23      	ldrb	r3, [r4, #8]
   b661e:	aa01      	add	r2, sp, #4
   b6620:	f7ff ff69 	bl	b64f6 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   b6624:	b004      	add	sp, #16
   b6626:	bd10      	pop	{r4, pc}

000b6628 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   b6628:	b5d0      	push	{r4, r6, r7, lr}
   b662a:	ec57 6b10 	vmov	r6, r7, d0
   b662e:	b090      	sub	sp, #64	; 0x40
   b6630:	4604      	mov	r4, r0
   b6632:	460b      	mov	r3, r1
  sprintf(fmt, "%%%d.%df", width, prec);
   b6634:	2200      	movs	r2, #0
   b6636:	4909      	ldr	r1, [pc, #36]	; (b665c <_ZN21Adafruit_MQTT_Publish7publishEdh+0x34>)
   b6638:	4668      	mov	r0, sp
   b663a:	f001 f87f 	bl	b773c <sprintf>
  sprintf(sout, fmt, val);
   b663e:	4632      	mov	r2, r6
   b6640:	463b      	mov	r3, r7
   b6642:	4669      	mov	r1, sp
   b6644:	a805      	add	r0, sp, #20
   b6646:	f001 f879 	bl	b773c <sprintf>
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   b664a:	e9d4 0100 	ldrd	r0, r1, [r4]
   b664e:	7a23      	ldrb	r3, [r4, #8]
   b6650:	aa05      	add	r2, sp, #20
   b6652:	f7ff ff50 	bl	b64f6 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   b6656:	b010      	add	sp, #64	; 0x40
   b6658:	bdd0      	pop	{r4, r6, r7, pc}
   b665a:	bf00      	nop
   b665c:	000bc798 	.word	0x000bc798

000b6660 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   b6660:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   b6662:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   b6664:	2300      	movs	r3, #0
  callback_uint32t = 0;
  callback_buffer = 0;
  callback_double = 0;
   b6666:	e9c0 3308 	strd	r3, r3, [r0, #32]
  callback_io = 0;
   b666a:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  mqtt = mqttserver;
   b666e:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   b6670:	6002      	str	r2, [r0, #0]
  datalen = 0;
   b6672:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   b6674:	61c3      	str	r3, [r0, #28]
  io_feed = 0;
   b6676:	6303      	str	r3, [r0, #48]	; 0x30
}
   b6678:	bd10      	pop	{r4, pc}
	...

000b667c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b667c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b667e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6680:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b6684:	2d02      	cmp	r5, #2
   b6686:	d069      	beq.n	b675c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b6688:	2d03      	cmp	r5, #3
   b668a:	f000 8099 	beq.w	b67c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b668e:	2d01      	cmp	r5, #1
   b6690:	d16c      	bne.n	b676c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b6692:	8905      	ldrh	r5, [r0, #8]
   b6694:	43d2      	mvns	r2, r2
   b6696:	442a      	add	r2, r5
   b6698:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b669a:	2a00      	cmp	r2, #0
   b669c:	db5d      	blt.n	b675a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b669e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b66a2:	4295      	cmp	r5, r2
   b66a4:	dd59      	ble.n	b675a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b66a6:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b66a8:	bfbe      	ittt	lt
   b66aa:	185b      	addlt	r3, r3, r1
   b66ac:	b21b      	sxthlt	r3, r3
    __y = 0;
   b66ae:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b66b0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b66b4:	18cd      	adds	r5, r1, r3
   b66b6:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b66b8:	bfc4      	itt	gt
   b66ba:	1a43      	subgt	r3, r0, r1
   b66bc:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b66be:	2b00      	cmp	r3, #0
   b66c0:	dd4b      	ble.n	b675a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b66c2:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b66c6:	f8df c120 	ldr.w	ip, [pc, #288]	; b67e8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b66ca:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b66ce:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b66d2:	b2db      	uxtb	r3, r3
  pBuf += x;
   b66d4:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b66d8:	d01a      	beq.n	b6710 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b66da:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b66de:	4e40      	ldr	r6, [pc, #256]	; (b67e0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b66e0:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b66e2:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b66e4:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b66e6:	bf3f      	itttt	cc
   b66e8:	eba5 0e03 	subcc.w	lr, r5, r3
   b66ec:	26ff      	movcc	r6, #255	; 0xff
   b66ee:	fa46 f60e 	asrcc.w	r6, r6, lr
   b66f2:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b66f4:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b66f8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b66fa:	bf0c      	ite	eq
   b66fc:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b66fe:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b6700:	42ab      	cmp	r3, r5
   b6702:	f80c 6002 	strb.w	r6, [ip, r2]
   b6706:	d328      	bcc.n	b675a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b6708:	3908      	subs	r1, #8
   b670a:	440b      	add	r3, r1
   b670c:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b670e:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b6710:	2b07      	cmp	r3, #7
   b6712:	d919      	bls.n	b6748 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b6714:	2c01      	cmp	r4, #1
   b6716:	f04f 35ff 	mov.w	r5, #4294967295
   b671a:	bf18      	it	ne
   b671c:	2500      	movne	r5, #0
   b671e:	b2ed      	uxtb	r5, r5
   b6720:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b6724:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b6726:	3a08      	subs	r2, #8
   b6728:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b672a:	2a07      	cmp	r2, #7
      *pBuf = val;
   b672c:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b6730:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b6734:	d8f7      	bhi.n	b6726 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b6736:	f1a3 0208 	sub.w	r2, r3, #8
   b673a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b673e:	3201      	adds	r2, #1
   b6740:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b6744:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b6748:	b13b      	cbz	r3, b675a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b674a:	4a26      	ldr	r2, [pc, #152]	; (b67e4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b674c:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b674e:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b6750:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b6752:	bf0c      	ite	eq
   b6754:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b6756:	4393      	bicne	r3, r2
   b6758:	7003      	strb	r3, [r0, #0]
}
   b675a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b675c:	8945      	ldrh	r5, [r0, #10]
   b675e:	43d2      	mvns	r2, r2
   b6760:	442a      	add	r2, r5
      x -= (w-1);
   b6762:	18cd      	adds	r5, r1, r3
   b6764:	8901      	ldrh	r1, [r0, #8]
   b6766:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b6768:	b212      	sxth	r2, r2
      x -= (w-1);
   b676a:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b676c:	2a00      	cmp	r2, #0
   b676e:	dbf4      	blt.n	b675a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b6770:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b6774:	4295      	cmp	r5, r2
   b6776:	ddf0      	ble.n	b675a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b6778:	2900      	cmp	r1, #0
    w += x;
   b677a:	bfbe      	ittt	lt
   b677c:	185b      	addlt	r3, r3, r1
   b677e:	b21b      	sxthlt	r3, r3
    x = 0;
   b6780:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b6782:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b6786:	18ce      	adds	r6, r1, r3
   b6788:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b678a:	bfc4      	itt	gt
   b678c:	1a6b      	subgt	r3, r5, r1
   b678e:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b6790:	2b00      	cmp	r3, #0
   b6792:	dde2      	ble.n	b675a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b6794:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b6796:	2580      	movs	r5, #128	; 0x80
   b6798:	fb10 1105 	smlabb	r1, r0, r5, r1
   b679c:	4812      	ldr	r0, [pc, #72]	; (b67e8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b679e:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b67a0:	f002 0007 	and.w	r0, r2, #7
   b67a4:	2201      	movs	r2, #1
   b67a6:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b67a8:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b67aa:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b67ac:	440b      	add	r3, r1
   b67ae:	d10c      	bne.n	b67ca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b67b0:	428b      	cmp	r3, r1
   b67b2:	d0d2      	beq.n	b675a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b67b4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b67b8:	4310      	orrs	r0, r2
   b67ba:	f801 0c01 	strb.w	r0, [r1, #-1]
   b67be:	e7f7      	b.n	b67b0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b67c0:	18cd      	adds	r5, r1, r3
   b67c2:	8941      	ldrh	r1, [r0, #10]
   b67c4:	1b49      	subs	r1, r1, r5
   b67c6:	b209      	sxth	r1, r1
      break;
   b67c8:	e767      	b.n	b669a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b67ca:	43d2      	mvns	r2, r2
   b67cc:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b67ce:	428b      	cmp	r3, r1
   b67d0:	d0c3      	beq.n	b675a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b67d2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b67d6:	4010      	ands	r0, r2
   b67d8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b67dc:	e7f7      	b.n	b67ce <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b67de:	bf00      	nop
   b67e0:	2003dc24 	.word	0x2003dc24
   b67e4:	2003dc1c 	.word	0x2003dc1c
   b67e8:	2003dc2c 	.word	0x2003dc2c

000b67ec <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b67ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b67ee:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b67f0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b67f4:	2d02      	cmp	r5, #2
   b67f6:	d034      	beq.n	b6862 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b67f8:	2d03      	cmp	r5, #3
   b67fa:	f000 809b 	beq.w	b6934 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b67fe:	2d01      	cmp	r5, #1
   b6800:	d137      	bne.n	b6872 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b6802:	18d5      	adds	r5, r2, r3
   b6804:	8902      	ldrh	r2, [r0, #8]
   b6806:	1b52      	subs	r2, r2, r5
   b6808:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b680a:	2900      	cmp	r1, #0
   b680c:	f2c0 8091 	blt.w	b6932 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b6810:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b6814:	428d      	cmp	r5, r1
   b6816:	f340 808c 	ble.w	b6932 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b681a:	2a00      	cmp	r2, #0
    w += x;
   b681c:	bfbe      	ittt	lt
   b681e:	189b      	addlt	r3, r3, r2
   b6820:	b21b      	sxthlt	r3, r3
    x = 0;
   b6822:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b6824:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b6828:	18d6      	adds	r6, r2, r3
   b682a:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b682c:	bfc4      	itt	gt
   b682e:	1aab      	subgt	r3, r5, r2
   b6830:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b6832:	2b00      	cmp	r3, #0
   b6834:	dd7d      	ble.n	b6932 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b6836:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b6838:	2580      	movs	r5, #128	; 0x80
   b683a:	fb10 2205 	smlabb	r2, r0, r5, r2
   b683e:	4845      	ldr	r0, [pc, #276]	; (b6954 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b6840:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b6842:	f001 0007 	and.w	r0, r1, #7
   b6846:	2101      	movs	r1, #1
   b6848:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b684a:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b684c:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b684e:	4413      	add	r3, r2
   b6850:	d175      	bne.n	b693e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b6852:	429a      	cmp	r2, r3
   b6854:	d06d      	beq.n	b6932 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b6856:	f812 0b01 	ldrb.w	r0, [r2], #1
   b685a:	4308      	orrs	r0, r1
   b685c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b6860:	e7f7      	b.n	b6852 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b6862:	8905      	ldrh	r5, [r0, #8]
   b6864:	43c9      	mvns	r1, r1
   b6866:	4429      	add	r1, r5
      y -= (h-1);
   b6868:	18d5      	adds	r5, r2, r3
   b686a:	8942      	ldrh	r2, [r0, #10]
   b686c:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b686e:	b209      	sxth	r1, r1
      y -= (h-1);
   b6870:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b6872:	2900      	cmp	r1, #0
   b6874:	db5d      	blt.n	b6932 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b6876:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b687a:	428d      	cmp	r5, r1
   b687c:	dd59      	ble.n	b6932 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b687e:	2a00      	cmp	r2, #0
    __h += __y;
   b6880:	bfbe      	ittt	lt
   b6882:	189b      	addlt	r3, r3, r2
   b6884:	b21b      	sxthlt	r3, r3
    __y = 0;
   b6886:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b6888:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b688c:	18d5      	adds	r5, r2, r3
   b688e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b6890:	bfc4      	itt	gt
   b6892:	1a83      	subgt	r3, r0, r2
   b6894:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b6896:	2b00      	cmp	r3, #0
   b6898:	dd4b      	ble.n	b6932 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b689a:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b689e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b6954 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b68a2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b68a6:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b68aa:	b2db      	uxtb	r3, r3
  pBuf += x;
   b68ac:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b68b0:	d01a      	beq.n	b68e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b68b2:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b68b6:	4e28      	ldr	r6, [pc, #160]	; (b6958 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b68b8:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b68ba:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b68bc:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b68be:	bf3f      	itttt	cc
   b68c0:	eba5 0e03 	subcc.w	lr, r5, r3
   b68c4:	26ff      	movcc	r6, #255	; 0xff
   b68c6:	fa46 f60e 	asrcc.w	r6, r6, lr
   b68ca:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b68cc:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b68d0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b68d2:	bf0c      	ite	eq
   b68d4:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b68d6:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b68d8:	42ab      	cmp	r3, r5
   b68da:	f80c 6001 	strb.w	r6, [ip, r1]
   b68de:	d328      	bcc.n	b6932 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b68e0:	3a08      	subs	r2, #8
   b68e2:	4413      	add	r3, r2
   b68e4:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b68e6:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b68e8:	2b07      	cmp	r3, #7
   b68ea:	d919      	bls.n	b6920 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b68ec:	2c01      	cmp	r4, #1
   b68ee:	f04f 35ff 	mov.w	r5, #4294967295
   b68f2:	bf18      	it	ne
   b68f4:	2500      	movne	r5, #0
   b68f6:	b2ed      	uxtb	r5, r5
   b68f8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b68fc:	461a      	mov	r2, r3
      h -= 8;
   b68fe:	3a08      	subs	r2, #8
   b6900:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b6902:	2a07      	cmp	r2, #7
      *pBuf = val;
   b6904:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b6908:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b690c:	d8f7      	bhi.n	b68fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b690e:	f1a3 0208 	sub.w	r2, r3, #8
   b6912:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b6916:	3201      	adds	r2, #1
   b6918:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b691c:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b6920:	b13b      	cbz	r3, b6932 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b6922:	4a0e      	ldr	r2, [pc, #56]	; (b695c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b6924:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b6926:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b6928:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b692a:	bf0c      	ite	eq
   b692c:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b692e:	4393      	bicne	r3, r2
   b6930:	7003      	strb	r3, [r0, #0]
}
   b6932:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b6934:	8945      	ldrh	r5, [r0, #10]
   b6936:	43c9      	mvns	r1, r1
   b6938:	4429      	add	r1, r5
   b693a:	b209      	sxth	r1, r1
      break;
   b693c:	e765      	b.n	b680a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b693e:	43c9      	mvns	r1, r1
   b6940:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b6942:	429a      	cmp	r2, r3
   b6944:	d0f5      	beq.n	b6932 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b6946:	f812 0b01 	ldrb.w	r0, [r2], #1
   b694a:	4008      	ands	r0, r1
   b694c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b6950:	e7f7      	b.n	b6942 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b6952:	bf00      	nop
   b6954:	2003dc2c 	.word	0x2003dc2c
   b6958:	2003dc24 	.word	0x2003dc24
   b695c:	2003dc1c 	.word	0x2003dc1c

000b6960 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b6960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b6962:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b6964:	4606      	mov	r6, r0
   b6966:	4614      	mov	r4, r2
   b6968:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b696a:	db2d      	blt.n	b69c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b696c:	f000 fbab 	bl	b70c6 <_ZN12Adafruit_GFX5widthEv>
   b6970:	42a8      	cmp	r0, r5
   b6972:	dd29      	ble.n	b69c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b6974:	2c00      	cmp	r4, #0
   b6976:	db27      	blt.n	b69c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b6978:	4630      	mov	r0, r6
   b697a:	f000 fba7 	bl	b70cc <_ZN12Adafruit_GFX6heightEv>
   b697e:	42a0      	cmp	r0, r4
   b6980:	dd22      	ble.n	b69c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b6982:	4630      	mov	r0, r6
   b6984:	f000 fb9d 	bl	b70c2 <_ZN12Adafruit_GFX11getRotationEv>
   b6988:	2802      	cmp	r0, #2
   b698a:	d01e      	beq.n	b69ca <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b698c:	2803      	cmp	r0, #3
   b698e:	d025      	beq.n	b69dc <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b6990:	2801      	cmp	r0, #1
   b6992:	d104      	bne.n	b699e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b6994:	8933      	ldrh	r3, [r6, #8]
   b6996:	43e2      	mvns	r2, r4
   b6998:	441a      	add	r2, r3
    break;
   b699a:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b699c:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b699e:	2c00      	cmp	r4, #0
   b69a0:	4622      	mov	r2, r4
   b69a2:	bfb8      	it	lt
   b69a4:	1de2      	addlt	r2, r4, #7
   b69a6:	10d2      	asrs	r2, r2, #3
   b69a8:	2180      	movs	r1, #128	; 0x80
   b69aa:	fb12 5501 	smlabb	r5, r2, r1, r5
   b69ae:	490e      	ldr	r1, [pc, #56]	; (b69e8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b69b0:	2201      	movs	r2, #1
   b69b2:	f004 0407 	and.w	r4, r4, #7
   b69b6:	574b      	ldrsb	r3, [r1, r5]
   b69b8:	fa02 f404 	lsl.w	r4, r2, r4
   b69bc:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b69be:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b69c0:	bf0c      	ite	eq
   b69c2:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b69c4:	43a3      	bicne	r3, r4
   b69c6:	554b      	strb	r3, [r1, r5]
}
   b69c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b69ca:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b69cc:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b69ce:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b69d0:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b69d2:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b69d4:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b69d6:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b69d8:	b224      	sxth	r4, r4
    break;
   b69da:	e7e0      	b.n	b699e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b69dc:	8973      	ldrh	r3, [r6, #10]
   b69de:	3b01      	subs	r3, #1
   b69e0:	1b5b      	subs	r3, r3, r5
    break;
   b69e2:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b69e4:	b21c      	sxth	r4, r3
    break;
   b69e6:	e7da      	b.n	b699e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b69e8:	2003dc2c 	.word	0x2003dc2c

000b69ec <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b69ec:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b69ee:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b69f0:	4604      	mov	r4, r0
   b69f2:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b69f4:	2180      	movs	r1, #128	; 0x80
   b69f6:	f000 fa8b 	bl	b6f10 <_ZN12Adafruit_GFXC1Ess>
   b69fa:	4b06      	ldr	r3, [pc, #24]	; (b6a14 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b69fc:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b69fe:	23ff      	movs	r3, #255	; 0xff
   b6a00:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b6a04:	7763      	strb	r3, [r4, #29]
   b6a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6a0a:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b6a0c:	f884 5020 	strb.w	r5, [r4, #32]
}
   b6a10:	4620      	mov	r0, r4
   b6a12:	bd38      	pop	{r3, r4, r5, pc}
   b6a14:	000bc9b0 	.word	0x000bc9b0

000b6a18 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b6a18:	4802      	ldr	r0, [pc, #8]	; (b6a24 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b6a1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b6a1e:	2100      	movs	r1, #0
   b6a20:	f003 bcf8 	b.w	ba414 <memset>
   b6a24:	2003dc2c 	.word	0x2003dc2c

000b6a28 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b6a28:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b6a2a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b6a2e:	b143      	cbz	r3, b6a42 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b6a30:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   b6a32:	f7fe fe19 	bl	b5668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6a36:	9901      	ldr	r1, [sp, #4]
}
   b6a38:	b003      	add	sp, #12
   b6a3a:	f85d eb04 	ldr.w	lr, [sp], #4
   b6a3e:	f001 b827 	b.w	b7a90 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b6a42:	460b      	mov	r3, r1
   b6a44:	7f81      	ldrb	r1, [r0, #30]
   b6a46:	7f40      	ldrb	r0, [r0, #29]
   b6a48:	2201      	movs	r2, #1
}
   b6a4a:	b003      	add	sp, #12
   b6a4c:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b6a50:	f002 baca 	b.w	b8fe8 <shiftOut>

000b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b6a54:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b6a56:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b6a5a:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b6a5c:	4604      	mov	r4, r0
   b6a5e:	460d      	mov	r5, r1
  if (sid != -1)
   b6a60:	d01d      	beq.n	b6a9e <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b6a62:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b6a66:	2101      	movs	r1, #1
   b6a68:	b280      	uxth	r0, r0
   b6a6a:	f002 fa7a 	bl	b8f62 <digitalWrite>
    digitalWrite(dc, LOW);
   b6a6e:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b6a72:	2100      	movs	r1, #0
   b6a74:	b280      	uxth	r0, r0
   b6a76:	f002 fa74 	bl	b8f62 <digitalWrite>
    digitalWrite(cs, LOW);
   b6a7a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b6a7e:	2100      	movs	r1, #0
   b6a80:	b280      	uxth	r0, r0
   b6a82:	f002 fa6e 	bl	b8f62 <digitalWrite>
    fastSPIwrite(c);
   b6a86:	4629      	mov	r1, r5
   b6a88:	4620      	mov	r0, r4
   b6a8a:	f7ff ffcd 	bl	b6a28 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b6a8e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b6a92:	2101      	movs	r1, #1
}
   b6a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b6a98:	b280      	uxth	r0, r0
   b6a9a:	f002 ba62 	b.w	b8f62 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b6a9e:	f002 fadb 	bl	b9058 <_Z19__fetch_global_Wirev>
   b6aa2:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b6aa6:	f001 fe39 	bl	b871c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b6aaa:	f002 fad5 	bl	b9058 <_Z19__fetch_global_Wirev>
   b6aae:	6803      	ldr	r3, [r0, #0]
   b6ab0:	2100      	movs	r1, #0
   b6ab2:	689b      	ldr	r3, [r3, #8]
   b6ab4:	4798      	blx	r3
    Wire.write(c);
   b6ab6:	f002 facf 	bl	b9058 <_Z19__fetch_global_Wirev>
   b6aba:	6803      	ldr	r3, [r0, #0]
   b6abc:	4629      	mov	r1, r5
   b6abe:	689b      	ldr	r3, [r3, #8]
   b6ac0:	4798      	blx	r3
    Wire.endTransmission();
   b6ac2:	f002 fac9 	bl	b9058 <_Z19__fetch_global_Wirev>
}
   b6ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b6aca:	f001 be2e 	b.w	b872a <_ZN7TwoWire15endTransmissionEv>
	...

000b6ad0 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b6ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b6ad2:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b6ad4:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b6ad6:	f7ff ffbd 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b6ada:	2100      	movs	r1, #0
   b6adc:	4620      	mov	r0, r4
   b6ade:	f7ff ffb9 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b6ae2:	217f      	movs	r1, #127	; 0x7f
   b6ae4:	4620      	mov	r0, r4
   b6ae6:	f7ff ffb5 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b6aea:	2122      	movs	r1, #34	; 0x22
   b6aec:	4620      	mov	r0, r4
   b6aee:	f7ff ffb1 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b6af2:	2100      	movs	r1, #0
   b6af4:	4620      	mov	r0, r4
   b6af6:	f7ff ffad 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b6afa:	2107      	movs	r1, #7
   b6afc:	4620      	mov	r0, r4
   b6afe:	f7ff ffa9 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b6b02:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b6b06:	4f29      	ldr	r7, [pc, #164]	; (b6bac <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b6b08:	3301      	adds	r3, #1
   b6b0a:	d02a      	beq.n	b6b62 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b6b0c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b6b10:	2101      	movs	r1, #1
   b6b12:	b280      	uxth	r0, r0
   b6b14:	f002 fa25 	bl	b8f62 <digitalWrite>
    digitalWrite(dc, HIGH);
   b6b18:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b6b1c:	2101      	movs	r1, #1
   b6b1e:	b280      	uxth	r0, r0
   b6b20:	f002 fa1f 	bl	b8f62 <digitalWrite>
    digitalWrite(cs, LOW);
   b6b24:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b6b28:	2100      	movs	r1, #0
   b6b2a:	b280      	uxth	r0, r0
   b6b2c:	f002 fa19 	bl	b8f62 <digitalWrite>
   b6b30:	2001      	movs	r0, #1
   b6b32:	f000 fb37 	bl	b71a4 <HAL_Delay_Microseconds>
   b6b36:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b6b3a:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b6b3c:	f817 1b01 	ldrb.w	r1, [r7], #1
   b6b40:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b6b42:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b6b44:	f7ff ff70 	bl	b6a28 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b6b48:	2d00      	cmp	r5, #0
   b6b4a:	d1f6      	bne.n	b6b3a <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b6b4c:	2001      	movs	r0, #1
   b6b4e:	f000 fb29 	bl	b71a4 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b6b52:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b6b56:	2101      	movs	r1, #1
}
   b6b58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b6b5c:	b280      	uxth	r0, r0
   b6b5e:	f002 ba00 	b.w	b8f62 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b6b62:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b6b64:	f002 fa78 	bl	b9058 <_Z19__fetch_global_Wirev>
   b6b68:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b6b6c:	f001 fdd6 	bl	b871c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b6b70:	f002 fa72 	bl	b9058 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b6b74:	6803      	ldr	r3, [r0, #0]
   b6b76:	2140      	movs	r1, #64	; 0x40
   b6b78:	689b      	ldr	r3, [r3, #8]
   b6b7a:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b6b7c:	f105 0610 	add.w	r6, r5, #16
   b6b80:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b6b82:	f002 fa69 	bl	b9058 <_Z19__fetch_global_Wirev>
   b6b86:	6803      	ldr	r3, [r0, #0]
   b6b88:	5d79      	ldrb	r1, [r7, r5]
   b6b8a:	689b      	ldr	r3, [r3, #8]
   b6b8c:	4798      	blx	r3
		i++;
   b6b8e:	1c6b      	adds	r3, r5, #1
   b6b90:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b6b92:	42ae      	cmp	r6, r5
   b6b94:	d1f5      	bne.n	b6b82 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b6b96:	f002 fa5f 	bl	b9058 <_Z19__fetch_global_Wirev>
   b6b9a:	f001 fdc6 	bl	b872a <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b6b9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6ba2:	d100      	bne.n	b6ba6 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b6ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6ba6:	4635      	mov	r5, r6
   b6ba8:	e7dc      	b.n	b6b64 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b6baa:	bf00      	nop
   b6bac:	2003dc2c 	.word	0x2003dc2c

000b6bb0 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b6bb0:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b6bb2:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b6bb6:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b6bb8:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b6bba:	4604      	mov	r4, r0
   b6bbc:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b6bbe:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b6bc0:	f000 80c9 	beq.w	b6d56 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b6bc4:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b6bc8:	2101      	movs	r1, #1
   b6bca:	b280      	uxth	r0, r0
   b6bcc:	f002 f9b8 	bl	b8f40 <pinMode>
    pinMode(cs, OUTPUT);
   b6bd0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b6bd4:	2101      	movs	r1, #1
   b6bd6:	b280      	uxth	r0, r0
   b6bd8:	f002 f9b2 	bl	b8f40 <pinMode>
    if (!hwSPI){
   b6bdc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b6be0:	2b00      	cmp	r3, #0
   b6be2:	f000 80a6 	beq.w	b6d32 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b6be6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b6bea:	2101      	movs	r1, #1
   b6bec:	b280      	uxth	r0, r0
   b6bee:	f002 f9b8 	bl	b8f62 <digitalWrite>
        instance().setBitOrder(order);
   b6bf2:	f7fe fd39 	bl	b5668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6bf6:	2101      	movs	r1, #1
   b6bf8:	f000 fe42 	bl	b7880 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b6bfc:	f7fe fd34 	bl	b5668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6c00:	2110      	movs	r1, #16
   b6c02:	f000 ff1f 	bl	b7a44 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b6c06:	f7fe fd2f 	bl	b5668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6c0a:	2100      	movs	r1, #0
   b6c0c:	f000 fe4c 	bl	b78a8 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b6c10:	f7fe fd2a 	bl	b5668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6c14:	f000 fe20 	bl	b7858 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b6c18:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b6c1c:	2101      	movs	r1, #1
   b6c1e:	b280      	uxth	r0, r0
   b6c20:	f002 f98e 	bl	b8f40 <pinMode>
  digitalWrite(rst, HIGH);
   b6c24:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b6c28:	2101      	movs	r1, #1
   b6c2a:	b280      	uxth	r0, r0
   b6c2c:	f002 f999 	bl	b8f62 <digitalWrite>
  delay(1);
   b6c30:	2001      	movs	r0, #1
   b6c32:	f001 fab4 	bl	b819e <delay>
  digitalWrite(rst, LOW);
   b6c36:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b6c3a:	2100      	movs	r1, #0
   b6c3c:	b280      	uxth	r0, r0
   b6c3e:	f002 f990 	bl	b8f62 <digitalWrite>
  delay(10);
   b6c42:	200a      	movs	r0, #10
   b6c44:	f001 faab 	bl	b819e <delay>
  digitalWrite(rst, HIGH);
   b6c48:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b6c4c:	2101      	movs	r1, #1
   b6c4e:	b280      	uxth	r0, r0
   b6c50:	f002 f987 	bl	b8f62 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b6c54:	4620      	mov	r0, r4
   b6c56:	21ae      	movs	r1, #174	; 0xae
   b6c58:	f7ff fefc 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b6c5c:	4620      	mov	r0, r4
   b6c5e:	21d5      	movs	r1, #213	; 0xd5
   b6c60:	f7ff fef8 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b6c64:	4620      	mov	r0, r4
   b6c66:	2180      	movs	r1, #128	; 0x80
   b6c68:	f7ff fef4 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b6c6c:	4620      	mov	r0, r4
   b6c6e:	21a8      	movs	r1, #168	; 0xa8
   b6c70:	f7ff fef0 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b6c74:	4620      	mov	r0, r4
   b6c76:	213f      	movs	r1, #63	; 0x3f
   b6c78:	f7ff feec 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b6c7c:	4620      	mov	r0, r4
   b6c7e:	21d3      	movs	r1, #211	; 0xd3
   b6c80:	f7ff fee8 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b6c84:	4620      	mov	r0, r4
   b6c86:	2100      	movs	r1, #0
   b6c88:	f7ff fee4 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b6c8c:	4620      	mov	r0, r4
   b6c8e:	2140      	movs	r1, #64	; 0x40
   b6c90:	f7ff fee0 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b6c94:	218d      	movs	r1, #141	; 0x8d
   b6c96:	4620      	mov	r0, r4
   b6c98:	f7ff fedc 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b6c9c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b6c9e:	bf0c      	ite	eq
   b6ca0:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b6ca2:	2114      	movne	r1, #20
   b6ca4:	4620      	mov	r0, r4
   b6ca6:	f7ff fed5 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b6caa:	4620      	mov	r0, r4
   b6cac:	2120      	movs	r1, #32
   b6cae:	f7ff fed1 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b6cb2:	4620      	mov	r0, r4
   b6cb4:	2100      	movs	r1, #0
   b6cb6:	f7ff fecd 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b6cba:	4620      	mov	r0, r4
   b6cbc:	21a1      	movs	r1, #161	; 0xa1
   b6cbe:	f7ff fec9 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b6cc2:	4620      	mov	r0, r4
   b6cc4:	21c8      	movs	r1, #200	; 0xc8
   b6cc6:	f7ff fec5 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b6cca:	4620      	mov	r0, r4
   b6ccc:	21da      	movs	r1, #218	; 0xda
   b6cce:	f7ff fec1 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b6cd2:	4620      	mov	r0, r4
   b6cd4:	2112      	movs	r1, #18
   b6cd6:	f7ff febd 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b6cda:	2181      	movs	r1, #129	; 0x81
   b6cdc:	4620      	mov	r0, r4
   b6cde:	f7ff feb9 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b6ce2:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b6ce4:	bf0c      	ite	eq
   b6ce6:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b6ce8:	21cf      	movne	r1, #207	; 0xcf
   b6cea:	4620      	mov	r0, r4
   b6cec:	f7ff feb2 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b6cf0:	21d9      	movs	r1, #217	; 0xd9
   b6cf2:	4620      	mov	r0, r4
   b6cf4:	f7ff feae 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b6cf8:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b6cfa:	bf0c      	ite	eq
   b6cfc:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b6cfe:	21f1      	movne	r1, #241	; 0xf1
   b6d00:	4620      	mov	r0, r4
   b6d02:	f7ff fea7 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b6d06:	4620      	mov	r0, r4
   b6d08:	21db      	movs	r1, #219	; 0xdb
   b6d0a:	f7ff fea3 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b6d0e:	4620      	mov	r0, r4
   b6d10:	2140      	movs	r1, #64	; 0x40
   b6d12:	f7ff fe9f 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b6d16:	4620      	mov	r0, r4
   b6d18:	21a4      	movs	r1, #164	; 0xa4
   b6d1a:	f7ff fe9b 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b6d1e:	4620      	mov	r0, r4
   b6d20:	21a6      	movs	r1, #166	; 0xa6
   b6d22:	f7ff fe97 	bl	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b6d26:	4620      	mov	r0, r4
   b6d28:	21af      	movs	r1, #175	; 0xaf
}
   b6d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b6d2e:	f7ff be91 	b.w	b6a54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b6d32:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b6d36:	2101      	movs	r1, #1
   b6d38:	b280      	uxth	r0, r0
   b6d3a:	f002 f901 	bl	b8f40 <pinMode>
    	pinMode(sclk, OUTPUT);
   b6d3e:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b6d42:	2101      	movs	r1, #1
   b6d44:	b280      	uxth	r0, r0
   b6d46:	f002 f8fb 	bl	b8f40 <pinMode>
    if (hwSPI){
   b6d4a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b6d4e:	2b00      	cmp	r3, #0
   b6d50:	f43f af62 	beq.w	b6c18 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b6d54:	e747      	b.n	b6be6 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b6d56:	f002 f97f 	bl	b9058 <_Z19__fetch_global_Wirev>
   b6d5a:	f001 fca9 	bl	b86b0 <_ZN7TwoWire5beginEv>
   b6d5e:	e75b      	b.n	b6c18 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b6d60 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b6d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d64:	b085      	sub	sp, #20
   b6d66:	461f      	mov	r7, r3
   b6d68:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b6d6c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b6d70:	eba8 0902 	sub.w	r9, r8, r2
   b6d74:	eba7 0a01 	sub.w	sl, r7, r1
   b6d78:	f1b9 0f00 	cmp.w	r9, #0
   b6d7c:	bfb8      	it	lt
   b6d7e:	f1c9 0900 	rsblt	r9, r9, #0
   b6d82:	f1ba 0f00 	cmp.w	sl, #0
   b6d86:	bfb8      	it	lt
   b6d88:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b6d8c:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b6d8e:	4683      	mov	fp, r0
   b6d90:	460c      	mov	r4, r1
   b6d92:	4615      	mov	r5, r2
  if (steep) {
   b6d94:	dd04      	ble.n	b6da0 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b6d96:	463a      	mov	r2, r7
    swap(x0, y0);
   b6d98:	462c      	mov	r4, r5
    swap(x1, y1);
   b6d9a:	4647      	mov	r7, r8
    swap(x0, y0);
   b6d9c:	460d      	mov	r5, r1
    swap(x1, y1);
   b6d9e:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b6da0:	42bc      	cmp	r4, r7
   b6da2:	dd05      	ble.n	b6db0 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b6da4:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b6da6:	4645      	mov	r5, r8
   b6da8:	4690      	mov	r8, r2
  if (x0 > x1) {
   b6daa:	4622      	mov	r2, r4
   b6dac:	463c      	mov	r4, r7
   b6dae:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b6db0:	1b3e      	subs	r6, r7, r4
   b6db2:	b2b2      	uxth	r2, r6
   b6db4:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b6db6:	eba8 0205 	sub.w	r2, r8, r5
   b6dba:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b6dbe:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b6dc2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b6dc6:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b6dca:	4545      	cmp	r5, r8
   b6dcc:	bfb4      	ite	lt
   b6dce:	2201      	movlt	r2, #1
   b6dd0:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b6dd4:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b6dd6:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b6dd8:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b6dda:	42bc      	cmp	r4, r7
   b6ddc:	dc1c      	bgt.n	b6e18 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b6dde:	f8db 2000 	ldr.w	r2, [fp]
   b6de2:	9303      	str	r3, [sp, #12]
    if (steep) {
   b6de4:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b6de6:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b6dea:	bfc7      	ittee	gt
   b6dec:	4629      	movgt	r1, r5
   b6dee:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b6df0:	462a      	movle	r2, r5
   b6df2:	4621      	movle	r1, r4
   b6df4:	4658      	mov	r0, fp
   b6df6:	47c0      	blx	r8
    }
    err -= dy;
   b6df8:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b6dfa:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b6dfc:	1ab6      	subs	r6, r6, r2
   b6dfe:	b2b1      	uxth	r1, r6
   b6e00:	b236      	sxth	r6, r6
    if (err < 0) {
   b6e02:	2e00      	cmp	r6, #0
   b6e04:	da05      	bge.n	b6e12 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b6e06:	9a02      	ldr	r2, [sp, #8]
   b6e08:	4415      	add	r5, r2
      err += dx;
   b6e0a:	9a00      	ldr	r2, [sp, #0]
   b6e0c:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b6e0e:	b22d      	sxth	r5, r5
      err += dx;
   b6e10:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b6e12:	3401      	adds	r4, #1
   b6e14:	b224      	sxth	r4, r4
   b6e16:	e7e0      	b.n	b6dda <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b6e18:	b005      	add	sp, #20
   b6e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6e1e <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b6e1e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6e22:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b6e26:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b6e28:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b6e2c:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b6e30:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b6e32:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b6e34:	4616      	mov	r6, r2
   b6e36:	468a      	mov	sl, r1
   b6e38:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b6e3a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b6e3c:	6823      	ldr	r3, [r4, #0]
   b6e3e:	f8cd 8000 	str.w	r8, [sp]
   b6e42:	f109 32ff 	add.w	r2, r9, #4294967295
   b6e46:	4432      	add	r2, r6
   b6e48:	69df      	ldr	r7, [r3, #28]
   b6e4a:	4651      	mov	r1, sl
   b6e4c:	462b      	mov	r3, r5
   b6e4e:	4620      	mov	r0, r4
   b6e50:	b212      	sxth	r2, r2
   b6e52:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b6e54:	6823      	ldr	r3, [r4, #0]
   b6e56:	f8cd 8000 	str.w	r8, [sp]
   b6e5a:	699f      	ldr	r7, [r3, #24]
   b6e5c:	4632      	mov	r2, r6
   b6e5e:	464b      	mov	r3, r9
   b6e60:	4651      	mov	r1, sl
   b6e62:	4620      	mov	r0, r4
   b6e64:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b6e66:	1e6b      	subs	r3, r5, #1
   b6e68:	eb03 010a 	add.w	r1, r3, sl
   b6e6c:	6823      	ldr	r3, [r4, #0]
   b6e6e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b6e72:	699d      	ldr	r5, [r3, #24]
   b6e74:	4632      	mov	r2, r6
   b6e76:	464b      	mov	r3, r9
   b6e78:	b209      	sxth	r1, r1
   b6e7a:	4620      	mov	r0, r4
   b6e7c:	46ac      	mov	ip, r5
}
   b6e7e:	b002      	add	sp, #8
   b6e80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b6e84:	4760      	bx	ip

000b6e86 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b6e86:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b6e88:	3b01      	subs	r3, #1
   b6e8a:	4413      	add	r3, r2
   b6e8c:	6804      	ldr	r4, [r0, #0]
   b6e8e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b6e92:	9501      	str	r5, [sp, #4]
   b6e94:	b21b      	sxth	r3, r3
   b6e96:	9300      	str	r3, [sp, #0]
   b6e98:	6964      	ldr	r4, [r4, #20]
   b6e9a:	460b      	mov	r3, r1
   b6e9c:	47a0      	blx	r4
}
   b6e9e:	b003      	add	sp, #12
   b6ea0:	bd30      	pop	{r4, r5, pc}

000b6ea2 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b6ea2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b6ea4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b6ea8:	6804      	ldr	r4, [r0, #0]
   b6eaa:	e9cd 2500 	strd	r2, r5, [sp]
   b6eae:	3b01      	subs	r3, #1
   b6eb0:	440b      	add	r3, r1
   b6eb2:	6964      	ldr	r4, [r4, #20]
   b6eb4:	b21b      	sxth	r3, r3
   b6eb6:	47a0      	blx	r4
}
   b6eb8:	b003      	add	sp, #12
   b6eba:	bd30      	pop	{r4, r5, pc}

000b6ebc <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b6ebc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6ec0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b6ec4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b6ec8:	4605      	mov	r5, r0
   b6eca:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b6ecc:	460c      	mov	r4, r1
   b6ece:	18ce      	adds	r6, r1, r3
   b6ed0:	42b4      	cmp	r4, r6
   b6ed2:	da0b      	bge.n	b6eec <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b6ed4:	682b      	ldr	r3, [r5, #0]
   b6ed6:	f8cd 8000 	str.w	r8, [sp]
   b6eda:	699f      	ldr	r7, [r3, #24]
   b6edc:	4621      	mov	r1, r4
   b6ede:	464b      	mov	r3, r9
   b6ee0:	4652      	mov	r2, sl
   b6ee2:	4628      	mov	r0, r5
   b6ee4:	3401      	adds	r4, #1
   b6ee6:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b6ee8:	b224      	sxth	r4, r4
   b6eea:	e7f1      	b.n	b6ed0 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b6eec:	b002      	add	sp, #8
   b6eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b6ef2 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b6ef2:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b6ef4:	6802      	ldr	r2, [r0, #0]
   b6ef6:	9101      	str	r1, [sp, #4]
   b6ef8:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b6efc:	9100      	str	r1, [sp, #0]
   b6efe:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b6f00:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6f04:	2200      	movs	r2, #0
   b6f06:	4611      	mov	r1, r2
   b6f08:	47a0      	blx	r4
}
   b6f0a:	b002      	add	sp, #8
   b6f0c:	bd10      	pop	{r4, pc}

000b6f0e <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b6f0e:	4770      	bx	lr

000b6f10 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b6f10:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b6f12:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b6f14:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b6f16:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b6f1a:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b6f1c:	4d05      	ldr	r5, [pc, #20]	; (b6f34 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b6f1e:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b6f20:	2201      	movs	r2, #1
   b6f22:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b6f24:	6005      	str	r5, [r0, #0]
   b6f26:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b6f28:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b6f2a:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b6f2c:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b6f2e:	7682      	strb	r2, [r0, #26]
}
   b6f30:	bd30      	pop	{r4, r5, pc}
   b6f32:	bf00      	nop
   b6f34:	000bcee4 	.word	0x000bcee4

000b6f38 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b6f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f3c:	ed2d 8b02 	vpush	{d8}
   b6f40:	b08d      	sub	sp, #52	; 0x34
   b6f42:	4607      	mov	r7, r0
   b6f44:	9104      	str	r1, [sp, #16]
   b6f46:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b6f4a:	9105      	str	r1, [sp, #20]
   b6f4c:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b6f50:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b6f52:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b6f56:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b6f58:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b6f5c:	4281      	cmp	r1, r0
   b6f5e:	dd52      	ble.n	b7006 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b6f60:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b6f64:	4291      	cmp	r1, r2
   b6f66:	dd4e      	ble.n	b7006 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b6f68:	2106      	movs	r1, #6
   b6f6a:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b6f6e:	2c00      	cmp	r4, #0
   b6f70:	dd49      	ble.n	b7006 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b6f72:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b6f76:	2c00      	cmp	r4, #0
   b6f78:	dd45      	ble.n	b7006 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b6f7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b6f7e:	930b      	str	r3, [sp, #44]	; 0x2c
   b6f80:	b293      	uxth	r3, r2
   b6f82:	9307      	str	r3, [sp, #28]
   b6f84:	3308      	adds	r3, #8
   b6f86:	b29b      	uxth	r3, r3
   b6f88:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b6f8a:	2400      	movs	r4, #0
   b6f8c:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b6f8e:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b6f90:	bf1c      	itt	ne
   b6f92:	4b2c      	ldrne	r3, [pc, #176]	; (b7044 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b6f94:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b6f96:	9e07      	ldr	r6, [sp, #28]
   b6f98:	bf16      	itet	ne
   b6f9a:	191b      	addne	r3, r3, r4
      line = 0x0;
   b6f9c:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b6f9e:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b6fa0:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b6fa2:	9a04      	ldr	r2, [sp, #16]
   b6fa4:	b2ab      	uxth	r3, r5
   b6fa6:	930a      	str	r3, [sp, #40]	; 0x28
   b6fa8:	fb04 f305 	mul.w	r3, r4, r5
   b6fac:	fa13 f382 	uxtah	r3, r3, r2
   b6fb0:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b6fb2:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b6fb6:	ee08 3a10 	vmov	s16, r3
   b6fba:	46b0      	mov	r8, r6
   b6fbc:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b6fc0:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b6fc4:	9b03      	ldr	r3, [sp, #12]
   b6fc6:	07db      	lsls	r3, r3, #31
   b6fc8:	d52f      	bpl.n	b702a <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b6fca:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b6fcc:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b6fce:	d11f      	bne.n	b7010 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b6fd0:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b6fd4:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b6fd6:	b232      	sxth	r2, r6
   b6fd8:	4651      	mov	r1, sl
   b6fda:	4638      	mov	r0, r7
   b6fdc:	47d8      	blx	fp
      line >>= 1;
   b6fde:	9b03      	ldr	r3, [sp, #12]
   b6fe0:	085b      	lsrs	r3, r3, #1
   b6fe2:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b6fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6fe6:	3601      	adds	r6, #1
   b6fe8:	4498      	add	r8, r3
   b6fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6fec:	b2b6      	uxth	r6, r6
   b6fee:	42b3      	cmp	r3, r6
   b6ff0:	fa1f f888 	uxth.w	r8, r8
   b6ff4:	d1e6      	bne.n	b6fc4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b6ff6:	9b08      	ldr	r3, [sp, #32]
   b6ff8:	3b01      	subs	r3, #1
   b6ffa:	3401      	adds	r4, #1
   b6ffc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b7000:	b264      	sxtb	r4, r4
   b7002:	9308      	str	r3, [sp, #32]
   b7004:	d1c3      	bne.n	b6f8e <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b7006:	b00d      	add	sp, #52	; 0x34
   b7008:	ecbd 8b02 	vpop	{d8}
   b700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b7010:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b7012:	e9cd 9200 	strd	r9, r2, [sp]
   b7016:	ee18 1a10 	vmov	r1, s16
   b701a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b701e:	fa0f f288 	sxth.w	r2, r8
   b7022:	464b      	mov	r3, r9
   b7024:	4638      	mov	r0, r7
   b7026:	47d8      	blx	fp
   b7028:	e7d9      	b.n	b6fde <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b702a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b702e:	4293      	cmp	r3, r2
   b7030:	d0d5      	beq.n	b6fde <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b7032:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b7034:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b7036:	d103      	bne.n	b7040 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b7038:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b703c:	9b06      	ldr	r3, [sp, #24]
   b703e:	e7ca      	b.n	b6fd6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b7040:	9a06      	ldr	r2, [sp, #24]
   b7042:	e7e6      	b.n	b7012 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b7044:	000bc9e0 	.word	0x000bc9e0

000b7048 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b7048:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b704a:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b704c:	b085      	sub	sp, #20
   b704e:	4604      	mov	r4, r0
  if (c == '\n') {
   b7050:	d107      	bne.n	b7062 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b7052:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b7054:	8a63      	ldrh	r3, [r4, #18]
   b7056:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b705a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b705c:	2300      	movs	r3, #0
   b705e:	8223      	strh	r3, [r4, #16]
   b7060:	e021      	b.n	b70a6 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b7062:	290d      	cmp	r1, #13
   b7064:	d01f      	beq.n	b70a6 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b7066:	7e03      	ldrb	r3, [r0, #24]
   b7068:	9302      	str	r3, [sp, #8]
   b706a:	8ac3      	ldrh	r3, [r0, #22]
   b706c:	9301      	str	r3, [sp, #4]
   b706e:	8a83      	ldrh	r3, [r0, #20]
   b7070:	9300      	str	r3, [sp, #0]
   b7072:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b7076:	460b      	mov	r3, r1
   b7078:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b707c:	f7ff ff5c 	bl	b6f38 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b7080:	7e20      	ldrb	r0, [r4, #24]
   b7082:	8a23      	ldrh	r3, [r4, #16]
   b7084:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b7088:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b708c:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b708e:	b21b      	sxth	r3, r3
   b7090:	4602      	mov	r2, r0
   b7092:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b7094:	b139      	cbz	r1, b70a6 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b7096:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b709a:	f06f 0505 	mvn.w	r5, #5
   b709e:	fb05 1100 	mla	r1, r5, r0, r1
   b70a2:	428b      	cmp	r3, r1
   b70a4:	dcd6      	bgt.n	b7054 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b70a6:	2001      	movs	r0, #1
   b70a8:	b005      	add	sp, #20
   b70aa:	bd30      	pop	{r4, r5, pc}

000b70ac <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b70ac:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b70ae:	8242      	strh	r2, [r0, #18]
}
   b70b0:	4770      	bx	lr

000b70b2 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b70b2:	2901      	cmp	r1, #1
   b70b4:	bf38      	it	cc
   b70b6:	2101      	movcc	r1, #1
   b70b8:	7601      	strb	r1, [r0, #24]
}
   b70ba:	4770      	bx	lr

000b70bc <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b70bc:	82c1      	strh	r1, [r0, #22]
   b70be:	8281      	strh	r1, [r0, #20]
}
   b70c0:	4770      	bx	lr

000b70c2 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b70c2:	7e40      	ldrb	r0, [r0, #25]
   b70c4:	4770      	bx	lr

000b70c6 <_ZN12Adafruit_GFX5widthEv>:
}
   b70c6:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b70ca:	4770      	bx	lr

000b70cc <_ZN12Adafruit_GFX6heightEv>:
}
   b70cc:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b70d0:	4770      	bx	lr
	...

000b70d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b70d4:	b508      	push	{r3, lr}
   b70d6:	4b02      	ldr	r3, [pc, #8]	; (b70e0 <netdb_freeaddrinfo+0xc>)
   b70d8:	681b      	ldr	r3, [r3, #0]
   b70da:	689b      	ldr	r3, [r3, #8]
   b70dc:	9301      	str	r3, [sp, #4]
   b70de:	bd08      	pop	{r3, pc}
   b70e0:	00030268 	.word	0x00030268

000b70e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b70e4:	b508      	push	{r3, lr}
   b70e6:	4b02      	ldr	r3, [pc, #8]	; (b70f0 <netdb_getaddrinfo+0xc>)
   b70e8:	681b      	ldr	r3, [r3, #0]
   b70ea:	68db      	ldr	r3, [r3, #12]
   b70ec:	9301      	str	r3, [sp, #4]
   b70ee:	bd08      	pop	{r3, pc}
   b70f0:	00030268 	.word	0x00030268

000b70f4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b70f4:	b508      	push	{r3, lr}
   b70f6:	4b02      	ldr	r3, [pc, #8]	; (b7100 <HAL_Pin_Map+0xc>)
   b70f8:	681b      	ldr	r3, [r3, #0]
   b70fa:	681b      	ldr	r3, [r3, #0]
   b70fc:	9301      	str	r3, [sp, #4]
   b70fe:	bd08      	pop	{r3, pc}
   b7100:	0003022c 	.word	0x0003022c

000b7104 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b7104:	b508      	push	{r3, lr}
   b7106:	4b02      	ldr	r3, [pc, #8]	; (b7110 <HAL_Validate_Pin_Function+0xc>)
   b7108:	681b      	ldr	r3, [r3, #0]
   b710a:	685b      	ldr	r3, [r3, #4]
   b710c:	9301      	str	r3, [sp, #4]
   b710e:	bd08      	pop	{r3, pc}
   b7110:	0003022c 	.word	0x0003022c

000b7114 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7114:	b508      	push	{r3, lr}
   b7116:	4b02      	ldr	r3, [pc, #8]	; (b7120 <HAL_Pin_Mode+0xc>)
   b7118:	681b      	ldr	r3, [r3, #0]
   b711a:	689b      	ldr	r3, [r3, #8]
   b711c:	9301      	str	r3, [sp, #4]
   b711e:	bd08      	pop	{r3, pc}
   b7120:	0003022c 	.word	0x0003022c

000b7124 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b7124:	b508      	push	{r3, lr}
   b7126:	4b02      	ldr	r3, [pc, #8]	; (b7130 <HAL_Get_Pin_Mode+0xc>)
   b7128:	681b      	ldr	r3, [r3, #0]
   b712a:	68db      	ldr	r3, [r3, #12]
   b712c:	9301      	str	r3, [sp, #4]
   b712e:	bd08      	pop	{r3, pc}
   b7130:	0003022c 	.word	0x0003022c

000b7134 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b7134:	b508      	push	{r3, lr}
   b7136:	4b02      	ldr	r3, [pc, #8]	; (b7140 <HAL_GPIO_Write+0xc>)
   b7138:	681b      	ldr	r3, [r3, #0]
   b713a:	691b      	ldr	r3, [r3, #16]
   b713c:	9301      	str	r3, [sp, #4]
   b713e:	bd08      	pop	{r3, pc}
   b7140:	0003022c 	.word	0x0003022c

000b7144 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b7144:	b508      	push	{r3, lr}
   b7146:	4b02      	ldr	r3, [pc, #8]	; (b7150 <HAL_GPIO_Read+0xc>)
   b7148:	681b      	ldr	r3, [r3, #0]
   b714a:	695b      	ldr	r3, [r3, #20]
   b714c:	9301      	str	r3, [sp, #4]
   b714e:	bd08      	pop	{r3, pc}
   b7150:	0003022c 	.word	0x0003022c

000b7154 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b7154:	b508      	push	{r3, lr}
   b7156:	4b02      	ldr	r3, [pc, #8]	; (b7160 <HAL_Interrupts_Enable_All+0xc>)
   b7158:	681b      	ldr	r3, [r3, #0]
   b715a:	6a1b      	ldr	r3, [r3, #32]
   b715c:	9301      	str	r3, [sp, #4]
   b715e:	bd08      	pop	{r3, pc}
   b7160:	0003022c 	.word	0x0003022c

000b7164 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b7164:	b508      	push	{r3, lr}
   b7166:	4b02      	ldr	r3, [pc, #8]	; (b7170 <HAL_Interrupts_Disable_All+0xc>)
   b7168:	681b      	ldr	r3, [r3, #0]
   b716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b716c:	9301      	str	r3, [sp, #4]
   b716e:	bd08      	pop	{r3, pc}
   b7170:	0003022c 	.word	0x0003022c

000b7174 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b7174:	b508      	push	{r3, lr}
   b7176:	4b02      	ldr	r3, [pc, #8]	; (b7180 <hal_adc_read+0xc>)
   b7178:	681b      	ldr	r3, [r3, #0]
   b717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b717c:	9301      	str	r3, [sp, #4]
   b717e:	bd08      	pop	{r3, pc}
   b7180:	0003022c 	.word	0x0003022c

000b7184 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7184:	b508      	push	{r3, lr}
   b7186:	4b02      	ldr	r3, [pc, #8]	; (b7190 <if_index_to_name+0xc>)
   b7188:	681b      	ldr	r3, [r3, #0]
   b718a:	695b      	ldr	r3, [r3, #20]
   b718c:	9301      	str	r3, [sp, #4]
   b718e:	bd08      	pop	{r3, pc}
   b7190:	0003026c 	.word	0x0003026c

000b7194 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7194:	b508      	push	{r3, lr}
   b7196:	4b02      	ldr	r3, [pc, #8]	; (b71a0 <HAL_RNG_GetRandomNumber+0xc>)
   b7198:	681b      	ldr	r3, [r3, #0]
   b719a:	685b      	ldr	r3, [r3, #4]
   b719c:	9301      	str	r3, [sp, #4]
   b719e:	bd08      	pop	{r3, pc}
   b71a0:	00030218 	.word	0x00030218

000b71a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b71a4:	b508      	push	{r3, lr}
   b71a6:	4b02      	ldr	r3, [pc, #8]	; (b71b0 <HAL_Delay_Microseconds+0xc>)
   b71a8:	681b      	ldr	r3, [r3, #0]
   b71aa:	68db      	ldr	r3, [r3, #12]
   b71ac:	9301      	str	r3, [sp, #4]
   b71ae:	bd08      	pop	{r3, pc}
   b71b0:	00030218 	.word	0x00030218

000b71b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b71b4:	b508      	push	{r3, lr}
   b71b6:	4b02      	ldr	r3, [pc, #8]	; (b71c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b71b8:	681b      	ldr	r3, [r3, #0]
   b71ba:	695b      	ldr	r3, [r3, #20]
   b71bc:	9301      	str	r3, [sp, #4]
   b71be:	bd08      	pop	{r3, pc}
   b71c0:	00030218 	.word	0x00030218

000b71c4 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   b71c4:	b508      	push	{r3, lr}
   b71c6:	4b02      	ldr	r3, [pc, #8]	; (b71d0 <HAL_disable_irq+0xc>)
   b71c8:	681b      	ldr	r3, [r3, #0]
   b71ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b71cc:	9301      	str	r3, [sp, #4]
   b71ce:	bd08      	pop	{r3, pc}
   b71d0:	00030218 	.word	0x00030218

000b71d4 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   b71d4:	b508      	push	{r3, lr}
   b71d6:	4b02      	ldr	r3, [pc, #8]	; (b71e0 <HAL_enable_irq+0xc>)
   b71d8:	681b      	ldr	r3, [r3, #0]
   b71da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b71dc:	9301      	str	r3, [sp, #4]
   b71de:	bd08      	pop	{r3, pc}
   b71e0:	00030218 	.word	0x00030218

000b71e4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b71e4:	b508      	push	{r3, lr}
   b71e6:	4b02      	ldr	r3, [pc, #8]	; (b71f0 <hal_rtc_time_is_valid+0xc>)
   b71e8:	681b      	ldr	r3, [r3, #0]
   b71ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b71ec:	9301      	str	r3, [sp, #4]
   b71ee:	bd08      	pop	{r3, pc}
   b71f0:	00030218 	.word	0x00030218

000b71f4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b71f4:	b508      	push	{r3, lr}
   b71f6:	4b02      	ldr	r3, [pc, #8]	; (b7200 <hal_rtc_get_time+0xc>)
   b71f8:	681b      	ldr	r3, [r3, #0]
   b71fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b71fc:	9301      	str	r3, [sp, #4]
   b71fe:	bd08      	pop	{r3, pc}
   b7200:	00030218 	.word	0x00030218

000b7204 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b7204:	b508      	push	{r3, lr}
   b7206:	4b02      	ldr	r3, [pc, #8]	; (b7210 <os_thread_yield+0xc>)
   b7208:	681b      	ldr	r3, [r3, #0]
   b720a:	68db      	ldr	r3, [r3, #12]
   b720c:	9301      	str	r3, [sp, #4]
   b720e:	bd08      	pop	{r3, pc}
   b7210:	00030248 	.word	0x00030248

000b7214 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b7214:	b508      	push	{r3, lr}
   b7216:	4b02      	ldr	r3, [pc, #8]	; (b7220 <os_thread_scheduling+0xc>)
   b7218:	681b      	ldr	r3, [r3, #0]
   b721a:	69db      	ldr	r3, [r3, #28]
   b721c:	9301      	str	r3, [sp, #4]
   b721e:	bd08      	pop	{r3, pc}
   b7220:	00030248 	.word	0x00030248

000b7224 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b7224:	b508      	push	{r3, lr}
   b7226:	4b02      	ldr	r3, [pc, #8]	; (b7230 <os_timer_create+0xc>)
   b7228:	681b      	ldr	r3, [r3, #0]
   b722a:	6a1b      	ldr	r3, [r3, #32]
   b722c:	9301      	str	r3, [sp, #4]
   b722e:	bd08      	pop	{r3, pc}
   b7230:	00030248 	.word	0x00030248

000b7234 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b7234:	b508      	push	{r3, lr}
   b7236:	4b02      	ldr	r3, [pc, #8]	; (b7240 <os_timer_destroy+0xc>)
   b7238:	681b      	ldr	r3, [r3, #0]
   b723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b723c:	9301      	str	r3, [sp, #4]
   b723e:	bd08      	pop	{r3, pc}
   b7240:	00030248 	.word	0x00030248

000b7244 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b7244:	b508      	push	{r3, lr}
   b7246:	4b02      	ldr	r3, [pc, #8]	; (b7250 <os_timer_get_id+0xc>)
   b7248:	681b      	ldr	r3, [r3, #0]
   b724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b724c:	9301      	str	r3, [sp, #4]
   b724e:	bd08      	pop	{r3, pc}
   b7250:	00030248 	.word	0x00030248

000b7254 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b7254:	b508      	push	{r3, lr}
   b7256:	4b02      	ldr	r3, [pc, #8]	; (b7260 <os_timer_change+0xc>)
   b7258:	681b      	ldr	r3, [r3, #0]
   b725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b725c:	9301      	str	r3, [sp, #4]
   b725e:	bd08      	pop	{r3, pc}
   b7260:	00030248 	.word	0x00030248

000b7264 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7264:	b508      	push	{r3, lr}
   b7266:	4b02      	ldr	r3, [pc, #8]	; (b7270 <os_mutex_recursive_create+0xc>)
   b7268:	681b      	ldr	r3, [r3, #0]
   b726a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b726c:	9301      	str	r3, [sp, #4]
   b726e:	bd08      	pop	{r3, pc}
   b7270:	00030248 	.word	0x00030248

000b7274 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b7274:	b508      	push	{r3, lr}
   b7276:	4b02      	ldr	r3, [pc, #8]	; (b7280 <os_mutex_recursive_destroy+0xc>)
   b7278:	681b      	ldr	r3, [r3, #0]
   b727a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b727c:	9301      	str	r3, [sp, #4]
   b727e:	bd08      	pop	{r3, pc}
   b7280:	00030248 	.word	0x00030248

000b7284 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b7284:	b508      	push	{r3, lr}
   b7286:	4b02      	ldr	r3, [pc, #8]	; (b7290 <os_timer_set_id+0xc>)
   b7288:	681b      	ldr	r3, [r3, #0]
   b728a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b728c:	9301      	str	r3, [sp, #4]
   b728e:	bd08      	pop	{r3, pc}
   b7290:	00030248 	.word	0x00030248

000b7294 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7294:	b508      	push	{r3, lr}
   b7296:	4b02      	ldr	r3, [pc, #8]	; (b72a0 <inet_inet_ntop+0xc>)
   b7298:	681b      	ldr	r3, [r3, #0]
   b729a:	695b      	ldr	r3, [r3, #20]
   b729c:	9301      	str	r3, [sp, #4]
   b729e:	bd08      	pop	{r3, pc}
   b72a0:	00030264 	.word	0x00030264

000b72a4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b72a4:	b508      	push	{r3, lr}
   b72a6:	4b02      	ldr	r3, [pc, #8]	; (b72b0 <inet_htonl+0xc>)
   b72a8:	681b      	ldr	r3, [r3, #0]
   b72aa:	6a1b      	ldr	r3, [r3, #32]
   b72ac:	9301      	str	r3, [sp, #4]
   b72ae:	bd08      	pop	{r3, pc}
   b72b0:	00030264 	.word	0x00030264

000b72b4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b72b4:	b508      	push	{r3, lr}
   b72b6:	4b02      	ldr	r3, [pc, #8]	; (b72c0 <inet_htons+0xc>)
   b72b8:	681b      	ldr	r3, [r3, #0]
   b72ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b72bc:	9301      	str	r3, [sp, #4]
   b72be:	bd08      	pop	{r3, pc}
   b72c0:	00030264 	.word	0x00030264

000b72c4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b72c4:	b508      	push	{r3, lr}
   b72c6:	4b02      	ldr	r3, [pc, #8]	; (b72d0 <hal_usart_init+0xc>)
   b72c8:	681b      	ldr	r3, [r3, #0]
   b72ca:	681b      	ldr	r3, [r3, #0]
   b72cc:	9301      	str	r3, [sp, #4]
   b72ce:	bd08      	pop	{r3, pc}
   b72d0:	0003023c 	.word	0x0003023c

000b72d4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b72d4:	b508      	push	{r3, lr}
   b72d6:	4b02      	ldr	r3, [pc, #8]	; (b72e0 <hal_usart_write+0xc>)
   b72d8:	681b      	ldr	r3, [r3, #0]
   b72da:	68db      	ldr	r3, [r3, #12]
   b72dc:	9301      	str	r3, [sp, #4]
   b72de:	bd08      	pop	{r3, pc}
   b72e0:	0003023c 	.word	0x0003023c

000b72e4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b72e4:	b508      	push	{r3, lr}
   b72e6:	4b02      	ldr	r3, [pc, #8]	; (b72f0 <hal_usart_available+0xc>)
   b72e8:	681b      	ldr	r3, [r3, #0]
   b72ea:	691b      	ldr	r3, [r3, #16]
   b72ec:	9301      	str	r3, [sp, #4]
   b72ee:	bd08      	pop	{r3, pc}
   b72f0:	0003023c 	.word	0x0003023c

000b72f4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b72f4:	b508      	push	{r3, lr}
   b72f6:	4b02      	ldr	r3, [pc, #8]	; (b7300 <hal_usart_read+0xc>)
   b72f8:	681b      	ldr	r3, [r3, #0]
   b72fa:	695b      	ldr	r3, [r3, #20]
   b72fc:	9301      	str	r3, [sp, #4]
   b72fe:	bd08      	pop	{r3, pc}
   b7300:	0003023c 	.word	0x0003023c

000b7304 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7304:	b508      	push	{r3, lr}
   b7306:	4b02      	ldr	r3, [pc, #8]	; (b7310 <hal_usart_peek+0xc>)
   b7308:	681b      	ldr	r3, [r3, #0]
   b730a:	699b      	ldr	r3, [r3, #24]
   b730c:	9301      	str	r3, [sp, #4]
   b730e:	bd08      	pop	{r3, pc}
   b7310:	0003023c 	.word	0x0003023c

000b7314 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7314:	b508      	push	{r3, lr}
   b7316:	4b02      	ldr	r3, [pc, #8]	; (b7320 <hal_usart_flush+0xc>)
   b7318:	681b      	ldr	r3, [r3, #0]
   b731a:	69db      	ldr	r3, [r3, #28]
   b731c:	9301      	str	r3, [sp, #4]
   b731e:	bd08      	pop	{r3, pc}
   b7320:	0003023c 	.word	0x0003023c

000b7324 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7324:	b508      	push	{r3, lr}
   b7326:	4b02      	ldr	r3, [pc, #8]	; (b7330 <hal_usart_is_enabled+0xc>)
   b7328:	681b      	ldr	r3, [r3, #0]
   b732a:	6a1b      	ldr	r3, [r3, #32]
   b732c:	9301      	str	r3, [sp, #4]
   b732e:	bd08      	pop	{r3, pc}
   b7330:	0003023c 	.word	0x0003023c

000b7334 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7334:	b508      	push	{r3, lr}
   b7336:	4b02      	ldr	r3, [pc, #8]	; (b7340 <hal_usart_available_data_for_write+0xc>)
   b7338:	681b      	ldr	r3, [r3, #0]
   b733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b733c:	9301      	str	r3, [sp, #4]
   b733e:	bd08      	pop	{r3, pc}
   b7340:	0003023c 	.word	0x0003023c

000b7344 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7344:	b508      	push	{r3, lr}
   b7346:	4b02      	ldr	r3, [pc, #8]	; (b7350 <hal_i2c_begin+0xc>)
   b7348:	681b      	ldr	r3, [r3, #0]
   b734a:	68db      	ldr	r3, [r3, #12]
   b734c:	9301      	str	r3, [sp, #4]
   b734e:	bd08      	pop	{r3, pc}
   b7350:	00030228 	.word	0x00030228

000b7354 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7354:	b508      	push	{r3, lr}
   b7356:	4b02      	ldr	r3, [pc, #8]	; (b7360 <hal_i2c_begin_transmission+0xc>)
   b7358:	681b      	ldr	r3, [r3, #0]
   b735a:	699b      	ldr	r3, [r3, #24]
   b735c:	9301      	str	r3, [sp, #4]
   b735e:	bd08      	pop	{r3, pc}
   b7360:	00030228 	.word	0x00030228

000b7364 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7364:	b508      	push	{r3, lr}
   b7366:	4b02      	ldr	r3, [pc, #8]	; (b7370 <hal_i2c_end_transmission+0xc>)
   b7368:	681b      	ldr	r3, [r3, #0]
   b736a:	69db      	ldr	r3, [r3, #28]
   b736c:	9301      	str	r3, [sp, #4]
   b736e:	bd08      	pop	{r3, pc}
   b7370:	00030228 	.word	0x00030228

000b7374 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7374:	b508      	push	{r3, lr}
   b7376:	4b02      	ldr	r3, [pc, #8]	; (b7380 <hal_i2c_write+0xc>)
   b7378:	681b      	ldr	r3, [r3, #0]
   b737a:	6a1b      	ldr	r3, [r3, #32]
   b737c:	9301      	str	r3, [sp, #4]
   b737e:	bd08      	pop	{r3, pc}
   b7380:	00030228 	.word	0x00030228

000b7384 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7384:	b508      	push	{r3, lr}
   b7386:	4b02      	ldr	r3, [pc, #8]	; (b7390 <hal_i2c_available+0xc>)
   b7388:	681b      	ldr	r3, [r3, #0]
   b738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b738c:	9301      	str	r3, [sp, #4]
   b738e:	bd08      	pop	{r3, pc}
   b7390:	00030228 	.word	0x00030228

000b7394 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7394:	b508      	push	{r3, lr}
   b7396:	4b02      	ldr	r3, [pc, #8]	; (b73a0 <hal_i2c_read+0xc>)
   b7398:	681b      	ldr	r3, [r3, #0]
   b739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b739c:	9301      	str	r3, [sp, #4]
   b739e:	bd08      	pop	{r3, pc}
   b73a0:	00030228 	.word	0x00030228

000b73a4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b73a4:	b508      	push	{r3, lr}
   b73a6:	4b02      	ldr	r3, [pc, #8]	; (b73b0 <hal_i2c_peek+0xc>)
   b73a8:	681b      	ldr	r3, [r3, #0]
   b73aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b73ac:	9301      	str	r3, [sp, #4]
   b73ae:	bd08      	pop	{r3, pc}
   b73b0:	00030228 	.word	0x00030228

000b73b4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b73b4:	b508      	push	{r3, lr}
   b73b6:	4b02      	ldr	r3, [pc, #8]	; (b73c0 <hal_i2c_flush+0xc>)
   b73b8:	681b      	ldr	r3, [r3, #0]
   b73ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b73bc:	9301      	str	r3, [sp, #4]
   b73be:	bd08      	pop	{r3, pc}
   b73c0:	00030228 	.word	0x00030228

000b73c4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b73c4:	b508      	push	{r3, lr}
   b73c6:	4b02      	ldr	r3, [pc, #8]	; (b73d0 <hal_i2c_is_enabled+0xc>)
   b73c8:	681b      	ldr	r3, [r3, #0]
   b73ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b73cc:	9301      	str	r3, [sp, #4]
   b73ce:	bd08      	pop	{r3, pc}
   b73d0:	00030228 	.word	0x00030228

000b73d4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b73d4:	b508      	push	{r3, lr}
   b73d6:	4b02      	ldr	r3, [pc, #8]	; (b73e0 <hal_i2c_init+0xc>)
   b73d8:	681b      	ldr	r3, [r3, #0]
   b73da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b73dc:	9301      	str	r3, [sp, #4]
   b73de:	bd08      	pop	{r3, pc}
   b73e0:	00030228 	.word	0x00030228

000b73e4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b73e4:	b508      	push	{r3, lr}
   b73e6:	4b02      	ldr	r3, [pc, #8]	; (b73f0 <hal_i2c_request_ex+0xc>)
   b73e8:	681b      	ldr	r3, [r3, #0]
   b73ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b73ec:	9301      	str	r3, [sp, #4]
   b73ee:	bd08      	pop	{r3, pc}
   b73f0:	00030228 	.word	0x00030228

000b73f4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b73f4:	b508      	push	{r3, lr}
   b73f6:	4b02      	ldr	r3, [pc, #8]	; (b7400 <sock_setsockopt+0xc>)
   b73f8:	681b      	ldr	r3, [r3, #0]
   b73fa:	699b      	ldr	r3, [r3, #24]
   b73fc:	9301      	str	r3, [sp, #4]
   b73fe:	bd08      	pop	{r3, pc}
   b7400:	00030238 	.word	0x00030238

000b7404 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7404:	b508      	push	{r3, lr}
   b7406:	4b02      	ldr	r3, [pc, #8]	; (b7410 <sock_close+0xc>)
   b7408:	681b      	ldr	r3, [r3, #0]
   b740a:	69db      	ldr	r3, [r3, #28]
   b740c:	9301      	str	r3, [sp, #4]
   b740e:	bd08      	pop	{r3, pc}
   b7410:	00030238 	.word	0x00030238

000b7414 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7414:	b508      	push	{r3, lr}
   b7416:	4b02      	ldr	r3, [pc, #8]	; (b7420 <sock_connect+0xc>)
   b7418:	681b      	ldr	r3, [r3, #0]
   b741a:	6a1b      	ldr	r3, [r3, #32]
   b741c:	9301      	str	r3, [sp, #4]
   b741e:	bd08      	pop	{r3, pc}
   b7420:	00030238 	.word	0x00030238

000b7424 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7424:	b508      	push	{r3, lr}
   b7426:	4b02      	ldr	r3, [pc, #8]	; (b7430 <sock_recv+0xc>)
   b7428:	681b      	ldr	r3, [r3, #0]
   b742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b742c:	9301      	str	r3, [sp, #4]
   b742e:	bd08      	pop	{r3, pc}
   b7430:	00030238 	.word	0x00030238

000b7434 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7434:	b508      	push	{r3, lr}
   b7436:	4b02      	ldr	r3, [pc, #8]	; (b7440 <sock_send+0xc>)
   b7438:	681b      	ldr	r3, [r3, #0]
   b743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b743c:	9301      	str	r3, [sp, #4]
   b743e:	bd08      	pop	{r3, pc}
   b7440:	00030238 	.word	0x00030238

000b7444 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7444:	b508      	push	{r3, lr}
   b7446:	4b02      	ldr	r3, [pc, #8]	; (b7450 <sock_socket+0xc>)
   b7448:	681b      	ldr	r3, [r3, #0]
   b744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b744c:	9301      	str	r3, [sp, #4]
   b744e:	bd08      	pop	{r3, pc}
   b7450:	00030238 	.word	0x00030238

000b7454 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7454:	b508      	push	{r3, lr}
   b7456:	4b02      	ldr	r3, [pc, #8]	; (b7460 <hal_spi_begin+0xc>)
   b7458:	681b      	ldr	r3, [r3, #0]
   b745a:	681b      	ldr	r3, [r3, #0]
   b745c:	9301      	str	r3, [sp, #4]
   b745e:	bd08      	pop	{r3, pc}
   b7460:	00030230 	.word	0x00030230

000b7464 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b7464:	b508      	push	{r3, lr}
   b7466:	4b02      	ldr	r3, [pc, #8]	; (b7470 <hal_spi_set_bit_order+0xc>)
   b7468:	681b      	ldr	r3, [r3, #0]
   b746a:	689b      	ldr	r3, [r3, #8]
   b746c:	9301      	str	r3, [sp, #4]
   b746e:	bd08      	pop	{r3, pc}
   b7470:	00030230 	.word	0x00030230

000b7474 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b7474:	b508      	push	{r3, lr}
   b7476:	4b02      	ldr	r3, [pc, #8]	; (b7480 <hal_spi_set_data_mode+0xc>)
   b7478:	681b      	ldr	r3, [r3, #0]
   b747a:	68db      	ldr	r3, [r3, #12]
   b747c:	9301      	str	r3, [sp, #4]
   b747e:	bd08      	pop	{r3, pc}
   b7480:	00030230 	.word	0x00030230

000b7484 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b7484:	b508      	push	{r3, lr}
   b7486:	4b02      	ldr	r3, [pc, #8]	; (b7490 <hal_spi_set_clock_divider+0xc>)
   b7488:	681b      	ldr	r3, [r3, #0]
   b748a:	691b      	ldr	r3, [r3, #16]
   b748c:	9301      	str	r3, [sp, #4]
   b748e:	bd08      	pop	{r3, pc}
   b7490:	00030230 	.word	0x00030230

000b7494 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7494:	b508      	push	{r3, lr}
   b7496:	4b02      	ldr	r3, [pc, #8]	; (b74a0 <hal_spi_transfer+0xc>)
   b7498:	681b      	ldr	r3, [r3, #0]
   b749a:	695b      	ldr	r3, [r3, #20]
   b749c:	9301      	str	r3, [sp, #4]
   b749e:	bd08      	pop	{r3, pc}
   b74a0:	00030230 	.word	0x00030230

000b74a4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b74a4:	b508      	push	{r3, lr}
   b74a6:	4b02      	ldr	r3, [pc, #8]	; (b74b0 <hal_spi_init+0xc>)
   b74a8:	681b      	ldr	r3, [r3, #0]
   b74aa:	69db      	ldr	r3, [r3, #28]
   b74ac:	9301      	str	r3, [sp, #4]
   b74ae:	bd08      	pop	{r3, pc}
   b74b0:	00030230 	.word	0x00030230

000b74b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b74b4:	b508      	push	{r3, lr}
   b74b6:	4b02      	ldr	r3, [pc, #8]	; (b74c0 <hal_spi_is_enabled+0xc>)
   b74b8:	681b      	ldr	r3, [r3, #0]
   b74ba:	6a1b      	ldr	r3, [r3, #32]
   b74bc:	9301      	str	r3, [sp, #4]
   b74be:	bd08      	pop	{r3, pc}
   b74c0:	00030230 	.word	0x00030230

000b74c4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b74c4:	b508      	push	{r3, lr}
   b74c6:	4b02      	ldr	r3, [pc, #8]	; (b74d0 <hal_spi_info+0xc>)
   b74c8:	681b      	ldr	r3, [r3, #0]
   b74ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b74cc:	9301      	str	r3, [sp, #4]
   b74ce:	bd08      	pop	{r3, pc}
   b74d0:	00030230 	.word	0x00030230

000b74d4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b74d4:	b508      	push	{r3, lr}
   b74d6:	4b02      	ldr	r3, [pc, #8]	; (b74e0 <hal_spi_set_settings+0xc>)
   b74d8:	681b      	ldr	r3, [r3, #0]
   b74da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b74dc:	9301      	str	r3, [sp, #4]
   b74de:	bd08      	pop	{r3, pc}
   b74e0:	00030230 	.word	0x00030230

000b74e4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b74e4:	b508      	push	{r3, lr}
   b74e6:	4b02      	ldr	r3, [pc, #8]	; (b74f0 <hal_spi_acquire+0xc>)
   b74e8:	681b      	ldr	r3, [r3, #0]
   b74ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b74ec:	9301      	str	r3, [sp, #4]
   b74ee:	bd08      	pop	{r3, pc}
   b74f0:	00030230 	.word	0x00030230

000b74f4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b74f4:	b508      	push	{r3, lr}
   b74f6:	4b02      	ldr	r3, [pc, #8]	; (b7500 <hal_spi_release+0xc>)
   b74f8:	681b      	ldr	r3, [r3, #0]
   b74fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b74fc:	9301      	str	r3, [sp, #4]
   b74fe:	bd08      	pop	{r3, pc}
   b7500:	00030230 	.word	0x00030230

000b7504 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7504:	b508      	push	{r3, lr}
   b7506:	4b02      	ldr	r3, [pc, #8]	; (b7510 <HAL_USB_USART_Init+0xc>)
   b7508:	681b      	ldr	r3, [r3, #0]
   b750a:	681b      	ldr	r3, [r3, #0]
   b750c:	9301      	str	r3, [sp, #4]
   b750e:	bd08      	pop	{r3, pc}
   b7510:	0003024c 	.word	0x0003024c

000b7514 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7514:	b508      	push	{r3, lr}
   b7516:	4b02      	ldr	r3, [pc, #8]	; (b7520 <HAL_USB_USART_Begin+0xc>)
   b7518:	681b      	ldr	r3, [r3, #0]
   b751a:	685b      	ldr	r3, [r3, #4]
   b751c:	9301      	str	r3, [sp, #4]
   b751e:	bd08      	pop	{r3, pc}
   b7520:	0003024c 	.word	0x0003024c

000b7524 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7524:	b508      	push	{r3, lr}
   b7526:	4b02      	ldr	r3, [pc, #8]	; (b7530 <HAL_USB_USART_Available_Data+0xc>)
   b7528:	681b      	ldr	r3, [r3, #0]
   b752a:	691b      	ldr	r3, [r3, #16]
   b752c:	9301      	str	r3, [sp, #4]
   b752e:	bd08      	pop	{r3, pc}
   b7530:	0003024c 	.word	0x0003024c

000b7534 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7534:	b508      	push	{r3, lr}
   b7536:	4b02      	ldr	r3, [pc, #8]	; (b7540 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7538:	681b      	ldr	r3, [r3, #0]
   b753a:	695b      	ldr	r3, [r3, #20]
   b753c:	9301      	str	r3, [sp, #4]
   b753e:	bd08      	pop	{r3, pc}
   b7540:	0003024c 	.word	0x0003024c

000b7544 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7544:	b508      	push	{r3, lr}
   b7546:	4b02      	ldr	r3, [pc, #8]	; (b7550 <HAL_USB_USART_Receive_Data+0xc>)
   b7548:	681b      	ldr	r3, [r3, #0]
   b754a:	699b      	ldr	r3, [r3, #24]
   b754c:	9301      	str	r3, [sp, #4]
   b754e:	bd08      	pop	{r3, pc}
   b7550:	0003024c 	.word	0x0003024c

000b7554 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7554:	b508      	push	{r3, lr}
   b7556:	4b02      	ldr	r3, [pc, #8]	; (b7560 <HAL_USB_USART_Send_Data+0xc>)
   b7558:	681b      	ldr	r3, [r3, #0]
   b755a:	69db      	ldr	r3, [r3, #28]
   b755c:	9301      	str	r3, [sp, #4]
   b755e:	bd08      	pop	{r3, pc}
   b7560:	0003024c 	.word	0x0003024c

000b7564 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7564:	b508      	push	{r3, lr}
   b7566:	4b02      	ldr	r3, [pc, #8]	; (b7570 <HAL_USB_USART_Flush_Data+0xc>)
   b7568:	681b      	ldr	r3, [r3, #0]
   b756a:	6a1b      	ldr	r3, [r3, #32]
   b756c:	9301      	str	r3, [sp, #4]
   b756e:	bd08      	pop	{r3, pc}
   b7570:	0003024c 	.word	0x0003024c

000b7574 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7574:	b508      	push	{r3, lr}
   b7576:	4b02      	ldr	r3, [pc, #8]	; (b7580 <panic_+0xc>)
   b7578:	681b      	ldr	r3, [r3, #0]
   b757a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b757c:	9301      	str	r3, [sp, #4]
   b757e:	bd08      	pop	{r3, pc}
   b7580:	00030260 	.word	0x00030260

000b7584 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7584:	b508      	push	{r3, lr}
   b7586:	4b02      	ldr	r3, [pc, #8]	; (b7590 <log_message+0xc>)
   b7588:	681b      	ldr	r3, [r3, #0]
   b758a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b758c:	9301      	str	r3, [sp, #4]
   b758e:	bd08      	pop	{r3, pc}
   b7590:	00030260 	.word	0x00030260

000b7594 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b7594:	b508      	push	{r3, lr}
   b7596:	4b02      	ldr	r3, [pc, #8]	; (b75a0 <system_mode+0xc>)
   b7598:	681b      	ldr	r3, [r3, #0]
   b759a:	681b      	ldr	r3, [r3, #0]
   b759c:	9301      	str	r3, [sp, #4]
   b759e:	bd08      	pop	{r3, pc}
   b75a0:	00030220 	.word	0x00030220

000b75a4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b75a4:	b508      	push	{r3, lr}
   b75a6:	4b02      	ldr	r3, [pc, #8]	; (b75b0 <set_system_mode+0xc>)
   b75a8:	681b      	ldr	r3, [r3, #0]
   b75aa:	685b      	ldr	r3, [r3, #4]
   b75ac:	9301      	str	r3, [sp, #4]
   b75ae:	bd08      	pop	{r3, pc}
   b75b0:	00030220 	.word	0x00030220

000b75b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b75b4:	b508      	push	{r3, lr}
   b75b6:	4b02      	ldr	r3, [pc, #8]	; (b75c0 <system_delay_ms+0xc>)
   b75b8:	681b      	ldr	r3, [r3, #0]
   b75ba:	695b      	ldr	r3, [r3, #20]
   b75bc:	9301      	str	r3, [sp, #4]
   b75be:	bd08      	pop	{r3, pc}
   b75c0:	00030220 	.word	0x00030220

000b75c4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b75c4:	b508      	push	{r3, lr}
   b75c6:	4b02      	ldr	r3, [pc, #8]	; (b75d0 <system_thread_get_state+0xc>)
   b75c8:	681b      	ldr	r3, [r3, #0]
   b75ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b75cc:	9301      	str	r3, [sp, #4]
   b75ce:	bd08      	pop	{r3, pc}
   b75d0:	00030220 	.word	0x00030220

000b75d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b75d4:	b508      	push	{r3, lr}
   b75d6:	4b03      	ldr	r3, [pc, #12]	; (b75e4 <system_ctrl_set_app_request_handler+0x10>)
   b75d8:	681b      	ldr	r3, [r3, #0]
   b75da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b75de:	9301      	str	r3, [sp, #4]
   b75e0:	bd08      	pop	{r3, pc}
   b75e2:	0000      	.short	0x0000
   b75e4:	00030220 	.word	0x00030220

000b75e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b75e8:	b508      	push	{r3, lr}
   b75ea:	4b03      	ldr	r3, [pc, #12]	; (b75f8 <system_ctrl_set_result+0x10>)
   b75ec:	681b      	ldr	r3, [r3, #0]
   b75ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b75f2:	9301      	str	r3, [sp, #4]
   b75f4:	bd08      	pop	{r3, pc}
   b75f6:	0000      	.short	0x0000
   b75f8:	00030220 	.word	0x00030220

000b75fc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b75fc:	b508      	push	{r3, lr}
   b75fe:	4b02      	ldr	r3, [pc, #8]	; (b7608 <network_connect+0xc>)
   b7600:	681b      	ldr	r3, [r3, #0]
   b7602:	685b      	ldr	r3, [r3, #4]
   b7604:	9301      	str	r3, [sp, #4]
   b7606:	bd08      	pop	{r3, pc}
   b7608:	00030240 	.word	0x00030240

000b760c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b760c:	b508      	push	{r3, lr}
   b760e:	4b02      	ldr	r3, [pc, #8]	; (b7618 <network_connecting+0xc>)
   b7610:	681b      	ldr	r3, [r3, #0]
   b7612:	689b      	ldr	r3, [r3, #8]
   b7614:	9301      	str	r3, [sp, #4]
   b7616:	bd08      	pop	{r3, pc}
   b7618:	00030240 	.word	0x00030240

000b761c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b761c:	b508      	push	{r3, lr}
   b761e:	4b02      	ldr	r3, [pc, #8]	; (b7628 <network_disconnect+0xc>)
   b7620:	681b      	ldr	r3, [r3, #0]
   b7622:	68db      	ldr	r3, [r3, #12]
   b7624:	9301      	str	r3, [sp, #4]
   b7626:	bd08      	pop	{r3, pc}
   b7628:	00030240 	.word	0x00030240

000b762c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b762c:	b508      	push	{r3, lr}
   b762e:	4b02      	ldr	r3, [pc, #8]	; (b7638 <network_ready+0xc>)
   b7630:	681b      	ldr	r3, [r3, #0]
   b7632:	691b      	ldr	r3, [r3, #16]
   b7634:	9301      	str	r3, [sp, #4]
   b7636:	bd08      	pop	{r3, pc}
   b7638:	00030240 	.word	0x00030240

000b763c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b763c:	b508      	push	{r3, lr}
   b763e:	4b02      	ldr	r3, [pc, #8]	; (b7648 <network_on+0xc>)
   b7640:	681b      	ldr	r3, [r3, #0]
   b7642:	695b      	ldr	r3, [r3, #20]
   b7644:	9301      	str	r3, [sp, #4]
   b7646:	bd08      	pop	{r3, pc}
   b7648:	00030240 	.word	0x00030240

000b764c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b764c:	b508      	push	{r3, lr}
   b764e:	4b02      	ldr	r3, [pc, #8]	; (b7658 <network_off+0xc>)
   b7650:	681b      	ldr	r3, [r3, #0]
   b7652:	699b      	ldr	r3, [r3, #24]
   b7654:	9301      	str	r3, [sp, #4]
   b7656:	bd08      	pop	{r3, pc}
   b7658:	00030240 	.word	0x00030240

000b765c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b765c:	b508      	push	{r3, lr}
   b765e:	4b02      	ldr	r3, [pc, #8]	; (b7668 <network_listen+0xc>)
   b7660:	681b      	ldr	r3, [r3, #0]
   b7662:	69db      	ldr	r3, [r3, #28]
   b7664:	9301      	str	r3, [sp, #4]
   b7666:	bd08      	pop	{r3, pc}
   b7668:	00030240 	.word	0x00030240

000b766c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b766c:	b508      	push	{r3, lr}
   b766e:	4b02      	ldr	r3, [pc, #8]	; (b7678 <network_listening+0xc>)
   b7670:	681b      	ldr	r3, [r3, #0]
   b7672:	6a1b      	ldr	r3, [r3, #32]
   b7674:	9301      	str	r3, [sp, #4]
   b7676:	bd08      	pop	{r3, pc}
   b7678:	00030240 	.word	0x00030240

000b767c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b767c:	b508      	push	{r3, lr}
   b767e:	4b02      	ldr	r3, [pc, #8]	; (b7688 <network_set_listen_timeout+0xc>)
   b7680:	681b      	ldr	r3, [r3, #0]
   b7682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7684:	9301      	str	r3, [sp, #4]
   b7686:	bd08      	pop	{r3, pc}
   b7688:	00030240 	.word	0x00030240

000b768c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b768c:	b508      	push	{r3, lr}
   b768e:	4b02      	ldr	r3, [pc, #8]	; (b7698 <network_get_listen_timeout+0xc>)
   b7690:	681b      	ldr	r3, [r3, #0]
   b7692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7694:	9301      	str	r3, [sp, #4]
   b7696:	bd08      	pop	{r3, pc}
   b7698:	00030240 	.word	0x00030240

000b769c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b769c:	b508      	push	{r3, lr}
   b769e:	4b02      	ldr	r3, [pc, #8]	; (b76a8 <network_is_on+0xc>)
   b76a0:	681b      	ldr	r3, [r3, #0]
   b76a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b76a4:	9301      	str	r3, [sp, #4]
   b76a6:	bd08      	pop	{r3, pc}
   b76a8:	00030240 	.word	0x00030240

000b76ac <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b76ac:	b508      	push	{r3, lr}
   b76ae:	4b02      	ldr	r3, [pc, #8]	; (b76b8 <network_is_off+0xc>)
   b76b0:	681b      	ldr	r3, [r3, #0]
   b76b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b76b4:	9301      	str	r3, [sp, #4]
   b76b6:	bd08      	pop	{r3, pc}
   b76b8:	00030240 	.word	0x00030240

000b76bc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b76bc:	b508      	push	{r3, lr}
   b76be:	4b02      	ldr	r3, [pc, #8]	; (b76c8 <spark_process+0xc>)
   b76c0:	681b      	ldr	r3, [r3, #0]
   b76c2:	689b      	ldr	r3, [r3, #8]
   b76c4:	9301      	str	r3, [sp, #4]
   b76c6:	bd08      	pop	{r3, pc}
   b76c8:	00030244 	.word	0x00030244

000b76cc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b76cc:	b508      	push	{r3, lr}
   b76ce:	4b02      	ldr	r3, [pc, #8]	; (b76d8 <spark_cloud_flag_connected+0xc>)
   b76d0:	681b      	ldr	r3, [r3, #0]
   b76d2:	695b      	ldr	r3, [r3, #20]
   b76d4:	9301      	str	r3, [sp, #4]
   b76d6:	bd08      	pop	{r3, pc}
   b76d8:	00030244 	.word	0x00030244

000b76dc <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b76dc:	b508      	push	{r3, lr}
   b76de:	4b02      	ldr	r3, [pc, #8]	; (b76e8 <spark_sync_time+0xc>)
   b76e0:	681b      	ldr	r3, [r3, #0]
   b76e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b76e4:	9301      	str	r3, [sp, #4]
   b76e6:	bd08      	pop	{r3, pc}
   b76e8:	00030244 	.word	0x00030244

000b76ec <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b76ec:	b508      	push	{r3, lr}
   b76ee:	4b02      	ldr	r3, [pc, #8]	; (b76f8 <spark_sync_time_pending+0xc>)
   b76f0:	681b      	ldr	r3, [r3, #0]
   b76f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b76f4:	9301      	str	r3, [sp, #4]
   b76f6:	bd08      	pop	{r3, pc}
   b76f8:	00030244 	.word	0x00030244

000b76fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b76fc:	b508      	push	{r3, lr}
   b76fe:	4b02      	ldr	r3, [pc, #8]	; (b7708 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7700:	681b      	ldr	r3, [r3, #0]
   b7702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7704:	9301      	str	r3, [sp, #4]
   b7706:	bd08      	pop	{r3, pc}
   b7708:	00030244 	.word	0x00030244

000b770c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b770c:	b508      	push	{r3, lr}
   b770e:	4b02      	ldr	r3, [pc, #8]	; (b7718 <malloc+0xc>)
   b7710:	681b      	ldr	r3, [r3, #0]
   b7712:	681b      	ldr	r3, [r3, #0]
   b7714:	9301      	str	r3, [sp, #4]
   b7716:	bd08      	pop	{r3, pc}
   b7718:	0003021c 	.word	0x0003021c

000b771c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b771c:	b508      	push	{r3, lr}
   b771e:	4b02      	ldr	r3, [pc, #8]	; (b7728 <free+0xc>)
   b7720:	681b      	ldr	r3, [r3, #0]
   b7722:	685b      	ldr	r3, [r3, #4]
   b7724:	9301      	str	r3, [sp, #4]
   b7726:	bd08      	pop	{r3, pc}
   b7728:	0003021c 	.word	0x0003021c

000b772c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b772c:	b508      	push	{r3, lr}
   b772e:	4b02      	ldr	r3, [pc, #8]	; (b7738 <realloc+0xc>)
   b7730:	681b      	ldr	r3, [r3, #0]
   b7732:	689b      	ldr	r3, [r3, #8]
   b7734:	9301      	str	r3, [sp, #4]
   b7736:	bd08      	pop	{r3, pc}
   b7738:	0003021c 	.word	0x0003021c

000b773c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b773c:	b508      	push	{r3, lr}
   b773e:	4b02      	ldr	r3, [pc, #8]	; (b7748 <sprintf+0xc>)
   b7740:	681b      	ldr	r3, [r3, #0]
   b7742:	68db      	ldr	r3, [r3, #12]
   b7744:	9301      	str	r3, [sp, #4]
   b7746:	bd08      	pop	{r3, pc}
   b7748:	0003021c 	.word	0x0003021c

000b774c <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b774c:	b508      	push	{r3, lr}
   b774e:	4b02      	ldr	r3, [pc, #8]	; (b7758 <siprintf+0xc>)
   b7750:	681b      	ldr	r3, [r3, #0]
   b7752:	691b      	ldr	r3, [r3, #16]
   b7754:	9301      	str	r3, [sp, #4]
   b7756:	bd08      	pop	{r3, pc}
   b7758:	0003021c 	.word	0x0003021c

000b775c <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b775c:	b508      	push	{r3, lr}
   b775e:	4b02      	ldr	r3, [pc, #8]	; (b7768 <vsnprintf+0xc>)
   b7760:	681b      	ldr	r3, [r3, #0]
   b7762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7764:	9301      	str	r3, [sp, #4]
   b7766:	bd08      	pop	{r3, pc}
   b7768:	0003021c 	.word	0x0003021c

000b776c <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b776c:	b508      	push	{r3, lr}
   b776e:	4b02      	ldr	r3, [pc, #8]	; (b7778 <_malloc_r+0xc>)
   b7770:	681b      	ldr	r3, [r3, #0]
   b7772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7774:	9301      	str	r3, [sp, #4]
   b7776:	bd08      	pop	{r3, pc}
   b7778:	0003021c 	.word	0x0003021c

000b777c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b777c:	b508      	push	{r3, lr}
   b777e:	4b02      	ldr	r3, [pc, #8]	; (b7788 <__errno+0xc>)
   b7780:	681b      	ldr	r3, [r3, #0]
   b7782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7784:	9301      	str	r3, [sp, #4]
   b7786:	bd08      	pop	{r3, pc}
   b7788:	0003021c 	.word	0x0003021c

000b778c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b778c:	b508      	push	{r3, lr}
   b778e:	4b02      	ldr	r3, [pc, #8]	; (b7798 <__assert_func+0xc>)
   b7790:	681b      	ldr	r3, [r3, #0]
   b7792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7794:	9301      	str	r3, [sp, #4]
   b7796:	bd08      	pop	{r3, pc}
   b7798:	0003021c 	.word	0x0003021c

000b779c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b779c:	b508      	push	{r3, lr}
   b779e:	4b02      	ldr	r3, [pc, #8]	; (b77a8 <newlib_impure_ptr_callback+0xc>)
   b77a0:	681b      	ldr	r3, [r3, #0]
   b77a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b77a4:	9301      	str	r3, [sp, #4]
   b77a6:	bd08      	pop	{r3, pc}
   b77a8:	0003021c 	.word	0x0003021c

000b77ac <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b77ac:	b508      	push	{r3, lr}
   b77ae:	4b02      	ldr	r3, [pc, #8]	; (b77b8 <localtime_r+0xc>)
   b77b0:	681b      	ldr	r3, [r3, #0]
   b77b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b77b4:	9301      	str	r3, [sp, #4]
   b77b6:	bd08      	pop	{r3, pc}
   b77b8:	0003021c 	.word	0x0003021c

000b77bc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b77bc:	2200      	movs	r2, #0
   b77be:	6840      	ldr	r0, [r0, #4]
   b77c0:	4611      	mov	r1, r2
   b77c2:	f7ff bf53 	b.w	b766c <network_listening>

000b77c6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b77c6:	2200      	movs	r2, #0
   b77c8:	6840      	ldr	r0, [r0, #4]
   b77ca:	4611      	mov	r1, r2
   b77cc:	f7ff bf5e 	b.w	b768c <network_get_listen_timeout>

000b77d0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b77d0:	6840      	ldr	r0, [r0, #4]
   b77d2:	2200      	movs	r2, #0
   b77d4:	f7ff bf52 	b.w	b767c <network_set_listen_timeout>

000b77d8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b77d8:	6840      	ldr	r0, [r0, #4]
   b77da:	2200      	movs	r2, #0
   b77dc:	f081 0101 	eor.w	r1, r1, #1
   b77e0:	f7ff bf3c 	b.w	b765c <network_listen>

000b77e4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b77e4:	2300      	movs	r3, #0
   b77e6:	6840      	ldr	r0, [r0, #4]
   b77e8:	461a      	mov	r2, r3
   b77ea:	4619      	mov	r1, r3
   b77ec:	f7ff bf2e 	b.w	b764c <network_off>

000b77f0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b77f0:	2300      	movs	r3, #0
   b77f2:	6840      	ldr	r0, [r0, #4]
   b77f4:	461a      	mov	r2, r3
   b77f6:	4619      	mov	r1, r3
   b77f8:	f7ff bf20 	b.w	b763c <network_on>

000b77fc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b77fc:	2200      	movs	r2, #0
   b77fe:	6840      	ldr	r0, [r0, #4]
   b7800:	4611      	mov	r1, r2
   b7802:	f7ff bf13 	b.w	b762c <network_ready>

000b7806 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7806:	2200      	movs	r2, #0
   b7808:	6840      	ldr	r0, [r0, #4]
   b780a:	4611      	mov	r1, r2
   b780c:	f7ff befe 	b.w	b760c <network_connecting>

000b7810 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7810:	6840      	ldr	r0, [r0, #4]
   b7812:	2200      	movs	r2, #0
   b7814:	2102      	movs	r1, #2
   b7816:	f7ff bf01 	b.w	b761c <network_disconnect>

000b781a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b781a:	2300      	movs	r3, #0
   b781c:	6840      	ldr	r0, [r0, #4]
   b781e:	461a      	mov	r2, r3
   b7820:	f7ff beec 	b.w	b75fc <network_connect>

000b7824 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7824:	4b02      	ldr	r3, [pc, #8]	; (b7830 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7826:	2203      	movs	r2, #3
   b7828:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b782a:	4a02      	ldr	r2, [pc, #8]	; (b7834 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b782c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b782e:	4770      	bx	lr
   b7830:	2003e640 	.word	0x2003e640
   b7834:	000bcf1c 	.word	0x000bcf1c

000b7838 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7838:	2100      	movs	r1, #0
   b783a:	f7ff be5b 	b.w	b74f4 <hal_spi_release>

000b783e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b783e:	2100      	movs	r1, #0
   b7840:	f7ff be50 	b.w	b74e4 <hal_spi_acquire>

000b7844 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7844:	b510      	push	{r4, lr}
   b7846:	4604      	mov	r4, r0
   b7848:	4608      	mov	r0, r1
{
    _spi = spi;
   b784a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b784c:	f7ff fe2a 	bl	b74a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7850:	2300      	movs	r3, #0
   b7852:	6063      	str	r3, [r4, #4]
}
   b7854:	4620      	mov	r0, r4
   b7856:	bd10      	pop	{r4, pc}

000b7858 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7858:	b513      	push	{r0, r1, r4, lr}
   b785a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b785c:	7800      	ldrb	r0, [r0, #0]
   b785e:	f7ff ffee 	bl	b783e <_ZN8SPIClass4lockEv.isra.0>
   b7862:	b958      	cbnz	r0, b787c <_ZN8SPIClass5beginEv+0x24>
   b7864:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7866:	9001      	str	r0, [sp, #4]
   b7868:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b786c:	f7ff fdf2 	bl	b7454 <hal_spi_begin>
        unlock();
   b7870:	9801      	ldr	r0, [sp, #4]
    }
}
   b7872:	b002      	add	sp, #8
   b7874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7878:	f7ff bfde 	b.w	b7838 <_ZN8SPIClass6unlockEv.isra.0>
   b787c:	b002      	add	sp, #8
   b787e:	bd10      	pop	{r4, pc}

000b7880 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b7880:	b513      	push	{r0, r1, r4, lr}
   b7882:	4604      	mov	r4, r0
    if (!lock())
   b7884:	7800      	ldrb	r0, [r0, #0]
{
   b7886:	9101      	str	r1, [sp, #4]
    if (!lock())
   b7888:	f7ff ffd9 	bl	b783e <_ZN8SPIClass4lockEv.isra.0>
   b788c:	9901      	ldr	r1, [sp, #4]
   b788e:	b948      	cbnz	r0, b78a4 <_ZN8SPIClass11setBitOrderEh+0x24>
   b7890:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b7892:	9001      	str	r0, [sp, #4]
   b7894:	f7ff fde6 	bl	b7464 <hal_spi_set_bit_order>
        unlock();
   b7898:	9801      	ldr	r0, [sp, #4]
    }
}
   b789a:	b002      	add	sp, #8
   b789c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b78a0:	f7ff bfca 	b.w	b7838 <_ZN8SPIClass6unlockEv.isra.0>
   b78a4:	b002      	add	sp, #8
   b78a6:	bd10      	pop	{r4, pc}

000b78a8 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b78a8:	b513      	push	{r0, r1, r4, lr}
   b78aa:	4604      	mov	r4, r0
    if (!lock())
   b78ac:	7800      	ldrb	r0, [r0, #0]
{
   b78ae:	9101      	str	r1, [sp, #4]
    if (!lock())
   b78b0:	f7ff ffc5 	bl	b783e <_ZN8SPIClass4lockEv.isra.0>
   b78b4:	9901      	ldr	r1, [sp, #4]
   b78b6:	b948      	cbnz	r0, b78cc <_ZN8SPIClass11setDataModeEh+0x24>
   b78b8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b78ba:	9001      	str	r0, [sp, #4]
   b78bc:	f7ff fdda 	bl	b7474 <hal_spi_set_data_mode>
        unlock();
   b78c0:	9801      	ldr	r0, [sp, #4]
    }
}
   b78c2:	b002      	add	sp, #8
   b78c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b78c8:	f7ff bfb6 	b.w	b7838 <_ZN8SPIClass6unlockEv.isra.0>
   b78cc:	b002      	add	sp, #8
   b78ce:	bd10      	pop	{r4, pc}

000b78d0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b78d0:	7800      	ldrb	r0, [r0, #0]
   b78d2:	f7ff bfb1 	b.w	b7838 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b78d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b78d8:	0840      	lsrs	r0, r0, #1
{
   b78da:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b78dc:	6018      	str	r0, [r3, #0]
   b78de:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b78e0:	6818      	ldr	r0, [r3, #0]
   b78e2:	4288      	cmp	r0, r1
   b78e4:	b2e5      	uxtb	r5, r4
   b78e6:	d906      	bls.n	b78f6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b78e8:	3401      	adds	r4, #1
   b78ea:	2c08      	cmp	r4, #8
   b78ec:	d002      	beq.n	b78f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b78ee:	0840      	lsrs	r0, r0, #1
   b78f0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b78f2:	e7f5      	b.n	b78e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b78f4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b78f6:	4b02      	ldr	r3, [pc, #8]	; (b7900 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b78f8:	5d5b      	ldrb	r3, [r3, r5]
   b78fa:	7013      	strb	r3, [r2, #0]
}
   b78fc:	bd30      	pop	{r4, r5, pc}
   b78fe:	bf00      	nop
   b7900:	000bcf50 	.word	0x000bcf50

000b7904 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7908:	4606      	mov	r6, r0
   b790a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b790c:	7800      	ldrb	r0, [r0, #0]
{
   b790e:	460c      	mov	r4, r1
    CHECK(lock());
   b7910:	f7ff ff95 	bl	b783e <_ZN8SPIClass4lockEv.isra.0>
   b7914:	2800      	cmp	r0, #0
   b7916:	db1b      	blt.n	b7950 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7918:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b791a:	2214      	movs	r2, #20
   b791c:	2100      	movs	r1, #0
   b791e:	a809      	add	r0, sp, #36	; 0x24
   b7920:	f002 fd78 	bl	ba414 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7924:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7926:	2200      	movs	r2, #0
   b7928:	a909      	add	r1, sp, #36	; 0x24
   b792a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b792c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7930:	f7ff fdc8 	bl	b74c4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7934:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7938:	b113      	cbz	r3, b7940 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b793a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b793e:	b155      	cbz	r5, b7956 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7940:	2700      	movs	r7, #0
   b7942:	46b9      	mov	r9, r7
   b7944:	46b8      	mov	r8, r7
   b7946:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7948:	7923      	ldrb	r3, [r4, #4]
   b794a:	b15d      	cbz	r5, b7964 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b794c:	b1c3      	cbz	r3, b7980 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b794e:	2000      	movs	r0, #0
}
   b7950:	b00f      	add	sp, #60	; 0x3c
   b7952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7956:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b795a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b795e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7962:	e7f1      	b.n	b7948 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7964:	2b00      	cmp	r3, #0
   b7966:	d135      	bne.n	b79d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7968:	68a3      	ldr	r3, [r4, #8]
   b796a:	4543      	cmp	r3, r8
   b796c:	d108      	bne.n	b7980 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b796e:	f88d 9020 	strb.w	r9, [sp, #32]
   b7972:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7976:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b797a:	89a3      	ldrh	r3, [r4, #12]
   b797c:	429a      	cmp	r2, r3
   b797e:	d0e6      	beq.n	b794e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7980:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7982:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7984:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7988:	980a      	ldr	r0, [sp, #40]	; 0x28
   b798a:	ab04      	add	r3, sp, #16
   b798c:	f10d 020f 	add.w	r2, sp, #15
   b7990:	f7ff ffa2 	bl	b78d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7994:	7921      	ldrb	r1, [r4, #4]
   b7996:	b985      	cbnz	r5, b79ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7998:	b989      	cbnz	r1, b79be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b799a:	68a3      	ldr	r3, [r4, #8]
   b799c:	4543      	cmp	r3, r8
   b799e:	d30e      	bcc.n	b79be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b79a0:	f88d 9020 	strb.w	r9, [sp, #32]
   b79a4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b79a8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b79ac:	89a3      	ldrh	r3, [r4, #12]
   b79ae:	429a      	cmp	r2, r3
   b79b0:	d105      	bne.n	b79be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b79b2:	9b04      	ldr	r3, [sp, #16]
   b79b4:	4543      	cmp	r3, r8
   b79b6:	d102      	bne.n	b79be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b79b8:	e7c9      	b.n	b794e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b79ba:	2900      	cmp	r1, #0
   b79bc:	d1f9      	bne.n	b79b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b79be:	2300      	movs	r3, #0
   b79c0:	9301      	str	r3, [sp, #4]
   b79c2:	7b63      	ldrb	r3, [r4, #13]
   b79c4:	9300      	str	r3, [sp, #0]
   b79c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b79ca:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b79cc:	7830      	ldrb	r0, [r6, #0]
   b79ce:	f7ff fd81 	bl	b74d4 <hal_spi_set_settings>
   b79d2:	e7bc      	b.n	b794e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b79d4:	e9cd 5500 	strd	r5, r5, [sp]
   b79d8:	462b      	mov	r3, r5
   b79da:	462a      	mov	r2, r5
   b79dc:	2101      	movs	r1, #1
   b79de:	e7f5      	b.n	b79cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b79e0 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b79e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b79e4:	b088      	sub	sp, #32
    unsigned clock = 0;
   b79e6:	2300      	movs	r3, #0
{
   b79e8:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b79ea:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b79ec:	9302      	str	r3, [sp, #8]
{
   b79ee:	460e      	mov	r6, r1
   b79f0:	4617      	mov	r7, r2
    if (!lock())
   b79f2:	f7ff ff24 	bl	b783e <_ZN8SPIClass4lockEv.isra.0>
   b79f6:	4605      	mov	r5, r0
   b79f8:	bb00      	cbnz	r0, b7a3c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b79fa:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b79fe:	4601      	mov	r1, r0
   b7a00:	2214      	movs	r2, #20
   b7a02:	a803      	add	r0, sp, #12
   b7a04:	f002 fd06 	bl	ba414 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7a08:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7a0a:	462a      	mov	r2, r5
   b7a0c:	a903      	add	r1, sp, #12
   b7a0e:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b7a10:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b7a14:	f7ff fd56 	bl	b74c4 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b7a18:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b7a1a:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b7a1e:	ab02      	add	r3, sp, #8
   b7a20:	f10d 0207 	add.w	r2, sp, #7
   b7a24:	fb07 f106 	mul.w	r1, r7, r6
   b7a28:	f7ff ff56 	bl	b78d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b7a2c:	7820      	ldrb	r0, [r4, #0]
   b7a2e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b7a32:	f7ff fd27 	bl	b7484 <hal_spi_set_clock_divider>
        unlock();
   b7a36:	7820      	ldrb	r0, [r4, #0]
   b7a38:	f7ff fefe 	bl	b7838 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b7a3c:	9802      	ldr	r0, [sp, #8]
   b7a3e:	b008      	add	sp, #32
   b7a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7a44 <_ZN8SPIClass15setClockDividerEh>:
{
   b7a44:	b538      	push	{r3, r4, r5, lr}
   b7a46:	4604      	mov	r4, r0
    if (!lock())
   b7a48:	7800      	ldrb	r0, [r0, #0]
{
   b7a4a:	460d      	mov	r5, r1
    if (!lock())
   b7a4c:	f7ff fef7 	bl	b783e <_ZN8SPIClass4lockEv.isra.0>
   b7a50:	4603      	mov	r3, r0
   b7a52:	b9d0      	cbnz	r0, b7a8a <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b7a54:	6861      	ldr	r1, [r4, #4]
   b7a56:	b199      	cbz	r1, b7a80 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b7a58:	4a0c      	ldr	r2, [pc, #48]	; (b7a8c <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b7a5a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b7a5e:	4285      	cmp	r5, r0
   b7a60:	d002      	beq.n	b7a68 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b7a62:	3301      	adds	r3, #1
   b7a64:	2b08      	cmp	r3, #8
   b7a66:	d1f8      	bne.n	b7a5a <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b7a68:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b7a6a:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b7a6c:	2201      	movs	r2, #1
   b7a6e:	40d9      	lsrs	r1, r3
   b7a70:	4620      	mov	r0, r4
   b7a72:	f7ff ffb5 	bl	b79e0 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b7a76:	7820      	ldrb	r0, [r4, #0]
}
   b7a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b7a7c:	f7ff bedc 	b.w	b7838 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b7a80:	7820      	ldrb	r0, [r4, #0]
   b7a82:	4629      	mov	r1, r5
   b7a84:	f7ff fcfe 	bl	b7484 <hal_spi_set_clock_divider>
   b7a88:	e7f5      	b.n	b7a76 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b7a8a:	bd38      	pop	{r3, r4, r5, pc}
   b7a8c:	000bcf50 	.word	0x000bcf50

000b7a90 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b7a90:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7a92:	7800      	ldrb	r0, [r0, #0]
   b7a94:	f7ff fcfe 	bl	b7494 <hal_spi_transfer>
}
   b7a98:	b2c0      	uxtb	r0, r0
   b7a9a:	bd08      	pop	{r3, pc}

000b7a9c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b7a9c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7a9e:	4b09      	ldr	r3, [pc, #36]	; (b7ac4 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7aa0:	4c09      	ldr	r4, [pc, #36]	; (b7ac8 <_GLOBAL__sub_I_System+0x2c>)
   b7aa2:	2202      	movs	r2, #2
   b7aa4:	601a      	str	r2, [r3, #0]
   b7aa6:	2000      	movs	r0, #0
    SleepResult() {}
   b7aa8:	4b08      	ldr	r3, [pc, #32]	; (b7acc <_GLOBAL__sub_I_System+0x30>)
   b7aaa:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7aac:	e9c4 0000 	strd	r0, r0, [r4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7ab0:	f7ff fd78 	bl	b75a4 <set_system_mode>
SystemClass System;
   b7ab4:	4620      	mov	r0, r4
   b7ab6:	4a06      	ldr	r2, [pc, #24]	; (b7ad0 <_GLOBAL__sub_I_System+0x34>)
   b7ab8:	4906      	ldr	r1, [pc, #24]	; (b7ad4 <_GLOBAL__sub_I_System+0x38>)
   b7aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b7abe:	f001 baf3 	b.w	b90a8 <__aeabi_atexit>
   b7ac2:	bf00      	nop
   b7ac4:	2003e654 	.word	0x2003e654
   b7ac8:	2003e648 	.word	0x2003e648
   b7acc:	ffff0000 	.word	0xffff0000
   b7ad0:	2003e208 	.word	0x2003e208
   b7ad4:	000b40e9 	.word	0x000b40e9

000b7ad8 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b7ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b7adc:	1e93      	subs	r3, r2, #2
{
   b7ade:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b7ae0:	2b22      	cmp	r3, #34	; 0x22
   b7ae2:	f04f 0300 	mov.w	r3, #0
{
   b7ae6:	460d      	mov	r5, r1
   b7ae8:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b7aea:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b7aee:	d927      	bls.n	b7b40 <ltoa+0x68>

      if (10 == base && N < 0L)
   b7af0:	2800      	cmp	r0, #0
   b7af2:	da2a      	bge.n	b7b4a <ltoa+0x72>
      {
            *head++ = '-';
   b7af4:	462e      	mov	r6, r5
   b7af6:	232d      	movs	r3, #45	; 0x2d
   b7af8:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b7afc:	4240      	negs	r0, r0
   b7afe:	240a      	movs	r4, #10
      *tail-- = '\0';
   b7b00:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b7b04:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b7b08:	4622      	mov	r2, r4
   b7b0a:	4601      	mov	r1, r0
   b7b0c:	a801      	add	r0, sp, #4
   b7b0e:	f002 fc45 	bl	ba39c <ldiv>
   b7b12:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b7b14:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b7b16:	2b09      	cmp	r3, #9
   b7b18:	bfcc      	ite	gt
   b7b1a:	2237      	movgt	r2, #55	; 0x37
   b7b1c:	2230      	movle	r2, #48	; 0x30
   b7b1e:	fa52 f383 	uxtab	r3, r2, r3
   b7b22:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b7b26:	f108 0801 	add.w	r8, r8, #1
   b7b2a:	2800      	cmp	r0, #0
   b7b2c:	d1ec      	bne.n	b7b08 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b7b2e:	4642      	mov	r2, r8
   b7b30:	1c79      	adds	r1, r7, #1
   b7b32:	4630      	mov	r0, r6
   b7b34:	f002 fc46 	bl	ba3c4 <memcpy>
      return str;
}
   b7b38:	4628      	mov	r0, r5
   b7b3a:	b00c      	add	sp, #48	; 0x30
   b7b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b7b40:	2a0a      	cmp	r2, #10
   b7b42:	d0d5      	beq.n	b7af0 <ltoa+0x18>
      if (uarg)
   b7b44:	b118      	cbz	r0, b7b4e <ltoa+0x76>
   b7b46:	462e      	mov	r6, r5
   b7b48:	e7da      	b.n	b7b00 <ltoa+0x28>
   b7b4a:	240a      	movs	r4, #10
   b7b4c:	e7fa      	b.n	b7b44 <ltoa+0x6c>
      else  *tail-- = '0';
   b7b4e:	2330      	movs	r3, #48	; 0x30
   b7b50:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b7b54:	462e      	mov	r6, r5
   b7b56:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b7b5a:	f04f 0802 	mov.w	r8, #2
   b7b5e:	e7e6      	b.n	b7b2e <ltoa+0x56>

000b7b60 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7b60:	b510      	push	{r4, lr}
   b7b62:	4604      	mov	r4, r0
{
	free(buffer);
   b7b64:	6800      	ldr	r0, [r0, #0]
   b7b66:	f7ff fdd9 	bl	b771c <free>
}
   b7b6a:	4620      	mov	r0, r4
   b7b6c:	bd10      	pop	{r4, pc}

000b7b6e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7b6e:	b510      	push	{r4, lr}
   b7b70:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7b72:	6800      	ldr	r0, [r0, #0]
   b7b74:	b108      	cbz	r0, b7b7a <_ZN6String10invalidateEv+0xc>
   b7b76:	f7ff fdd1 	bl	b771c <free>
	buffer = NULL;
   b7b7a:	2300      	movs	r3, #0
	capacity = len = 0;
   b7b7c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7b80:	6023      	str	r3, [r4, #0]
}
   b7b82:	bd10      	pop	{r4, pc}

000b7b84 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7b84:	b538      	push	{r3, r4, r5, lr}
   b7b86:	4604      	mov	r4, r0
   b7b88:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7b8a:	6800      	ldr	r0, [r0, #0]
   b7b8c:	3101      	adds	r1, #1
   b7b8e:	f7ff fdcd 	bl	b772c <realloc>
	if (newbuffer) {
   b7b92:	b110      	cbz	r0, b7b9a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7b94:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7b98:	2001      	movs	r0, #1
	}
	return 0;
}
   b7b9a:	bd38      	pop	{r3, r4, r5, pc}

000b7b9c <_ZN6String7reserveEj>:
{
   b7b9c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7b9e:	6803      	ldr	r3, [r0, #0]
{
   b7ba0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7ba2:	b123      	cbz	r3, b7bae <_ZN6String7reserveEj+0x12>
   b7ba4:	6843      	ldr	r3, [r0, #4]
   b7ba6:	428b      	cmp	r3, r1
   b7ba8:	d301      	bcc.n	b7bae <_ZN6String7reserveEj+0x12>
   b7baa:	2001      	movs	r0, #1
}
   b7bac:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7bae:	4620      	mov	r0, r4
   b7bb0:	f7ff ffe8 	bl	b7b84 <_ZN6String12changeBufferEj>
   b7bb4:	2800      	cmp	r0, #0
   b7bb6:	d0f9      	beq.n	b7bac <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7bb8:	68a3      	ldr	r3, [r4, #8]
   b7bba:	2b00      	cmp	r3, #0
   b7bbc:	d1f5      	bne.n	b7baa <_ZN6String7reserveEj+0xe>
   b7bbe:	6822      	ldr	r2, [r4, #0]
   b7bc0:	7013      	strb	r3, [r2, #0]
   b7bc2:	e7f2      	b.n	b7baa <_ZN6String7reserveEj+0xe>

000b7bc4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7bc6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7bc8:	4611      	mov	r1, r2
   b7bca:	9201      	str	r2, [sp, #4]
{
   b7bcc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7bce:	f7ff ffe5 	bl	b7b9c <_ZN6String7reserveEj>
   b7bd2:	9a01      	ldr	r2, [sp, #4]
   b7bd4:	b928      	cbnz	r0, b7be2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7bd6:	4620      	mov	r0, r4
   b7bd8:	f7ff ffc9 	bl	b7b6e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7bdc:	4620      	mov	r0, r4
   b7bde:	b003      	add	sp, #12
   b7be0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7be2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7be4:	4629      	mov	r1, r5
   b7be6:	6820      	ldr	r0, [r4, #0]
   b7be8:	f002 fbec 	bl	ba3c4 <memcpy>
	buffer[len] = 0;
   b7bec:	6822      	ldr	r2, [r4, #0]
   b7bee:	68a3      	ldr	r3, [r4, #8]
   b7bf0:	2100      	movs	r1, #0
   b7bf2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7bf4:	e7f2      	b.n	b7bdc <_ZN6String4copyEPKcj+0x18>

000b7bf6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7bf6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7bf8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7bfa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7bfe:	4604      	mov	r4, r0
	len = 0;
   b7c00:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7c02:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7c04:	b141      	cbz	r1, b7c18 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7c06:	4608      	mov	r0, r1
   b7c08:	9101      	str	r1, [sp, #4]
   b7c0a:	f002 fc89 	bl	ba520 <strlen>
   b7c0e:	9901      	ldr	r1, [sp, #4]
   b7c10:	4602      	mov	r2, r0
   b7c12:	4620      	mov	r0, r4
   b7c14:	f7ff ffd6 	bl	b7bc4 <_ZN6String4copyEPKcj>
}
   b7c18:	4620      	mov	r0, r4
   b7c1a:	b002      	add	sp, #8
   b7c1c:	bd10      	pop	{r4, pc}

000b7c1e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b7c1e:	b538      	push	{r3, r4, r5, lr}
   b7c20:	4605      	mov	r5, r0
	if (buffer) {
   b7c22:	6800      	ldr	r0, [r0, #0]
{
   b7c24:	460c      	mov	r4, r1
	if (buffer) {
   b7c26:	b168      	cbz	r0, b7c44 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b7c28:	686a      	ldr	r2, [r5, #4]
   b7c2a:	688b      	ldr	r3, [r1, #8]
   b7c2c:	429a      	cmp	r2, r3
   b7c2e:	d307      	bcc.n	b7c40 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7c30:	6809      	ldr	r1, [r1, #0]
   b7c32:	f002 fc6d 	bl	ba510 <strcpy>
			len = rhs.len;
   b7c36:	68a3      	ldr	r3, [r4, #8]
   b7c38:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b7c3a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b7c3c:	60a3      	str	r3, [r4, #8]
}
   b7c3e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7c40:	f7ff fd6c 	bl	b771c <free>
	buffer = rhs.buffer;
   b7c44:	6823      	ldr	r3, [r4, #0]
   b7c46:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b7c48:	6863      	ldr	r3, [r4, #4]
   b7c4a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b7c4c:	68a3      	ldr	r3, [r4, #8]
   b7c4e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7c50:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b7c52:	e9c4 3300 	strd	r3, r3, [r4]
   b7c56:	e7f1      	b.n	b7c3c <_ZN6String4moveERS_+0x1e>

000b7c58 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b7c58:	4288      	cmp	r0, r1
{
   b7c5a:	b510      	push	{r4, lr}
   b7c5c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b7c5e:	d001      	beq.n	b7c64 <_ZN6StringaSEOS_+0xc>
   b7c60:	f7ff ffdd 	bl	b7c1e <_ZN6String4moveERS_>
	return *this;
}
   b7c64:	4620      	mov	r0, r4
   b7c66:	bd10      	pop	{r4, pc}

000b7c68 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b7c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b7c6a:	429a      	cmp	r2, r3
{
   b7c6c:	460f      	mov	r7, r1
   b7c6e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b7c70:	490c      	ldr	r1, [pc, #48]	; (b7ca4 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b7c72:	bf88      	it	hi
   b7c74:	4613      	movhi	r3, r2
{
   b7c76:	4614      	mov	r4, r2
   b7c78:	4606      	mov	r6, r0
	if (left > right) {
   b7c7a:	bf84      	itt	hi
   b7c7c:	462c      	movhi	r4, r5
   b7c7e:	461d      	movhi	r5, r3
	String out;
   b7c80:	f7ff ffb9 	bl	b7bf6 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b7c84:	68bb      	ldr	r3, [r7, #8]
   b7c86:	42a3      	cmp	r3, r4
   b7c88:	d30a      	bcc.n	b7ca0 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b7c8a:	6839      	ldr	r1, [r7, #0]
   b7c8c:	42ab      	cmp	r3, r5
   b7c8e:	bf94      	ite	ls
   b7c90:	ebc4 0203 	rsbls	r2, r4, r3
   b7c94:	ebc4 0205 	rsbhi	r2, r4, r5
   b7c98:	4421      	add	r1, r4
   b7c9a:	4630      	mov	r0, r6
   b7c9c:	f7ff ff92 	bl	b7bc4 <_ZN6String4copyEPKcj>
	return out;
}
   b7ca0:	4630      	mov	r0, r6
   b7ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7ca4:	000bc440 	.word	0x000bc440

000b7ca8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b7ca8:	b510      	push	{r4, lr}
   b7caa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b7cac:	6800      	ldr	r0, [r0, #0]
   b7cae:	b108      	cbz	r0, b7cb4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b7cb0:	f7ff fae0 	bl	b7274 <os_mutex_recursive_destroy>
    }
   b7cb4:	4620      	mov	r0, r4
   b7cb6:	bd10      	pop	{r4, pc}

000b7cb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b7cb8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b7cba:	4c06      	ldr	r4, [pc, #24]	; (b7cd4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b7cbc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b7cbe:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b7cc0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b7cc2:	f7ff facf 	bl	b7264 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b7cc6:	4620      	mov	r0, r4
   b7cc8:	4a03      	ldr	r2, [pc, #12]	; (b7cd8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b7cca:	4904      	ldr	r1, [pc, #16]	; (b7cdc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b7ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b7cd0:	f001 b9ea 	b.w	b90a8 <__aeabi_atexit>
   b7cd4:	2003e658 	.word	0x2003e658
   b7cd8:	2003e208 	.word	0x2003e208
   b7cdc:	000b7ca9 	.word	0x000b7ca9

000b7ce0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7ce2:	4606      	mov	r6, r0
   b7ce4:	460d      	mov	r5, r1
  size_t n = 0;
   b7ce6:	188f      	adds	r7, r1, r2
   b7ce8:	2400      	movs	r4, #0
  while (size--) {
   b7cea:	42bd      	cmp	r5, r7
   b7cec:	d00c      	beq.n	b7d08 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7cee:	6833      	ldr	r3, [r6, #0]
   b7cf0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7cf4:	689b      	ldr	r3, [r3, #8]
   b7cf6:	4630      	mov	r0, r6
   b7cf8:	4798      	blx	r3
     if (chunk>=0)
   b7cfa:	1e03      	subs	r3, r0, #0
   b7cfc:	db01      	blt.n	b7d02 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7cfe:	441c      	add	r4, r3
  while (size--) {
   b7d00:	e7f3      	b.n	b7cea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7d02:	2c00      	cmp	r4, #0
   b7d04:	bf08      	it	eq
   b7d06:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7d08:	4620      	mov	r0, r4
   b7d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7d0c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b7d0c:	b513      	push	{r0, r1, r4, lr}
   b7d0e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b7d10:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7d12:	b159      	cbz	r1, b7d2c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7d14:	9101      	str	r1, [sp, #4]
   b7d16:	f002 fc03 	bl	ba520 <strlen>
   b7d1a:	6823      	ldr	r3, [r4, #0]
   b7d1c:	9901      	ldr	r1, [sp, #4]
   b7d1e:	68db      	ldr	r3, [r3, #12]
   b7d20:	4602      	mov	r2, r0
   b7d22:	4620      	mov	r0, r4
    }
   b7d24:	b002      	add	sp, #8
   b7d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7d2a:	4718      	bx	r3
    }
   b7d2c:	b002      	add	sp, #8
   b7d2e:	bd10      	pop	{r4, pc}

000b7d30 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7d30:	b508      	push	{r3, lr}
  return write(str);
   b7d32:	f7ff ffeb 	bl	b7d0c <_ZN5Print5writeEPKc>
}
   b7d36:	bd08      	pop	{r3, pc}

000b7d38 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7d38:	6803      	ldr	r3, [r0, #0]
   b7d3a:	689b      	ldr	r3, [r3, #8]
   b7d3c:	4718      	bx	r3

000b7d3e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7d3e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7d40:	210d      	movs	r1, #13
{
   b7d42:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7d44:	f7ff fff8 	bl	b7d38 <_ZN5Print5printEc>
  n += print('\n');
   b7d48:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7d4a:	4604      	mov	r4, r0
  n += print('\n');
   b7d4c:	4628      	mov	r0, r5
   b7d4e:	f7ff fff3 	bl	b7d38 <_ZN5Print5printEc>
  return n;
}
   b7d52:	4420      	add	r0, r4
   b7d54:	bd38      	pop	{r3, r4, r5, pc}

000b7d56 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7d56:	b538      	push	{r3, r4, r5, lr}
   b7d58:	4605      	mov	r5, r0
  return write(str);
   b7d5a:	f7ff ffd7 	bl	b7d0c <_ZN5Print5writeEPKc>
   b7d5e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7d60:	4628      	mov	r0, r5
   b7d62:	f7ff ffec 	bl	b7d3e <_ZN5Print7printlnEv>
  return n;
}
   b7d66:	4420      	add	r0, r4
   b7d68:	bd38      	pop	{r3, r4, r5, pc}

000b7d6a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7d6a:	b530      	push	{r4, r5, lr}
   b7d6c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7d6e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7d70:	2a01      	cmp	r2, #1
  *str = '\0';
   b7d72:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7d76:	bf98      	it	ls
   b7d78:	220a      	movls	r2, #10
   b7d7a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7d7c:	460d      	mov	r5, r1
   b7d7e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7d82:	fb01 5312 	mls	r3, r1, r2, r5
   b7d86:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7d8a:	2b09      	cmp	r3, #9
   b7d8c:	bf94      	ite	ls
   b7d8e:	3330      	addls	r3, #48	; 0x30
   b7d90:	3337      	addhi	r3, #55	; 0x37
   b7d92:	b2db      	uxtb	r3, r3
  } while(n);
   b7d94:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7d96:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7d9a:	d9ef      	bls.n	b7d7c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7d9c:	4621      	mov	r1, r4
   b7d9e:	f7ff ffb5 	bl	b7d0c <_ZN5Print5writeEPKc>
}
   b7da2:	b00b      	add	sp, #44	; 0x2c
   b7da4:	bd30      	pop	{r4, r5, pc}
	...

000b7da8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b7da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7dac:	ec55 4b10 	vmov	r4, r5, d0
   b7db0:	4606      	mov	r6, r0
   b7db2:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b7db4:	ee10 2a10 	vmov	r2, s0
   b7db8:	ee10 0a10 	vmov	r0, s0
   b7dbc:	462b      	mov	r3, r5
   b7dbe:	4629      	mov	r1, r5
   b7dc0:	f001 feec 	bl	b9b9c <__aeabi_dcmpun>
   b7dc4:	b140      	cbz	r0, b7dd8 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b7dc6:	4953      	ldr	r1, [pc, #332]	; (b7f14 <_ZN5Print10printFloatEdh+0x16c>)
   b7dc8:	4630      	mov	r0, r6
   b7dca:	f7ff ff9f 	bl	b7d0c <_ZN5Print5writeEPKc>
   b7dce:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b7dd0:	4650      	mov	r0, sl
   b7dd2:	b003      	add	sp, #12
   b7dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b7dd8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b7ddc:	4b4e      	ldr	r3, [pc, #312]	; (b7f18 <_ZN5Print10printFloatEdh+0x170>)
   b7dde:	f04f 32ff 	mov.w	r2, #4294967295
   b7de2:	4620      	mov	r0, r4
   b7de4:	4649      	mov	r1, r9
   b7de6:	f001 fed9 	bl	b9b9c <__aeabi_dcmpun>
   b7dea:	b948      	cbnz	r0, b7e00 <_ZN5Print10printFloatEdh+0x58>
   b7dec:	4b4a      	ldr	r3, [pc, #296]	; (b7f18 <_ZN5Print10printFloatEdh+0x170>)
   b7dee:	f04f 32ff 	mov.w	r2, #4294967295
   b7df2:	4620      	mov	r0, r4
   b7df4:	4649      	mov	r1, r9
   b7df6:	f001 feb3 	bl	b9b60 <__aeabi_dcmple>
   b7dfa:	b908      	cbnz	r0, b7e00 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b7dfc:	4947      	ldr	r1, [pc, #284]	; (b7f1c <_ZN5Print10printFloatEdh+0x174>)
   b7dfe:	e7e3      	b.n	b7dc8 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b7e00:	4b47      	ldr	r3, [pc, #284]	; (b7f20 <_ZN5Print10printFloatEdh+0x178>)
   b7e02:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7e06:	4620      	mov	r0, r4
   b7e08:	4629      	mov	r1, r5
   b7e0a:	f001 febd 	bl	b9b88 <__aeabi_dcmpgt>
   b7e0e:	b108      	cbz	r0, b7e14 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b7e10:	4944      	ldr	r1, [pc, #272]	; (b7f24 <_ZN5Print10printFloatEdh+0x17c>)
   b7e12:	e7d9      	b.n	b7dc8 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b7e14:	4b44      	ldr	r3, [pc, #272]	; (b7f28 <_ZN5Print10printFloatEdh+0x180>)
   b7e16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7e1a:	4620      	mov	r0, r4
   b7e1c:	4629      	mov	r1, r5
   b7e1e:	f001 fe95 	bl	b9b4c <__aeabi_dcmplt>
   b7e22:	2800      	cmp	r0, #0
   b7e24:	d1f4      	bne.n	b7e10 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b7e26:	2200      	movs	r2, #0
   b7e28:	2300      	movs	r3, #0
   b7e2a:	4620      	mov	r0, r4
   b7e2c:	4629      	mov	r1, r5
   b7e2e:	f001 fe8d 	bl	b9b4c <__aeabi_dcmplt>
   b7e32:	b1d0      	cbz	r0, b7e6a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b7e34:	212d      	movs	r1, #45	; 0x2d
   b7e36:	4630      	mov	r0, r6
   b7e38:	f7ff ff7e 	bl	b7d38 <_ZN5Print5printEc>
     number = -number;
   b7e3c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b7e40:	4682      	mov	sl, r0
     number = -number;
   b7e42:	461d      	mov	r5, r3
  double rounding = 0.5;
   b7e44:	4939      	ldr	r1, [pc, #228]	; (b7f2c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b7e46:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b7f34 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b7e4a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b7e4e:	2000      	movs	r0, #0
    rounding /= 10.0;
   b7e50:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b7e54:	fa5f f38b 	uxtb.w	r3, fp
   b7e58:	429f      	cmp	r7, r3
   b7e5a:	d908      	bls.n	b7e6e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b7e5c:	4642      	mov	r2, r8
   b7e5e:	464b      	mov	r3, r9
   b7e60:	f001 fd2c 	bl	b98bc <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b7e64:	f10b 0b01 	add.w	fp, fp, #1
   b7e68:	e7f4      	b.n	b7e54 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b7e6a:	4682      	mov	sl, r0
   b7e6c:	e7ea      	b.n	b7e44 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b7e6e:	4622      	mov	r2, r4
   b7e70:	462b      	mov	r3, r5
   b7e72:	f001 fa43 	bl	b92fc <__adddf3>
   b7e76:	460d      	mov	r5, r1
   b7e78:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b7e7a:	f001 fecd 	bl	b9c18 <__aeabi_d2uiz>
   b7e7e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b7e80:	f001 fb78 	bl	b9574 <__aeabi_ui2d>
   b7e84:	4602      	mov	r2, r0
   b7e86:	460b      	mov	r3, r1
   b7e88:	4620      	mov	r0, r4
   b7e8a:	4629      	mov	r1, r5
   b7e8c:	f001 fa34 	bl	b92f8 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7e90:	220a      	movs	r2, #10
   b7e92:	4604      	mov	r4, r0
   b7e94:	460d      	mov	r5, r1
   b7e96:	4630      	mov	r0, r6
   b7e98:	4641      	mov	r1, r8
   b7e9a:	f7ff ff66 	bl	b7d6a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b7e9e:	4482      	add	sl, r0
  if (digits > 0) {
   b7ea0:	2f00      	cmp	r7, #0
   b7ea2:	d095      	beq.n	b7dd0 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b7ea4:	4922      	ldr	r1, [pc, #136]	; (b7f30 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b7ea6:	f8df 908c 	ldr.w	r9, [pc, #140]	; b7f34 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b7eaa:	4630      	mov	r0, r6
   b7eac:	f7ff ff2e 	bl	b7d0c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b7eb0:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b7eb4:	4482      	add	sl, r0
  while (digits-- > 0)
   b7eb6:	2f00      	cmp	r7, #0
   b7eb8:	d08a      	beq.n	b7dd0 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b7eba:	4642      	mov	r2, r8
   b7ebc:	464b      	mov	r3, r9
   b7ebe:	4620      	mov	r0, r4
   b7ec0:	4629      	mov	r1, r5
   b7ec2:	f001 fbd1 	bl	b9668 <__aeabi_dmul>
   b7ec6:	4604      	mov	r4, r0
   b7ec8:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b7eca:	f001 fe7d 	bl	b9bc8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b7ece:	f1b0 0b00 	subs.w	fp, r0, #0
   b7ed2:	da1c      	bge.n	b7f0e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b7ed4:	212d      	movs	r1, #45	; 0x2d
   b7ed6:	4630      	mov	r0, r6
   b7ed8:	f7ff ff2e 	bl	b7d38 <_ZN5Print5printEc>
            val = -n;
   b7edc:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b7ee0:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b7ee2:	220a      	movs	r2, #10
   b7ee4:	4630      	mov	r0, r6
   b7ee6:	9301      	str	r3, [sp, #4]
   b7ee8:	f7ff ff3f 	bl	b7d6a <_ZN5Print11printNumberEmh>
   b7eec:	9b01      	ldr	r3, [sp, #4]
   b7eee:	4418      	add	r0, r3
    n += print(toPrint);
   b7ef0:	4482      	add	sl, r0
    remainder -= toPrint;
   b7ef2:	4658      	mov	r0, fp
   b7ef4:	f001 fb4e 	bl	b9594 <__aeabi_i2d>
   b7ef8:	4602      	mov	r2, r0
   b7efa:	460b      	mov	r3, r1
   b7efc:	4620      	mov	r0, r4
   b7efe:	4629      	mov	r1, r5
   b7f00:	f001 f9fa 	bl	b92f8 <__aeabi_dsub>
   b7f04:	3f01      	subs	r7, #1
   b7f06:	4604      	mov	r4, r0
   b7f08:	460d      	mov	r5, r1
   b7f0a:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b7f0c:	e7d3      	b.n	b7eb6 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b7f0e:	4659      	mov	r1, fp
        size_t t = 0;
   b7f10:	2300      	movs	r3, #0
   b7f12:	e7e6      	b.n	b7ee2 <_ZN5Print10printFloatEdh+0x13a>
   b7f14:	000bcf60 	.word	0x000bcf60
   b7f18:	7fefffff 	.word	0x7fefffff
   b7f1c:	000bcf64 	.word	0x000bcf64
   b7f20:	41efffff 	.word	0x41efffff
   b7f24:	000bcf68 	.word	0x000bcf68
   b7f28:	c1efffff 	.word	0xc1efffff
   b7f2c:	3fe00000 	.word	0x3fe00000
   b7f30:	000bc8f3 	.word	0x000bc8f3
   b7f34:	40240000 	.word	0x40240000

000b7f38 <_ZN5Print5printEfi>:
{
   b7f38:	b538      	push	{r3, r4, r5, lr}
   b7f3a:	4604      	mov	r4, r0
   b7f3c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b7f40:	b2cd      	uxtb	r5, r1
   b7f42:	f001 fb39 	bl	b95b8 <__aeabi_f2d>
   b7f46:	ec41 0b10 	vmov	d0, r0, r1
   b7f4a:	4629      	mov	r1, r5
   b7f4c:	4620      	mov	r0, r4
}
   b7f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b7f52:	f7ff bf29 	b.w	b7da8 <_ZN5Print10printFloatEdh>

000b7f56 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7f5a:	b086      	sub	sp, #24
   b7f5c:	af00      	add	r7, sp, #0
   b7f5e:	4605      	mov	r5, r0
   b7f60:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7f62:	1d38      	adds	r0, r7, #4
   b7f64:	2114      	movs	r1, #20
{
   b7f66:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7f68:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7f6a:	f7ff fbf7 	bl	b775c <vsnprintf>

    if (n<bufsize)
   b7f6e:	2813      	cmp	r0, #19
   b7f70:	d80e      	bhi.n	b7f90 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7f72:	1d39      	adds	r1, r7, #4
   b7f74:	4628      	mov	r0, r5
   b7f76:	f7ff fec9 	bl	b7d0c <_ZN5Print5writeEPKc>
   b7f7a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7f7c:	b11e      	cbz	r6, b7f86 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7f7e:	4628      	mov	r0, r5
   b7f80:	f7ff fedd 	bl	b7d3e <_ZN5Print7printlnEv>
   b7f84:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7f86:	4620      	mov	r0, r4
   b7f88:	3718      	adds	r7, #24
   b7f8a:	46bd      	mov	sp, r7
   b7f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7f90:	f100 0308 	add.w	r3, r0, #8
   b7f94:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7f98:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7f9a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7f9e:	4622      	mov	r2, r4
   b7fa0:	1c41      	adds	r1, r0, #1
   b7fa2:	683b      	ldr	r3, [r7, #0]
   b7fa4:	4668      	mov	r0, sp
   b7fa6:	f7ff fbd9 	bl	b775c <vsnprintf>
  return write(str);
   b7faa:	4669      	mov	r1, sp
   b7fac:	4628      	mov	r0, r5
   b7fae:	f7ff fead 	bl	b7d0c <_ZN5Print5writeEPKc>
   b7fb2:	4604      	mov	r4, r0
   b7fb4:	46c5      	mov	sp, r8
   b7fb6:	e7e1      	b.n	b7f7c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7fb8 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b7fb8:	2300      	movs	r3, #0
   b7fba:	6840      	ldr	r0, [r0, #4]
   b7fbc:	461a      	mov	r2, r3
   b7fbe:	4619      	mov	r1, r3
   b7fc0:	f7ff bb3c 	b.w	b763c <network_on>

000b7fc4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7fc4:	4b01      	ldr	r3, [pc, #4]	; (b7fcc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7fc6:	4a02      	ldr	r2, [pc, #8]	; (b7fd0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7fc8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7fca:	4770      	bx	lr
   b7fcc:	2003e65c 	.word	0x2003e65c
   b7fd0:	000bcf6c 	.word	0x000bcf6c

000b7fd4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b7fd4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7fd6:	2000      	movs	r0, #0
   b7fd8:	f7ff fb88 	bl	b76ec <spark_sync_time_pending>
   b7fdc:	b128      	cbz	r0, b7fea <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7fde:	f7ff fb75 	bl	b76cc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7fe2:	f080 0001 	eor.w	r0, r0, #1
   b7fe6:	b2c0      	uxtb	r0, r0
    }
   b7fe8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7fea:	2001      	movs	r0, #1
   b7fec:	e7fc      	b.n	b7fe8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b7ff0 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b7ff0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b7ff4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b7ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b7ffc:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b7ffe:	d411      	bmi.n	b8024 <_ZN9TimeClass4zoneEf+0x34>
   b8000:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b8004:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b8008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b800c:	dc0a      	bgt.n	b8024 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b800e:	eddf 7a06 	vldr	s15, [pc, #24]	; b8028 <_ZN9TimeClass4zoneEf+0x38>
   b8012:	ee60 7a27 	vmul.f32	s15, s0, s15
   b8016:	ee17 0a90 	vmov	r0, s15
   b801a:	f001 ffcb 	bl	b9fb4 <__aeabi_f2lz>
   b801e:	4b03      	ldr	r3, [pc, #12]	; (b802c <_ZN9TimeClass4zoneEf+0x3c>)
   b8020:	e9c3 0100 	strd	r0, r1, [r3]
}
   b8024:	bd08      	pop	{r3, pc}
   b8026:	bf00      	nop
   b8028:	45610000 	.word	0x45610000
   b802c:	2003e670 	.word	0x2003e670

000b8030 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b8030:	b530      	push	{r4, r5, lr}
   b8032:	b093      	sub	sp, #76	; 0x4c
   b8034:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b8038:	4b19      	ldr	r3, [pc, #100]	; (b80a0 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b803a:	4604      	mov	r4, r0
    t += time_zone_cache;
   b803c:	e9d3 1000 	ldrd	r1, r0, [r3]
   b8040:	9b01      	ldr	r3, [sp, #4]
   b8042:	1852      	adds	r2, r2, r1
   b8044:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b8048:	4816      	ldr	r0, [pc, #88]	; (b80a4 <_ZN9TimeClass7timeStrEx+0x74>)
   b804a:	e9d0 1000 	ldrd	r1, r0, [r0]
   b804e:	1852      	adds	r2, r2, r1
   b8050:	eb43 0300 	adc.w	r3, r3, r0
   b8054:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b8058:	2224      	movs	r2, #36	; 0x24
   b805a:	eb0d 0002 	add.w	r0, sp, r2
   b805e:	2100      	movs	r1, #0
   b8060:	f002 f9d8 	bl	ba414 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b8064:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b8066:	a909      	add	r1, sp, #36	; 0x24
   b8068:	4668      	mov	r0, sp
   b806a:	f7ff fb9f 	bl	b77ac <localtime_r>
    char ascstr[26] = {};
   b806e:	2216      	movs	r2, #22
   b8070:	4629      	mov	r1, r5
   b8072:	a803      	add	r0, sp, #12
   b8074:	9502      	str	r5, [sp, #8]
   b8076:	f002 f9cd 	bl	ba414 <memset>
    asctime_r(&calendar_time, ascstr);
   b807a:	a902      	add	r1, sp, #8
   b807c:	a809      	add	r0, sp, #36	; 0x24
   b807e:	f002 f955 	bl	ba32c <asctime_r>
    int len = strlen(ascstr);
   b8082:	a802      	add	r0, sp, #8
   b8084:	f002 fa4c 	bl	ba520 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b8088:	ab12      	add	r3, sp, #72	; 0x48
   b808a:	4418      	add	r0, r3
    return String(ascstr);
   b808c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b808e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b8092:	4620      	mov	r0, r4
   b8094:	f7ff fdaf 	bl	b7bf6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b8098:	4620      	mov	r0, r4
   b809a:	b013      	add	sp, #76	; 0x4c
   b809c:	bd30      	pop	{r4, r5, pc}
   b809e:	bf00      	nop
   b80a0:	2003e670 	.word	0x2003e670
   b80a4:	2003e668 	.word	0x2003e668

000b80a8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b80a8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b80aa:	2000      	movs	r0, #0
   b80ac:	f7ff f89a 	bl	b71e4 <hal_rtc_time_is_valid>
    if (rtcstate)
   b80b0:	4604      	mov	r4, r0
   b80b2:	b9a0      	cbnz	r0, b80de <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b80b4:	f7ff fa6e 	bl	b7594 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b80b8:	2801      	cmp	r0, #1
   b80ba:	d110      	bne.n	b80de <_ZN9TimeClass7isValidEv+0x36>
   b80bc:	4620      	mov	r0, r4
   b80be:	f7ff fa81 	bl	b75c4 <system_thread_get_state>
   b80c2:	b960      	cbnz	r0, b80de <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b80c4:	f7ff ff86 	bl	b7fd4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b80c8:	b910      	cbnz	r0, b80d0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b80ca:	f7ff faf7 	bl	b76bc <spark_process>
        while (_while() && !_condition()) {
   b80ce:	e7f9      	b.n	b80c4 <_ZN9TimeClass7isValidEv+0x1c>
   b80d0:	f7ff ff80 	bl	b7fd4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b80d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b80d8:	2000      	movs	r0, #0
   b80da:	f7ff b883 	b.w	b71e4 <hal_rtc_time_is_valid>
}
   b80de:	4620      	mov	r0, r4
   b80e0:	bd10      	pop	{r4, pc}

000b80e2 <_ZN9TimeClass3nowEv>:
{
   b80e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b80e4:	f7ff ffe0 	bl	b80a8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b80e8:	2210      	movs	r2, #16
   b80ea:	2100      	movs	r1, #0
   b80ec:	4668      	mov	r0, sp
   b80ee:	f002 f991 	bl	ba414 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b80f2:	2100      	movs	r1, #0
   b80f4:	4668      	mov	r0, sp
   b80f6:	f7ff f87d 	bl	b71f4 <hal_rtc_get_time>
}
   b80fa:	9800      	ldr	r0, [sp, #0]
   b80fc:	b005      	add	sp, #20
   b80fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8104 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8104:	4b02      	ldr	r3, [pc, #8]	; (b8110 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8106:	681a      	ldr	r2, [r3, #0]
   b8108:	4b02      	ldr	r3, [pc, #8]	; (b8114 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b810a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b810c:	4770      	bx	lr
   b810e:	bf00      	nop
   b8110:	2003e02c 	.word	0x2003e02c
   b8114:	2003e660 	.word	0x2003e660

000b8118 <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   b8118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b811c:	ec55 4b11 	vmov	r4, r5, d1
   b8120:	ec57 6b12 	vmov	r6, r7, d2
   b8124:	b085      	sub	sp, #20
    if (fromEnd == fromStart) {
   b8126:	ee11 2a10 	vmov	r2, s2
   b812a:	ee12 0a10 	vmov	r0, s4
   b812e:	462b      	mov	r3, r5
   b8130:	4639      	mov	r1, r7
{
   b8132:	ed8d 0b02 	vstr	d0, [sp, #8]
   b8136:	ed8d 4b00 	vstr	d4, [sp]
   b813a:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   b813e:	f001 fcfb 	bl	b9b38 <__aeabi_dcmpeq>
   b8142:	ed9d 0b02 	vldr	d0, [sp, #8]
   b8146:	bb38      	cbnz	r0, b8198 <_Z3mapddddd+0x80>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b8148:	ec51 0b10 	vmov	r0, r1, d0
   b814c:	4622      	mov	r2, r4
   b814e:	462b      	mov	r3, r5
   b8150:	f001 f8d2 	bl	b92f8 <__aeabi_dsub>
   b8154:	4652      	mov	r2, sl
   b8156:	4680      	mov	r8, r0
   b8158:	4689      	mov	r9, r1
   b815a:	465b      	mov	r3, fp
   b815c:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8160:	f001 f8ca 	bl	b92f8 <__aeabi_dsub>
   b8164:	4602      	mov	r2, r0
   b8166:	460b      	mov	r3, r1
   b8168:	4640      	mov	r0, r8
   b816a:	4649      	mov	r1, r9
   b816c:	f001 fa7c 	bl	b9668 <__aeabi_dmul>
   b8170:	4622      	mov	r2, r4
   b8172:	4680      	mov	r8, r0
   b8174:	4689      	mov	r9, r1
   b8176:	462b      	mov	r3, r5
   b8178:	4630      	mov	r0, r6
   b817a:	4639      	mov	r1, r7
   b817c:	f001 f8bc 	bl	b92f8 <__aeabi_dsub>
   b8180:	4602      	mov	r2, r0
   b8182:	460b      	mov	r3, r1
   b8184:	4640      	mov	r0, r8
   b8186:	4649      	mov	r1, r9
   b8188:	f001 fb98 	bl	b98bc <__aeabi_ddiv>
   b818c:	4652      	mov	r2, sl
   b818e:	465b      	mov	r3, fp
   b8190:	f001 f8b4 	bl	b92fc <__adddf3>
   b8194:	ec41 0b10 	vmov	d0, r0, r1
}
   b8198:	b005      	add	sp, #20
   b819a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b819e <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b819e:	2100      	movs	r1, #0
   b81a0:	f7ff ba08 	b.w	b75b4 <system_delay_ms>

000b81a4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b81a4:	b510      	push	{r4, lr}
   b81a6:	4604      	mov	r4, r0
   b81a8:	f7fb fffe 	bl	b41a8 <_ZNSt14_Function_baseD1Ev>
   b81ac:	4620      	mov	r0, r4
   b81ae:	bd10      	pop	{r4, pc}

000b81b0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b81b0:	4803      	ldr	r0, [pc, #12]	; (b81c0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b81b2:	4a04      	ldr	r2, [pc, #16]	; (b81c4 <_GLOBAL__sub_I_RGB+0x14>)
   b81b4:	4904      	ldr	r1, [pc, #16]	; (b81c8 <_GLOBAL__sub_I_RGB+0x18>)
   b81b6:	2300      	movs	r3, #0
   b81b8:	6083      	str	r3, [r0, #8]
   b81ba:	f000 bf75 	b.w	b90a8 <__aeabi_atexit>
   b81be:	bf00      	nop
   b81c0:	2003e678 	.word	0x2003e678
   b81c4:	2003e208 	.word	0x2003e208
   b81c8:	000b81a5 	.word	0x000b81a5

000b81cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b81cc:	4b01      	ldr	r3, [pc, #4]	; (b81d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b81ce:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b81d0:	4770      	bx	lr
   b81d2:	bf00      	nop
   b81d4:	2003e030 	.word	0x2003e030

000b81d8 <serialEventRun>:
{
   b81d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b81da:	4b0b      	ldr	r3, [pc, #44]	; (b8208 <serialEventRun+0x30>)
   b81dc:	b143      	cbz	r3, b81f0 <serialEventRun+0x18>
   b81de:	f000 f97d 	bl	b84dc <_Z16_fetch_usbserialv>
   b81e2:	6803      	ldr	r3, [r0, #0]
   b81e4:	691b      	ldr	r3, [r3, #16]
   b81e6:	4798      	blx	r3
   b81e8:	2800      	cmp	r0, #0
   b81ea:	dd01      	ble.n	b81f0 <serialEventRun+0x18>
        serialEvent();
   b81ec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b81f0:	4b06      	ldr	r3, [pc, #24]	; (b820c <serialEventRun+0x34>)
   b81f2:	b143      	cbz	r3, b8206 <serialEventRun+0x2e>
   b81f4:	f000 f9f4 	bl	b85e0 <_Z22__fetch_global_Serial1v>
   b81f8:	6803      	ldr	r3, [r0, #0]
   b81fa:	691b      	ldr	r3, [r3, #16]
   b81fc:	4798      	blx	r3
   b81fe:	2800      	cmp	r0, #0
   b8200:	dd01      	ble.n	b8206 <serialEventRun+0x2e>
        serialEvent1();
   b8202:	f3af 8000 	nop.w
}
   b8206:	bd08      	pop	{r3, pc}
	...

000b8210 <_post_loop>:
{
   b8210:	b508      	push	{r3, lr}
	serialEventRun();
   b8212:	f7ff ffe1 	bl	b81d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8216:	f7fe ffcd 	bl	b71b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b821a:	4b01      	ldr	r3, [pc, #4]	; (b8220 <_post_loop+0x10>)
   b821c:	6018      	str	r0, [r3, #0]
}
   b821e:	bd08      	pop	{r3, pc}
   b8220:	2003e7d8 	.word	0x2003e7d8

000b8224 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8224:	4805      	ldr	r0, [pc, #20]	; (b823c <_Z33system_initialize_user_backup_ramv+0x18>)
   b8226:	4a06      	ldr	r2, [pc, #24]	; (b8240 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8228:	4906      	ldr	r1, [pc, #24]	; (b8244 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b822a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b822c:	1a12      	subs	r2, r2, r0
   b822e:	f002 f8c9 	bl	ba3c4 <memcpy>
    __backup_sram_signature = signature;
   b8232:	4b05      	ldr	r3, [pc, #20]	; (b8248 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8234:	4a05      	ldr	r2, [pc, #20]	; (b824c <_Z33system_initialize_user_backup_ramv+0x28>)
   b8236:	601a      	str	r2, [r3, #0]
}
   b8238:	bd08      	pop	{r3, pc}
   b823a:	bf00      	nop
   b823c:	2003f400 	.word	0x2003f400
   b8240:	2003f404 	.word	0x2003f404
   b8244:	000bd6b8 	.word	0x000bd6b8
   b8248:	2003f400 	.word	0x2003f400
   b824c:	9a271c1e 	.word	0x9a271c1e

000b8250 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8250:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8252:	2300      	movs	r3, #0
   b8254:	9300      	str	r3, [sp, #0]
   b8256:	461a      	mov	r2, r3
   b8258:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b825c:	f7ff f9c4 	bl	b75e8 <system_ctrl_set_result>
}
   b8260:	b003      	add	sp, #12
   b8262:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8268 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8268:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b826a:	8843      	ldrh	r3, [r0, #2]
   b826c:	2b0a      	cmp	r3, #10
   b826e:	d008      	beq.n	b8282 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8270:	2b50      	cmp	r3, #80	; 0x50
   b8272:	d10b      	bne.n	b828c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8274:	4b09      	ldr	r3, [pc, #36]	; (b829c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8276:	681b      	ldr	r3, [r3, #0]
   b8278:	b14b      	cbz	r3, b828e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b827a:	b003      	add	sp, #12
   b827c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8280:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8282:	f7ff ffe5 	bl	b8250 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8286:	b003      	add	sp, #12
   b8288:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b828c:	2300      	movs	r3, #0
   b828e:	9300      	str	r3, [sp, #0]
   b8290:	461a      	mov	r2, r3
   b8292:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8296:	f7ff f9a7 	bl	b75e8 <system_ctrl_set_result>
}
   b829a:	e7f4      	b.n	b8286 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b829c:	2003e68c 	.word	0x2003e68c

000b82a0 <module_user_init_hook>:
{
   b82a0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b82a2:	4812      	ldr	r0, [pc, #72]	; (b82ec <module_user_init_hook+0x4c>)
   b82a4:	2100      	movs	r1, #0
   b82a6:	f7ff fa79 	bl	b779c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b82aa:	4b11      	ldr	r3, [pc, #68]	; (b82f0 <module_user_init_hook+0x50>)
   b82ac:	681a      	ldr	r2, [r3, #0]
   b82ae:	4b11      	ldr	r3, [pc, #68]	; (b82f4 <module_user_init_hook+0x54>)
   b82b0:	429a      	cmp	r2, r3
   b82b2:	4b11      	ldr	r3, [pc, #68]	; (b82f8 <module_user_init_hook+0x58>)
   b82b4:	bf0c      	ite	eq
   b82b6:	2201      	moveq	r2, #1
   b82b8:	2200      	movne	r2, #0
   b82ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b82bc:	d001      	beq.n	b82c2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b82be:	f7ff ffb1 	bl	b8224 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b82c2:	f7fe ff67 	bl	b7194 <HAL_RNG_GetRandomNumber>
   b82c6:	4604      	mov	r4, r0
    srand(seed);
   b82c8:	f002 f8ac 	bl	ba424 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b82cc:	4b0b      	ldr	r3, [pc, #44]	; (b82fc <module_user_init_hook+0x5c>)
   b82ce:	b113      	cbz	r3, b82d6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b82d0:	4620      	mov	r0, r4
   b82d2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b82d6:	2100      	movs	r1, #0
   b82d8:	4808      	ldr	r0, [pc, #32]	; (b82fc <module_user_init_hook+0x5c>)
   b82da:	f7ff fa0f 	bl	b76fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b82de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b82e2:	4807      	ldr	r0, [pc, #28]	; (b8300 <module_user_init_hook+0x60>)
   b82e4:	2100      	movs	r1, #0
   b82e6:	f7ff b975 	b.w	b75d4 <system_ctrl_set_app_request_handler>
   b82ea:	bf00      	nop
   b82ec:	000b81cd 	.word	0x000b81cd
   b82f0:	2003f400 	.word	0x2003f400
   b82f4:	9a271c1e 	.word	0x9a271c1e
   b82f8:	2003e688 	.word	0x2003e688
   b82fc:	00000000 	.word	0x00000000
   b8300:	000b8269 	.word	0x000b8269

000b8304 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8304:	4770      	bx	lr

000b8306 <_ZN9IPAddressD0Ev>:
   b8306:	b510      	push	{r4, lr}
   b8308:	2118      	movs	r1, #24
   b830a:	4604      	mov	r4, r0
   b830c:	f000 fed1 	bl	b90b2 <_ZdlPvj>
   b8310:	4620      	mov	r0, r4
   b8312:	bd10      	pop	{r4, pc}

000b8314 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8314:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8316:	7d03      	ldrb	r3, [r0, #20]
   b8318:	2b06      	cmp	r3, #6
{
   b831a:	b08d      	sub	sp, #52	; 0x34
   b831c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b831e:	f100 0704 	add.w	r7, r0, #4
   b8322:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8326:	d012      	beq.n	b834e <_ZNK9IPAddress7printToER5Print+0x3a>
   b8328:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b832c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8330:	220a      	movs	r2, #10
   b8332:	4630      	mov	r0, r6
   b8334:	f7ff fd19 	bl	b7d6a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8338:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b833a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b833c:	d019      	beq.n	b8372 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b833e:	2c00      	cmp	r4, #0
   b8340:	d0f4      	beq.n	b832c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8342:	212e      	movs	r1, #46	; 0x2e
   b8344:	4630      	mov	r0, r6
   b8346:	f7ff fcf7 	bl	b7d38 <_ZN5Print5printEc>
   b834a:	4404      	add	r4, r0
   b834c:	e7ee      	b.n	b832c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b834e:	232f      	movs	r3, #47	; 0x2f
   b8350:	466a      	mov	r2, sp
   b8352:	4639      	mov	r1, r7
   b8354:	200a      	movs	r0, #10
		buf[0] = 0;
   b8356:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b835a:	f7fe ff9b 	bl	b7294 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b835e:	4668      	mov	r0, sp
   b8360:	f002 f8de 	bl	ba520 <strlen>
   b8364:	6833      	ldr	r3, [r6, #0]
   b8366:	4602      	mov	r2, r0
   b8368:	68db      	ldr	r3, [r3, #12]
   b836a:	4669      	mov	r1, sp
   b836c:	4630      	mov	r0, r6
   b836e:	4798      	blx	r3
   b8370:	4604      	mov	r4, r0
    }
    return n;
}
   b8372:	4620      	mov	r0, r4
   b8374:	b00d      	add	sp, #52	; 0x34
   b8376:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8378 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8378:	b510      	push	{r4, lr}
   b837a:	4b05      	ldr	r3, [pc, #20]	; (b8390 <_ZN9IPAddressC1Ev+0x18>)
   b837c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b837e:	2211      	movs	r2, #17
   b8380:	f840 3b04 	str.w	r3, [r0], #4
   b8384:	2100      	movs	r1, #0
   b8386:	f002 f845 	bl	ba414 <memset>
}
   b838a:	4620      	mov	r0, r4
   b838c:	bd10      	pop	{r4, pc}
   b838e:	bf00      	nop
   b8390:	000bcf94 	.word	0x000bcf94

000b8394 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8394:	4603      	mov	r3, r0
   b8396:	4a07      	ldr	r2, [pc, #28]	; (b83b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8398:	b510      	push	{r4, lr}
   b839a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b839e:	f101 0210 	add.w	r2, r1, #16
   b83a2:	f851 4b04 	ldr.w	r4, [r1], #4
   b83a6:	f843 4b04 	str.w	r4, [r3], #4
   b83aa:	4291      	cmp	r1, r2
   b83ac:	d1f9      	bne.n	b83a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b83ae:	780a      	ldrb	r2, [r1, #0]
   b83b0:	701a      	strb	r2, [r3, #0]
}
   b83b2:	bd10      	pop	{r4, pc}
   b83b4:	000bcf94 	.word	0x000bcf94

000b83b8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b83b8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b83ba:	2b04      	cmp	r3, #4
   b83bc:	d104      	bne.n	b83c8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b83be:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b83c0:	3800      	subs	r0, #0
   b83c2:	bf18      	it	ne
   b83c4:	2001      	movne	r0, #1
   b83c6:	4770      	bx	lr
    } else if (version() == 6) {
   b83c8:	2b06      	cmp	r3, #6
   b83ca:	d107      	bne.n	b83dc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b83cc:	6843      	ldr	r3, [r0, #4]
   b83ce:	b93b      	cbnz	r3, b83e0 <_ZNK9IPAddresscvbEv+0x28>
   b83d0:	6883      	ldr	r3, [r0, #8]
   b83d2:	b92b      	cbnz	r3, b83e0 <_ZNK9IPAddresscvbEv+0x28>
   b83d4:	68c3      	ldr	r3, [r0, #12]
   b83d6:	b91b      	cbnz	r3, b83e0 <_ZNK9IPAddresscvbEv+0x28>
   b83d8:	6900      	ldr	r0, [r0, #16]
   b83da:	e7f1      	b.n	b83c0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b83dc:	2000      	movs	r0, #0
   b83de:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b83e0:	2001      	movs	r0, #1
}
   b83e2:	4770      	bx	lr

000b83e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b83e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b83e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b83ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b83ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b83f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b83f6:	2304      	movs	r3, #4
   b83f8:	6041      	str	r1, [r0, #4]
   b83fa:	7503      	strb	r3, [r0, #20]
}
   b83fc:	bd10      	pop	{r4, pc}
	...

000b8400 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8400:	b507      	push	{r0, r1, r2, lr}
   b8402:	4b06      	ldr	r3, [pc, #24]	; (b841c <_ZN9IPAddressC1EPKh+0x1c>)
   b8404:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8406:	78cb      	ldrb	r3, [r1, #3]
   b8408:	9300      	str	r3, [sp, #0]
   b840a:	788b      	ldrb	r3, [r1, #2]
   b840c:	784a      	ldrb	r2, [r1, #1]
   b840e:	7809      	ldrb	r1, [r1, #0]
   b8410:	f7ff ffe8 	bl	b83e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8414:	b003      	add	sp, #12
   b8416:	f85d fb04 	ldr.w	pc, [sp], #4
   b841a:	bf00      	nop
   b841c:	000bcf94 	.word	0x000bcf94

000b8420 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8420:	7441      	strb	r1, [r0, #17]
}
   b8422:	4770      	bx	lr

000b8424 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8424:	4770      	bx	lr

000b8426 <_ZN9USBSerial4readEv>:
{
   b8426:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8428:	2100      	movs	r1, #0
   b842a:	7c00      	ldrb	r0, [r0, #16]
   b842c:	f7ff f88a 	bl	b7544 <HAL_USB_USART_Receive_Data>
}
   b8430:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8434:	bd08      	pop	{r3, pc}

000b8436 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b8436:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8438:	2101      	movs	r1, #1
   b843a:	7c00      	ldrb	r0, [r0, #16]
   b843c:	f7ff f882 	bl	b7544 <HAL_USB_USART_Receive_Data>
}
   b8440:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8444:	bd08      	pop	{r3, pc}

000b8446 <_ZN9USBSerial17availableForWriteEv>:
{
   b8446:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8448:	7c00      	ldrb	r0, [r0, #16]
   b844a:	f7ff f873 	bl	b7534 <HAL_USB_USART_Available_Data_For_Write>
}
   b844e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8452:	bd08      	pop	{r3, pc}

000b8454 <_ZN9USBSerial9availableEv>:
{
   b8454:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8456:	7c00      	ldrb	r0, [r0, #16]
   b8458:	f7ff f864 	bl	b7524 <HAL_USB_USART_Available_Data>
}
   b845c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8460:	bd08      	pop	{r3, pc}

000b8462 <_ZN9USBSerial5writeEh>:
{
   b8462:	b513      	push	{r0, r1, r4, lr}
   b8464:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8466:	7c00      	ldrb	r0, [r0, #16]
{
   b8468:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b846a:	f7ff f863 	bl	b7534 <HAL_USB_USART_Available_Data_For_Write>
   b846e:	2800      	cmp	r0, #0
   b8470:	9901      	ldr	r1, [sp, #4]
   b8472:	dc01      	bgt.n	b8478 <_ZN9USBSerial5writeEh+0x16>
   b8474:	7c60      	ldrb	r0, [r4, #17]
   b8476:	b120      	cbz	r0, b8482 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8478:	7c20      	ldrb	r0, [r4, #16]
   b847a:	f7ff f86b 	bl	b7554 <HAL_USB_USART_Send_Data>
   b847e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8482:	b002      	add	sp, #8
   b8484:	bd10      	pop	{r4, pc}

000b8486 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8486:	7c00      	ldrb	r0, [r0, #16]
   b8488:	f7ff b86c 	b.w	b7564 <HAL_USB_USART_Flush_Data>

000b848c <_ZN9USBSerialD0Ev>:
   b848c:	b510      	push	{r4, lr}
   b848e:	2114      	movs	r1, #20
   b8490:	4604      	mov	r4, r0
   b8492:	f000 fe0e 	bl	b90b2 <_ZdlPvj>
   b8496:	4620      	mov	r0, r4
   b8498:	bd10      	pop	{r4, pc}
	...

000b849c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b849c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b849e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b84a2:	4604      	mov	r4, r0
   b84a4:	4608      	mov	r0, r1
   b84a6:	2100      	movs	r1, #0
   b84a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b84ac:	4b04      	ldr	r3, [pc, #16]	; (b84c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b84ae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b84b0:	2301      	movs	r3, #1
  _serial = serial;
   b84b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b84b4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b84b6:	4611      	mov	r1, r2
   b84b8:	f7ff f824 	bl	b7504 <HAL_USB_USART_Init>
}
   b84bc:	4620      	mov	r0, r4
   b84be:	bd10      	pop	{r4, pc}
   b84c0:	000bcfa8 	.word	0x000bcfa8

000b84c4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b84c4:	7c00      	ldrb	r0, [r0, #16]
   b84c6:	2200      	movs	r2, #0
   b84c8:	f7ff b824 	b.w	b7514 <HAL_USB_USART_Begin>

000b84cc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b84cc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b84ce:	2214      	movs	r2, #20
{
   b84d0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b84d2:	2100      	movs	r1, #0
   b84d4:	f001 ff9e 	bl	ba414 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b84d8:	4620      	mov	r0, r4
   b84da:	bd10      	pop	{r4, pc}

000b84dc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b84dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84de:	4c10      	ldr	r4, [pc, #64]	; (b8520 <_Z16_fetch_usbserialv+0x44>)
{
   b84e0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b84e2:	a803      	add	r0, sp, #12
   b84e4:	f7ff fff2 	bl	b84cc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84e8:	7821      	ldrb	r1, [r4, #0]
   b84ea:	f3bf 8f5b 	dmb	ish
   b84ee:	f011 0101 	ands.w	r1, r1, #1
   b84f2:	d111      	bne.n	b8518 <_Z16_fetch_usbserialv+0x3c>
   b84f4:	4620      	mov	r0, r4
   b84f6:	9101      	str	r1, [sp, #4]
   b84f8:	f7fb fdde 	bl	b40b8 <__cxa_guard_acquire>
   b84fc:	9901      	ldr	r1, [sp, #4]
   b84fe:	b158      	cbz	r0, b8518 <_Z16_fetch_usbserialv+0x3c>
   b8500:	aa03      	add	r2, sp, #12
   b8502:	4808      	ldr	r0, [pc, #32]	; (b8524 <_Z16_fetch_usbserialv+0x48>)
   b8504:	f7ff ffca 	bl	b849c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8508:	4620      	mov	r0, r4
   b850a:	f7fb fdda 	bl	b40c2 <__cxa_guard_release>
   b850e:	4a06      	ldr	r2, [pc, #24]	; (b8528 <_Z16_fetch_usbserialv+0x4c>)
   b8510:	4906      	ldr	r1, [pc, #24]	; (b852c <_Z16_fetch_usbserialv+0x50>)
   b8512:	4804      	ldr	r0, [pc, #16]	; (b8524 <_Z16_fetch_usbserialv+0x48>)
   b8514:	f000 fdc8 	bl	b90a8 <__aeabi_atexit>
	return _usbserial;
}
   b8518:	4802      	ldr	r0, [pc, #8]	; (b8524 <_Z16_fetch_usbserialv+0x48>)
   b851a:	b008      	add	sp, #32
   b851c:	bd10      	pop	{r4, pc}
   b851e:	bf00      	nop
   b8520:	2003e690 	.word	0x2003e690
   b8524:	2003e694 	.word	0x2003e694
   b8528:	2003e208 	.word	0x2003e208
   b852c:	000b8425 	.word	0x000b8425

000b8530 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b8530:	f7fe be18 	b.w	b7164 <HAL_Interrupts_Disable_All>

000b8534 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b8534:	f7fe be0e 	b.w	b7154 <HAL_Interrupts_Enable_All>

000b8538 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b8538:	4770      	bx	lr

000b853a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b853a:	7441      	strb	r1, [r0, #17]
}
   b853c:	4770      	bx	lr

000b853e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b853e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8540:	7c00      	ldrb	r0, [r0, #16]
   b8542:	f7fe fef7 	bl	b7334 <hal_usart_available_data_for_write>
}
   b8546:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b854a:	bd08      	pop	{r3, pc}

000b854c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b854c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b854e:	7c00      	ldrb	r0, [r0, #16]
   b8550:	f7fe fec8 	bl	b72e4 <hal_usart_available>
}
   b8554:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8558:	bd08      	pop	{r3, pc}

000b855a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b855a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b855c:	7c00      	ldrb	r0, [r0, #16]
   b855e:	f7fe fed1 	bl	b7304 <hal_usart_peek>
}
   b8562:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8566:	bd08      	pop	{r3, pc}

000b8568 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8568:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b856a:	7c00      	ldrb	r0, [r0, #16]
   b856c:	f7fe fec2 	bl	b72f4 <hal_usart_read>
}
   b8570:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8574:	bd08      	pop	{r3, pc}

000b8576 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8576:	7c00      	ldrb	r0, [r0, #16]
   b8578:	f7fe becc 	b.w	b7314 <hal_usart_flush>

000b857c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b857c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b857e:	7c45      	ldrb	r5, [r0, #17]
{
   b8580:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8582:	b12d      	cbz	r5, b8590 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8584:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8586:	b003      	add	sp, #12
   b8588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b858c:	f7fe bea2 	b.w	b72d4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8590:	7c00      	ldrb	r0, [r0, #16]
   b8592:	9101      	str	r1, [sp, #4]
   b8594:	f7fe fece 	bl	b7334 <hal_usart_available_data_for_write>
   b8598:	2800      	cmp	r0, #0
   b859a:	9901      	ldr	r1, [sp, #4]
   b859c:	dcf2      	bgt.n	b8584 <_ZN11USARTSerial5writeEh+0x8>
}
   b859e:	4628      	mov	r0, r5
   b85a0:	b003      	add	sp, #12
   b85a2:	bd30      	pop	{r4, r5, pc}

000b85a4 <_ZN11USARTSerialD0Ev>:
   b85a4:	b510      	push	{r4, lr}
   b85a6:	2114      	movs	r1, #20
   b85a8:	4604      	mov	r4, r0
   b85aa:	f000 fd82 	bl	b90b2 <_ZdlPvj>
   b85ae:	4620      	mov	r0, r4
   b85b0:	bd10      	pop	{r4, pc}
	...

000b85b4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b85b4:	b510      	push	{r4, lr}
   b85b6:	f04f 0c00 	mov.w	ip, #0
   b85ba:	4604      	mov	r4, r0
   b85bc:	4608      	mov	r0, r1
   b85be:	4611      	mov	r1, r2
   b85c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b85c4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b85c8:	4a04      	ldr	r2, [pc, #16]	; (b85dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b85ca:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b85cc:	2201      	movs	r2, #1
  _serial = serial;
   b85ce:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b85d0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b85d2:	461a      	mov	r2, r3
   b85d4:	f7fe fe76 	bl	b72c4 <hal_usart_init>
}
   b85d8:	4620      	mov	r0, r4
   b85da:	bd10      	pop	{r4, pc}
   b85dc:	000bcfd8 	.word	0x000bcfd8

000b85e0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b85e0:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   b85e2:	4c0e      	ldr	r4, [pc, #56]	; (b861c <_Z22__fetch_global_Serial1v+0x3c>)
   b85e4:	7821      	ldrb	r1, [r4, #0]
   b85e6:	f3bf 8f5b 	dmb	ish
   b85ea:	f011 0101 	ands.w	r1, r1, #1
   b85ee:	d112      	bne.n	b8616 <_Z22__fetch_global_Serial1v+0x36>
   b85f0:	4620      	mov	r0, r4
   b85f2:	9101      	str	r1, [sp, #4]
   b85f4:	f7fb fd60 	bl	b40b8 <__cxa_guard_acquire>
   b85f8:	9901      	ldr	r1, [sp, #4]
   b85fa:	b160      	cbz	r0, b8616 <_Z22__fetch_global_Serial1v+0x36>
   b85fc:	4a08      	ldr	r2, [pc, #32]	; (b8620 <_Z22__fetch_global_Serial1v+0x40>)
   b85fe:	4b09      	ldr	r3, [pc, #36]	; (b8624 <_Z22__fetch_global_Serial1v+0x44>)
   b8600:	4809      	ldr	r0, [pc, #36]	; (b8628 <_Z22__fetch_global_Serial1v+0x48>)
   b8602:	f7ff ffd7 	bl	b85b4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b8606:	4620      	mov	r0, r4
   b8608:	f7fb fd5b 	bl	b40c2 <__cxa_guard_release>
   b860c:	4a07      	ldr	r2, [pc, #28]	; (b862c <_Z22__fetch_global_Serial1v+0x4c>)
   b860e:	4908      	ldr	r1, [pc, #32]	; (b8630 <_Z22__fetch_global_Serial1v+0x50>)
   b8610:	4805      	ldr	r0, [pc, #20]	; (b8628 <_Z22__fetch_global_Serial1v+0x48>)
   b8612:	f000 fd49 	bl	b90a8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   b8616:	4804      	ldr	r0, [pc, #16]	; (b8628 <_Z22__fetch_global_Serial1v+0x48>)
   b8618:	b002      	add	sp, #8
   b861a:	bd10      	pop	{r4, pc}
   b861c:	2003e6a8 	.word	0x2003e6a8
   b8620:	2003e6ac 	.word	0x2003e6ac
   b8624:	2003e730 	.word	0x2003e730
   b8628:	2003e7b4 	.word	0x2003e7b4
   b862c:	2003e208 	.word	0x2003e208
   b8630:	000b8539 	.word	0x000b8539

000b8634 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8634:	4770      	bx	lr

000b8636 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8638:	4606      	mov	r6, r0
   b863a:	4615      	mov	r5, r2
   b863c:	460c      	mov	r4, r1
   b863e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8640:	42bc      	cmp	r4, r7
   b8642:	d006      	beq.n	b8652 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8644:	6833      	ldr	r3, [r6, #0]
   b8646:	f814 1b01 	ldrb.w	r1, [r4], #1
   b864a:	689b      	ldr	r3, [r3, #8]
   b864c:	4630      	mov	r0, r6
   b864e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8650:	e7f6      	b.n	b8640 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8652:	4628      	mov	r0, r5
   b8654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8656 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8656:	7c00      	ldrb	r0, [r0, #16]
   b8658:	2200      	movs	r2, #0
   b865a:	f7fe be8b 	b.w	b7374 <hal_i2c_write>

000b865e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b865e:	7c00      	ldrb	r0, [r0, #16]
   b8660:	2100      	movs	r1, #0
   b8662:	f7fe be8f 	b.w	b7384 <hal_i2c_available>

000b8666 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8666:	7c00      	ldrb	r0, [r0, #16]
   b8668:	2100      	movs	r1, #0
   b866a:	f7fe be93 	b.w	b7394 <hal_i2c_read>

000b866e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b866e:	7c00      	ldrb	r0, [r0, #16]
   b8670:	2100      	movs	r1, #0
   b8672:	f7fe be97 	b.w	b73a4 <hal_i2c_peek>

000b8676 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8676:	7c00      	ldrb	r0, [r0, #16]
   b8678:	2100      	movs	r1, #0
   b867a:	f7fe be9b 	b.w	b73b4 <hal_i2c_flush>

000b867e <_ZN7TwoWireD0Ev>:
   b867e:	b510      	push	{r4, lr}
   b8680:	2114      	movs	r1, #20
   b8682:	4604      	mov	r4, r0
   b8684:	f000 fd15 	bl	b90b2 <_ZdlPvj>
   b8688:	4620      	mov	r0, r4
   b868a:	bd10      	pop	{r4, pc}

000b868c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b868c:	b510      	push	{r4, lr}
   b868e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8692:	4604      	mov	r4, r0
   b8694:	4608      	mov	r0, r1
   b8696:	2100      	movs	r1, #0
   b8698:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b869c:	4b03      	ldr	r3, [pc, #12]	; (b86ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b869e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b86a0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b86a2:	4611      	mov	r1, r2
   b86a4:	f7fe fe96 	bl	b73d4 <hal_i2c_init>
}
   b86a8:	4620      	mov	r0, r4
   b86aa:	bd10      	pop	{r4, pc}
   b86ac:	000bd008 	.word	0x000bd008

000b86b0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b86b0:	2300      	movs	r3, #0
   b86b2:	7c00      	ldrb	r0, [r0, #16]
   b86b4:	461a      	mov	r2, r3
   b86b6:	4619      	mov	r1, r3
   b86b8:	f7fe be44 	b.w	b7344 <hal_i2c_begin>

000b86bc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b86bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b86be:	2200      	movs	r2, #0
   b86c0:	2314      	movs	r3, #20
   b86c2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b86c6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b86ca:	780b      	ldrb	r3, [r1, #0]
   b86cc:	f88d 3008 	strb.w	r3, [sp, #8]
   b86d0:	684b      	ldr	r3, [r1, #4]
   b86d2:	9303      	str	r3, [sp, #12]
   b86d4:	68cb      	ldr	r3, [r1, #12]
   b86d6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b86d8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b86da:	7a0b      	ldrb	r3, [r1, #8]
   b86dc:	9305      	str	r3, [sp, #20]
   b86de:	a901      	add	r1, sp, #4
   b86e0:	f7fe fe80 	bl	b73e4 <hal_i2c_request_ex>
}
   b86e4:	b007      	add	sp, #28
   b86e6:	f85d fb04 	ldr.w	pc, [sp], #4

000b86ea <_ZN7TwoWire11requestFromEhjh>:
{
   b86ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b86ec:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b86ee:	f88d 1000 	strb.w	r1, [sp]
   b86f2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b86f6:	9103      	str	r1, [sp, #12]
   b86f8:	bf18      	it	ne
   b86fa:	2301      	movne	r3, #1
   b86fc:	4669      	mov	r1, sp
    size_ = size;
   b86fe:	9201      	str	r2, [sp, #4]
   b8700:	f88d 3008 	strb.w	r3, [sp, #8]
   b8704:	f7ff ffda 	bl	b86bc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8708:	b005      	add	sp, #20
   b870a:	f85d fb04 	ldr.w	pc, [sp], #4

000b870e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b870e:	2301      	movs	r3, #1
   b8710:	f7ff bfeb 	b.w	b86ea <_ZN7TwoWire11requestFromEhjh>

000b8714 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8714:	7c00      	ldrb	r0, [r0, #16]
   b8716:	2200      	movs	r2, #0
   b8718:	f7fe be1c 	b.w	b7354 <hal_i2c_begin_transmission>

000b871c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b871c:	b2c9      	uxtb	r1, r1
   b871e:	f7ff bff9 	b.w	b8714 <_ZN7TwoWire17beginTransmissionEh>

000b8722 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8722:	7c00      	ldrb	r0, [r0, #16]
   b8724:	2200      	movs	r2, #0
   b8726:	f7fe be1d 	b.w	b7364 <hal_i2c_end_transmission>

000b872a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b872a:	2101      	movs	r1, #1
   b872c:	f7ff bff9 	b.w	b8722 <_ZN7TwoWire15endTransmissionEh>

000b8730 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   b8730:	b510      	push	{r4, lr}
  if (0 == max) {
   b8732:	4604      	mov	r4, r0
   b8734:	b128      	cbz	r0, b8742 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   b8736:	f001 fea3 	bl	ba480 <rand>
   b873a:	fb90 f3f4 	sdiv	r3, r0, r4
   b873e:	fb03 0414 	mls	r4, r3, r4, r0
}
   b8742:	4620      	mov	r0, r4
   b8744:	bd10      	pop	{r4, pc}

000b8746 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   b8746:	4288      	cmp	r0, r1
{
   b8748:	b510      	push	{r4, lr}
   b874a:	4604      	mov	r4, r0
  if (min >= max) {
   b874c:	da03      	bge.n	b8756 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   b874e:	1a08      	subs	r0, r1, r0
   b8750:	f7ff ffee 	bl	b8730 <_Z6randomi>
   b8754:	4404      	add	r4, r0
}
   b8756:	4620      	mov	r0, r4
   b8758:	bd10      	pop	{r4, pc}

000b875a <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b875a:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b875c:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b875e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8762:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8764:	2201      	movs	r2, #1
   b8766:	f04f 33ff 	mov.w	r3, #4294967295
   b876a:	f10d 0107 	add.w	r1, sp, #7
   b876e:	47a0      	blx	r4
}
   b8770:	b002      	add	sp, #8
   b8772:	bd10      	pop	{r4, pc}

000b8774 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8774:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8776:	6803      	ldr	r3, [r0, #0]
   b8778:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b877a:	f04f 33ff 	mov.w	r3, #4294967295
   b877e:	46a4      	mov	ip, r4
}
   b8780:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8784:	4760      	bx	ip

000b8786 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8786:	b513      	push	{r0, r1, r4, lr}
   b8788:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b878a:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b878c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8790:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8792:	f10d 0107 	add.w	r1, sp, #7
   b8796:	2201      	movs	r2, #1
   b8798:	47a0      	blx	r4
}
   b879a:	b002      	add	sp, #8
   b879c:	bd10      	pop	{r4, pc}

000b879e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b879e:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b87a0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b87a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b87a6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b87aa:	429a      	cmp	r2, r3
int TCPClient::read() {
   b87ac:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b87ae:	d008      	beq.n	b87c2 <_ZN9TCPClient4readEv+0x24>
   b87b0:	6963      	ldr	r3, [r4, #20]
   b87b2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b87b6:	1c51      	adds	r1, r2, #1
   b87b8:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b87bc:	4413      	add	r3, r2
   b87be:	7918      	ldrb	r0, [r3, #4]
}
   b87c0:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b87c2:	6803      	ldr	r3, [r0, #0]
   b87c4:	691b      	ldr	r3, [r3, #16]
   b87c6:	4798      	blx	r3
   b87c8:	2800      	cmp	r0, #0
   b87ca:	d1f1      	bne.n	b87b0 <_ZN9TCPClient4readEv+0x12>
   b87cc:	f04f 30ff 	mov.w	r0, #4294967295
   b87d0:	e7f6      	b.n	b87c0 <_ZN9TCPClient4readEv+0x22>

000b87d2 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b87d2:	4770      	bx	lr

000b87d4 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b87d4:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b87d6:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b87d8:	43c0      	mvns	r0, r0
   b87da:	0fc0      	lsrs	r0, r0, #31
   b87dc:	4770      	bx	lr

000b87de <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b87de:	4770      	bx	lr

000b87e0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b87e0:	4b06      	ldr	r3, [pc, #24]	; (b87fc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b87e2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b87e4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b87e6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b87ea:	d005      	beq.n	b87f8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b87ec:	4608      	mov	r0, r1
   b87ee:	f000 fc65 	bl	b90bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b87f2:	2800      	cmp	r0, #0
   b87f4:	bf08      	it	eq
   b87f6:	2400      	moveq	r4, #0
      }
   b87f8:	4620      	mov	r0, r4
   b87fa:	bd10      	pop	{r4, pc}
   b87fc:	000bcf58 	.word	0x000bcf58

000b8800 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8800:	b510      	push	{r4, lr}
   b8802:	21ac      	movs	r1, #172	; 0xac
   b8804:	4604      	mov	r4, r0
   b8806:	f000 fc54 	bl	b90b2 <_ZdlPvj>
   b880a:	4620      	mov	r0, r4
   b880c:	bd10      	pop	{r4, pc}

000b880e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b880e:	21ac      	movs	r1, #172	; 0xac
   b8810:	f000 bc4f 	b.w	b90b2 <_ZdlPvj>

000b8814 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8818:	f04f 0800 	mov.w	r8, #0
   b881c:	b086      	sub	sp, #24
   b881e:	461c      	mov	r4, r3
   b8820:	f8c0 8004 	str.w	r8, [r0, #4]
   b8824:	4605      	mov	r5, r0
   b8826:	460e      	mov	r6, r1
   b8828:	4617      	mov	r7, r2
    struct timeval tv = {};
   b882a:	4641      	mov	r1, r8
   b882c:	2210      	movs	r2, #16
   b882e:	a802      	add	r0, sp, #8
   b8830:	f001 fdf0 	bl	ba414 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8834:	1c63      	adds	r3, r4, #1
   b8836:	d009      	beq.n	b884c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b883c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8840:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8844:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8848:	435c      	muls	r4, r3
   b884a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b884c:	6968      	ldr	r0, [r5, #20]
   b884e:	2310      	movs	r3, #16
   b8850:	9300      	str	r3, [sp, #0]
   b8852:	6800      	ldr	r0, [r0, #0]
   b8854:	ab02      	add	r3, sp, #8
   b8856:	f241 0205 	movw	r2, #4101	; 0x1005
   b885a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b885e:	f7fe fdc9 	bl	b73f4 <sock_setsockopt>
    if (ret < 0) {
   b8862:	2800      	cmp	r0, #0
   b8864:	da07      	bge.n	b8876 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8866:	f7fe ff89 	bl	b777c <__errno>
   b886a:	6803      	ldr	r3, [r0, #0]
   b886c:	606b      	str	r3, [r5, #4]
        return 0;
   b886e:	2000      	movs	r0, #0
}
   b8870:	b006      	add	sp, #24
   b8872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8876:	6968      	ldr	r0, [r5, #20]
   b8878:	2300      	movs	r3, #0
   b887a:	6800      	ldr	r0, [r0, #0]
   b887c:	463a      	mov	r2, r7
   b887e:	4631      	mov	r1, r6
   b8880:	f7fe fdd8 	bl	b7434 <sock_send>
    if (ret < 0) {
   b8884:	1e03      	subs	r3, r0, #0
   b8886:	dbee      	blt.n	b8866 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8888:	4618      	mov	r0, r3
   b888a:	e7f1      	b.n	b8870 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b888c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b888c:	b530      	push	{r4, r5, lr}
   b888e:	b087      	sub	sp, #28
   b8890:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8892:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8894:	4668      	mov	r0, sp
   b8896:	f7ff fdb3 	bl	b8400 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b889a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b889c:	3404      	adds	r4, #4
   b889e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b88a0:	682b      	ldr	r3, [r5, #0]
   b88a2:	7023      	strb	r3, [r4, #0]
    }
   b88a4:	b007      	add	sp, #28
   b88a6:	bd30      	pop	{r4, r5, pc}

000b88a8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b88a8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b88aa:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b88ac:	4b05      	ldr	r3, [pc, #20]	; (b88c4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b88ae:	4604      	mov	r4, r0
   b88b0:	358c      	adds	r5, #140	; 0x8c
   b88b2:	f844 3b04 	str.w	r3, [r4], #4
   b88b6:	4606      	mov	r6, r0
   b88b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b88ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b88bc:	682b      	ldr	r3, [r5, #0]
   b88be:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b88c0:	4630      	mov	r0, r6
   b88c2:	bd70      	pop	{r4, r5, r6, pc}
   b88c4:	000bcf94 	.word	0x000bcf94

000b88c8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b88c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b88cc:	4698      	mov	r8, r3
    stop();
   b88ce:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b88d0:	b093      	sub	sp, #76	; 0x4c
   b88d2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b88d4:	2400      	movs	r4, #0
    stop();
   b88d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b88d8:	4606      	mov	r6, r0
   b88da:	4617      	mov	r7, r2
    stop();
   b88dc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b88de:	4628      	mov	r0, r5
   b88e0:	466b      	mov	r3, sp
   b88e2:	4622      	mov	r2, r4
   b88e4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b88e6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b88e8:	f7fe fbfc 	bl	b70e4 <netdb_getaddrinfo>
   b88ec:	4605      	mov	r5, r0
   b88ee:	2800      	cmp	r0, #0
   b88f0:	d163      	bne.n	b89ba <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b88f2:	9b00      	ldr	r3, [sp, #0]
   b88f4:	2b00      	cmp	r3, #0
   b88f6:	d04b      	beq.n	b8990 <_ZN9TCPClient7connectEPKctm+0xc8>
   b88f8:	695b      	ldr	r3, [r3, #20]
   b88fa:	2b00      	cmp	r3, #0
   b88fc:	d048      	beq.n	b8990 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b88fe:	a806      	add	r0, sp, #24
   b8900:	f7ff fd3a 	bl	b8378 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8904:	9b00      	ldr	r3, [sp, #0]
   b8906:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8908:	7863      	ldrb	r3, [r4, #1]
   b890a:	2b02      	cmp	r3, #2
   b890c:	d104      	bne.n	b8918 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b890e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8910:	a806      	add	r0, sp, #24
   b8912:	f7ff ffbb 	bl	b888c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8916:	e026      	b.n	b8966 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8918:	2b0a      	cmp	r3, #10
   b891a:	d124      	bne.n	b8966 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b891c:	2211      	movs	r2, #17
   b891e:	4629      	mov	r1, r5
   b8920:	a801      	add	r0, sp, #4
   b8922:	f001 fd77 	bl	ba414 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8926:	68a3      	ldr	r3, [r4, #8]
   b8928:	2b00      	cmp	r3, #0
   b892a:	d038      	beq.n	b899e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b892c:	f104 0308 	add.w	r3, r4, #8
   b8930:	f10d 0c04 	add.w	ip, sp, #4
   b8934:	3418      	adds	r4, #24
   b8936:	6818      	ldr	r0, [r3, #0]
   b8938:	6859      	ldr	r1, [r3, #4]
   b893a:	4662      	mov	r2, ip
   b893c:	c203      	stmia	r2!, {r0, r1}
   b893e:	3308      	adds	r3, #8
   b8940:	42a3      	cmp	r3, r4
   b8942:	4694      	mov	ip, r2
   b8944:	d1f7      	bne.n	b8936 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8946:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8948:	a901      	add	r1, sp, #4
   b894a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b894c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8950:	f7ff fd20 	bl	b8394 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8954:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8958:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b895c:	ac07      	add	r4, sp, #28
   b895e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8960:	f8dc 3000 	ldr.w	r3, [ip]
   b8964:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b8966:	a806      	add	r0, sp, #24
   b8968:	f7ff fd26 	bl	b83b8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b896c:	b180      	cbz	r0, b8990 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b896e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8970:	ad07      	add	r5, sp, #28
   b8972:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8976:	4b12      	ldr	r3, [pc, #72]	; (b89c0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b8978:	930c      	str	r3, [sp, #48]	; 0x30
   b897a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b897c:	ac0d      	add	r4, sp, #52	; 0x34
   b897e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8980:	682b      	ldr	r3, [r5, #0]
   b8982:	7023      	strb	r3, [r4, #0]
   b8984:	463a      	mov	r2, r7
   b8986:	4643      	mov	r3, r8
   b8988:	a90c      	add	r1, sp, #48	; 0x30
   b898a:	4630      	mov	r0, r6
   b898c:	47c8      	blx	r9
   b898e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8990:	9800      	ldr	r0, [sp, #0]
   b8992:	f7fe fb9f 	bl	b70d4 <netdb_freeaddrinfo>
}
   b8996:	4628      	mov	r0, r5
   b8998:	b013      	add	sp, #76	; 0x4c
   b899a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b899e:	68e3      	ldr	r3, [r4, #12]
   b89a0:	2b00      	cmp	r3, #0
   b89a2:	d1c3      	bne.n	b892c <_ZN9TCPClient7connectEPKctm+0x64>
   b89a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b89a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b89ac:	f7fe fc7a 	bl	b72a4 <inet_htonl>
   b89b0:	4581      	cmp	r9, r0
   b89b2:	d1bb      	bne.n	b892c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b89b4:	f104 0114 	add.w	r1, r4, #20
   b89b8:	e7aa      	b.n	b8910 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b89ba:	4625      	mov	r5, r4
   b89bc:	e7e8      	b.n	b8990 <_ZN9TCPClient7connectEPKctm+0xc8>
   b89be:	bf00      	nop
   b89c0:	000bcf94 	.word	0x000bcf94

000b89c4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b89c4:	b538      	push	{r3, r4, r5, lr}
   b89c6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b89c8:	681a      	ldr	r2, [r3, #0]
   b89ca:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b89cc:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b89ce:	da10      	bge.n	b89f2 <_ZN9TCPClient9connectedEv+0x2e>
   b89d0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b89d4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b89d8:	429a      	cmp	r2, r3
   b89da:	d10a      	bne.n	b89f2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b89dc:	6803      	ldr	r3, [r0, #0]
   b89de:	691b      	ldr	r3, [r3, #16]
   b89e0:	4798      	blx	r3
        if (!rv) {
   b89e2:	4604      	mov	r4, r0
   b89e4:	b928      	cbnz	r0, b89f2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b89e6:	682b      	ldr	r3, [r5, #0]
   b89e8:	4628      	mov	r0, r5
   b89ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b89ec:	4798      	blx	r3
        rv = available();
   b89ee:	4620      	mov	r0, r4
}
   b89f0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b89f2:	2001      	movs	r0, #1
   b89f4:	e7fc      	b.n	b89f0 <_ZN9TCPClient9connectedEv+0x2c>

000b89f6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b89f6:	b510      	push	{r4, lr}
   b89f8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b89fa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b89fe:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8a02:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b8a04:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8a06:	d005      	beq.n	b8a14 <_ZN9TCPClient4peekEv+0x1e>
   b8a08:	6963      	ldr	r3, [r4, #20]
   b8a0a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8a0e:	4413      	add	r3, r2
   b8a10:	7918      	ldrb	r0, [r3, #4]
}
   b8a12:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8a14:	6803      	ldr	r3, [r0, #0]
   b8a16:	691b      	ldr	r3, [r3, #16]
   b8a18:	4798      	blx	r3
   b8a1a:	2800      	cmp	r0, #0
   b8a1c:	d1f4      	bne.n	b8a08 <_ZN9TCPClient4peekEv+0x12>
   b8a1e:	f04f 30ff 	mov.w	r0, #4294967295
   b8a22:	e7f6      	b.n	b8a12 <_ZN9TCPClient4peekEv+0x1c>

000b8a24 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8a26:	6943      	ldr	r3, [r0, #20]
   b8a28:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b8a2a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8a2e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8a32:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8a34:	4605      	mov	r5, r0
   b8a36:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b8a38:	d016      	beq.n	b8a68 <_ZN9TCPClient4readEPhj+0x44>
   b8a3a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b8a3c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b8a40:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b8a44:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b8a46:	42bc      	cmp	r4, r7
   b8a48:	bf28      	it	cs
   b8a4a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b8a4c:	3304      	adds	r3, #4
   b8a4e:	4622      	mov	r2, r4
   b8a50:	4419      	add	r1, r3
   b8a52:	4630      	mov	r0, r6
   b8a54:	f001 fcb6 	bl	ba3c4 <memcpy>
   b8a58:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b8a5a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b8a5e:	4423      	add	r3, r4
   b8a60:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b8a64:	4620      	mov	r0, r4
   b8a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b8a68:	6803      	ldr	r3, [r0, #0]
   b8a6a:	691b      	ldr	r3, [r3, #16]
   b8a6c:	4798      	blx	r3
   b8a6e:	2800      	cmp	r0, #0
   b8a70:	d1e3      	bne.n	b8a3a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b8a72:	f04f 34ff 	mov.w	r4, #4294967295
   b8a76:	e7f5      	b.n	b8a64 <_ZN9TCPClient4readEPhj+0x40>

000b8a78 <_ZN9TCPClient12flush_bufferEv>:
   b8a78:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b8a7a:	2300      	movs	r3, #0
   b8a7c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b8a80:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b8a82:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b8a86:	4770      	bx	lr

000b8a88 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8a8c:	461f      	mov	r7, r3
    stop();
   b8a8e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8a90:	460c      	mov	r4, r1
    stop();
   b8a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8a94:	b08a      	sub	sp, #40	; 0x28
   b8a96:	4605      	mov	r5, r0
   b8a98:	4616      	mov	r6, r2
    stop();
   b8a9a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b8a9c:	7d23      	ldrb	r3, [r4, #20]
   b8a9e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b8aa2:	2b04      	cmp	r3, #4
   b8aa4:	bf0c      	ite	eq
   b8aa6:	2002      	moveq	r0, #2
   b8aa8:	200a      	movne	r0, #10
   b8aaa:	2206      	movs	r2, #6
   b8aac:	2101      	movs	r1, #1
   b8aae:	f7fe fcc9 	bl	b7444 <sock_socket>
   b8ab2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b8ab6:	696b      	ldr	r3, [r5, #20]
   b8ab8:	681b      	ldr	r3, [r3, #0]
   b8aba:	2b00      	cmp	r3, #0
   b8abc:	da08      	bge.n	b8ad0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b8abe:	682b      	ldr	r3, [r5, #0]
   b8ac0:	4628      	mov	r0, r5
   b8ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8ac4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8ac6:	4798      	blx	r3
}
   b8ac8:	4620      	mov	r0, r4
   b8aca:	b00a      	add	sp, #40	; 0x28
   b8acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8ad0:	4628      	mov	r0, r5
   b8ad2:	f7ff ffd1 	bl	b8a78 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8ad6:	b1b7      	cbz	r7, b8b06 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8ad8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8ada:	a903      	add	r1, sp, #12
   b8adc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8ade:	9303      	str	r3, [sp, #12]
   b8ae0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8ae4:	f7fe fb4e 	bl	b7184 <if_index_to_name>
   b8ae8:	2800      	cmp	r0, #0
   b8aea:	d1e8      	bne.n	b8abe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8aec:	6968      	ldr	r0, [r5, #20]
   b8aee:	2306      	movs	r3, #6
   b8af0:	9300      	str	r3, [sp, #0]
   b8af2:	6800      	ldr	r0, [r0, #0]
   b8af4:	ab03      	add	r3, sp, #12
   b8af6:	f241 020b 	movw	r2, #4107	; 0x100b
   b8afa:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8afe:	f7fe fc79 	bl	b73f4 <sock_setsockopt>
   b8b02:	2800      	cmp	r0, #0
   b8b04:	d1db      	bne.n	b8abe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b8b06:	221c      	movs	r2, #28
   b8b08:	2100      	movs	r1, #0
   b8b0a:	a803      	add	r0, sp, #12
   b8b0c:	f001 fc82 	bl	ba414 <memset>
    if (ip.version() == 4) {
   b8b10:	7d23      	ldrb	r3, [r4, #20]
   b8b12:	2b04      	cmp	r3, #4
   b8b14:	d11d      	bne.n	b8b52 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b8b16:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b8b1a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8b1c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8b20:	f7fe fbc8 	bl	b72b4 <inet_htons>
   b8b24:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b8b28:	6860      	ldr	r0, [r4, #4]
   b8b2a:	f7fe fbbb 	bl	b72a4 <inet_htonl>
   b8b2e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8b30:	696b      	ldr	r3, [r5, #20]
   b8b32:	221c      	movs	r2, #28
   b8b34:	6818      	ldr	r0, [r3, #0]
   b8b36:	a903      	add	r1, sp, #12
   b8b38:	f7fe fc6c 	bl	b7414 <sock_connect>
   b8b3c:	2800      	cmp	r0, #0
   b8b3e:	d1be      	bne.n	b8abe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8b40:	3404      	adds	r4, #4
   b8b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8b44:	696d      	ldr	r5, [r5, #20]
   b8b46:	358c      	adds	r5, #140	; 0x8c
   b8b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8b4a:	6823      	ldr	r3, [r4, #0]
   b8b4c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b8b4e:	2401      	movs	r4, #1
   b8b50:	e7ba      	b.n	b8ac8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b8b52:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b8b56:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b8b58:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b8b5c:	f7fe fbaa 	bl	b72b4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8b60:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b8b62:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8b66:	1d23      	adds	r3, r4, #4
   b8b68:	f104 0714 	add.w	r7, r4, #20
   b8b6c:	6818      	ldr	r0, [r3, #0]
   b8b6e:	6859      	ldr	r1, [r3, #4]
   b8b70:	4632      	mov	r2, r6
   b8b72:	c203      	stmia	r2!, {r0, r1}
   b8b74:	3308      	adds	r3, #8
   b8b76:	42bb      	cmp	r3, r7
   b8b78:	4616      	mov	r6, r2
   b8b7a:	d1f7      	bne.n	b8b6c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b8b7c:	e7d8      	b.n	b8b30 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b8b80 <_ZN9TCPClient9availableEv>:
{
   b8b80:	b530      	push	{r4, r5, lr}
   b8b82:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b8b84:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b8b88:	b08b      	sub	sp, #44	; 0x2c
   b8b8a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b8b8c:	b12b      	cbz	r3, b8b9a <_ZN9TCPClient9availableEv+0x1a>
   b8b8e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b8b92:	429a      	cmp	r2, r3
   b8b94:	d101      	bne.n	b8b9a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b8b96:	f7ff ff6f 	bl	b8a78 <_ZN9TCPClient12flush_bufferEv>
   b8b9a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b8b9c:	6808      	ldr	r0, [r1, #0]
   b8b9e:	2800      	cmp	r0, #0
   b8ba0:	db18      	blt.n	b8bd4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b8ba2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b8ba6:	2d7f      	cmp	r5, #127	; 0x7f
   b8ba8:	d814      	bhi.n	b8bd4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b8baa:	3104      	adds	r1, #4
   b8bac:	2308      	movs	r3, #8
   b8bae:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b8bb2:	4429      	add	r1, r5
   b8bb4:	f7fe fc36 	bl	b7424 <sock_recv>
            if (ret > 0) {
   b8bb8:	2800      	cmp	r0, #0
   b8bba:	dd13      	ble.n	b8be4 <_ZN9TCPClient9availableEv+0x64>
   b8bbc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b8bbe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8bc2:	b90a      	cbnz	r2, b8bc8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b8bc4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8bc8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b8bca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8bce:	4410      	add	r0, r2
   b8bd0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b8bd4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b8bd6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b8bda:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b8bde:	1ac0      	subs	r0, r0, r3
   b8be0:	b00b      	add	sp, #44	; 0x2c
   b8be2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b8be4:	f7fe fdca 	bl	b777c <__errno>
   b8be8:	6803      	ldr	r3, [r0, #0]
   b8bea:	2b0b      	cmp	r3, #11
   b8bec:	d0f2      	beq.n	b8bd4 <_ZN9TCPClient9availableEv+0x54>
   b8bee:	f7fe fdc5 	bl	b777c <__errno>
   b8bf2:	6803      	ldr	r3, [r0, #0]
   b8bf4:	2b0b      	cmp	r3, #11
   b8bf6:	d0ed      	beq.n	b8bd4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8bf8:	2320      	movs	r3, #32
   b8bfa:	2500      	movs	r5, #0
   b8bfc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8c00:	f7fe fdbc 	bl	b777c <__errno>
   b8c04:	6803      	ldr	r3, [r0, #0]
   b8c06:	9301      	str	r3, [sp, #4]
   b8c08:	4b08      	ldr	r3, [pc, #32]	; (b8c2c <_ZN9TCPClient9availableEv+0xac>)
   b8c0a:	4909      	ldr	r1, [pc, #36]	; (b8c30 <_ZN9TCPClient9availableEv+0xb0>)
   b8c0c:	9300      	str	r3, [sp, #0]
   b8c0e:	aa02      	add	r2, sp, #8
   b8c10:	462b      	mov	r3, r5
   b8c12:	2032      	movs	r0, #50	; 0x32
   b8c14:	f7fe fcb6 	bl	b7584 <log_message>
                    sock_close(d_->sock);
   b8c18:	6963      	ldr	r3, [r4, #20]
   b8c1a:	6818      	ldr	r0, [r3, #0]
   b8c1c:	f7fe fbf2 	bl	b7404 <sock_close>
   b8c20:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b8c22:	f04f 32ff 	mov.w	r2, #4294967295
   b8c26:	601a      	str	r2, [r3, #0]
   b8c28:	e7d4      	b.n	b8bd4 <_ZN9TCPClient9availableEv+0x54>
   b8c2a:	bf00      	nop
   b8c2c:	000bd02f 	.word	0x000bd02f
   b8c30:	000bd028 	.word	0x000bd028

000b8c34 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b8c34:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b8c36:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b8c38:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b8c3a:	6818      	ldr	r0, [r3, #0]
   b8c3c:	2800      	cmp	r0, #0
   b8c3e:	db01      	blt.n	b8c44 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b8c40:	f7fe fbe0 	bl	b7404 <sock_close>
   b8c44:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b8c46:	f04f 32ff 	mov.w	r2, #4294967295
   b8c4a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b8c4c:	6960      	ldr	r0, [r4, #20]
   b8c4e:	2211      	movs	r2, #17
   b8c50:	2100      	movs	r1, #0
   b8c52:	308c      	adds	r0, #140	; 0x8c
   b8c54:	f001 fbde 	bl	ba414 <memset>
    flush_buffer();
   b8c58:	4620      	mov	r0, r4
}
   b8c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b8c5e:	f7ff bf0b 	b.w	b8a78 <_ZN9TCPClient12flush_bufferEv>

000b8c62 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b8c62:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b8c64:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b8c66:	4604      	mov	r4, r0
          total(0) {
   b8c68:	6001      	str	r1, [r0, #0]
   b8c6a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b8c6e:	3088      	adds	r0, #136	; 0x88
   b8c70:	f7ff fb82 	bl	b8378 <_ZN9IPAddressC1Ev>
}
   b8c74:	4620      	mov	r0, r4
   b8c76:	bd10      	pop	{r4, pc}

000b8c78 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b8c78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8c7a:	2300      	movs	r3, #0
   b8c7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8c80:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b8c84:	4a0e      	ldr	r2, [pc, #56]	; (b8cc0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b8c86:	6103      	str	r3, [r0, #16]
   b8c88:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8c8a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b8c8c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8c8e:	20ac      	movs	r0, #172	; 0xac
   b8c90:	9101      	str	r1, [sp, #4]
   b8c92:	f7fb fa00 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8c96:	1e05      	subs	r5, r0, #0
   b8c98:	f105 060c 	add.w	r6, r5, #12
   b8c9c:	d008      	beq.n	b8cb0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b8c9e:	2301      	movs	r3, #1
   b8ca0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8ca4:	4b07      	ldr	r3, [pc, #28]	; (b8cc4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8ca6:	9901      	ldr	r1, [sp, #4]
   b8ca8:	602b      	str	r3, [r5, #0]
   b8caa:	4630      	mov	r0, r6
   b8cac:	f7ff ffd9 	bl	b8c62 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8cb0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b8cb2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b8cb6:	f7ff fedf 	bl	b8a78 <_ZN9TCPClient12flush_bufferEv>
}
   b8cba:	b002      	add	sp, #8
   b8cbc:	bd70      	pop	{r4, r5, r6, pc}
   b8cbe:	bf00      	nop
   b8cc0:	000bd064 	.word	0x000bd064
   b8cc4:	000bd048 	.word	0x000bd048

000b8cc8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8cc8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8cca:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b8cce:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8cd0:	f7ff ffd2 	bl	b8c78 <_ZN9TCPClientC1Ei>
}
   b8cd4:	4620      	mov	r0, r4
   b8cd6:	bd10      	pop	{r4, pc}

000b8cd8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8cd8:	b510      	push	{r4, lr}
   b8cda:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8cdc:	6800      	ldr	r0, [r0, #0]
   b8cde:	2800      	cmp	r0, #0
   b8ce0:	db01      	blt.n	b8ce6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b8ce2:	f7fe fb8f 	bl	b7404 <sock_close>
    }
}
   b8ce6:	4620      	mov	r0, r4
   b8ce8:	bd10      	pop	{r4, pc}

000b8cea <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8cea:	300c      	adds	r0, #12
   b8cec:	f7ff bff4 	b.w	b8cd8 <_ZN9TCPClient4DataD1Ev>

000b8cf0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8cf0:	2200      	movs	r2, #0
   b8cf2:	6840      	ldr	r0, [r0, #4]
   b8cf4:	4611      	mov	r1, r2
   b8cf6:	f7fe bc99 	b.w	b762c <network_ready>

000b8cfa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8cfa:	2200      	movs	r2, #0
   b8cfc:	6840      	ldr	r0, [r0, #4]
   b8cfe:	4611      	mov	r1, r2
   b8d00:	f7fe bcb4 	b.w	b766c <network_listening>

000b8d04 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8d04:	2200      	movs	r2, #0
   b8d06:	6840      	ldr	r0, [r0, #4]
   b8d08:	4611      	mov	r1, r2
   b8d0a:	f7fe bcbf 	b.w	b768c <network_get_listen_timeout>

000b8d0e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8d0e:	6840      	ldr	r0, [r0, #4]
   b8d10:	2200      	movs	r2, #0
   b8d12:	f7fe bcb3 	b.w	b767c <network_set_listen_timeout>

000b8d16 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8d16:	6840      	ldr	r0, [r0, #4]
   b8d18:	2200      	movs	r2, #0
   b8d1a:	f081 0101 	eor.w	r1, r1, #1
   b8d1e:	f7fe bc9d 	b.w	b765c <network_listen>

000b8d22 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8d22:	2300      	movs	r3, #0
   b8d24:	6840      	ldr	r0, [r0, #4]
   b8d26:	461a      	mov	r2, r3
   b8d28:	4619      	mov	r1, r3
   b8d2a:	f7fe bc8f 	b.w	b764c <network_off>

000b8d2e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8d2e:	2200      	movs	r2, #0
   b8d30:	6840      	ldr	r0, [r0, #4]
   b8d32:	4611      	mov	r1, r2
   b8d34:	f7fe bc6a 	b.w	b760c <network_connecting>

000b8d38 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8d38:	6840      	ldr	r0, [r0, #4]
   b8d3a:	2200      	movs	r2, #0
   b8d3c:	2102      	movs	r1, #2
   b8d3e:	f7fe bc6d 	b.w	b761c <network_disconnect>

000b8d42 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8d42:	2300      	movs	r3, #0
   b8d44:	6840      	ldr	r0, [r0, #4]
   b8d46:	461a      	mov	r2, r3
   b8d48:	f7fe bc58 	b.w	b75fc <network_connect>

000b8d4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8d4c:	4b02      	ldr	r3, [pc, #8]	; (b8d58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8d4e:	2204      	movs	r2, #4
   b8d50:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8d52:	4a02      	ldr	r2, [pc, #8]	; (b8d5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8d54:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8d56:	4770      	bx	lr
   b8d58:	2003e7c8 	.word	0x2003e7c8
   b8d5c:	000bd0b0 	.word	0x000bd0b0

000b8d60 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8d60:	2300      	movs	r3, #0
   b8d62:	6840      	ldr	r0, [r0, #4]
   b8d64:	461a      	mov	r2, r3
   b8d66:	f7fe bc49 	b.w	b75fc <network_connect>

000b8d6a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8d6a:	6840      	ldr	r0, [r0, #4]
   b8d6c:	2200      	movs	r2, #0
   b8d6e:	2102      	movs	r1, #2
   b8d70:	f7fe bc54 	b.w	b761c <network_disconnect>

000b8d74 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8d74:	2200      	movs	r2, #0
   b8d76:	6840      	ldr	r0, [r0, #4]
   b8d78:	4611      	mov	r1, r2
   b8d7a:	f7fe bc47 	b.w	b760c <network_connecting>

000b8d7e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8d7e:	2200      	movs	r2, #0
   b8d80:	6840      	ldr	r0, [r0, #4]
   b8d82:	4611      	mov	r1, r2
   b8d84:	f7fe bc52 	b.w	b762c <network_ready>

000b8d88 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8d88:	2300      	movs	r3, #0
   b8d8a:	6840      	ldr	r0, [r0, #4]
   b8d8c:	461a      	mov	r2, r3
   b8d8e:	4619      	mov	r1, r3
   b8d90:	f7fe bc54 	b.w	b763c <network_on>

000b8d94 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8d94:	2300      	movs	r3, #0
   b8d96:	6840      	ldr	r0, [r0, #4]
   b8d98:	461a      	mov	r2, r3
   b8d9a:	4619      	mov	r1, r3
   b8d9c:	f7fe bc56 	b.w	b764c <network_off>

000b8da0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8da0:	6840      	ldr	r0, [r0, #4]
   b8da2:	2100      	movs	r1, #0
   b8da4:	f7fe bc7a 	b.w	b769c <network_is_on>

000b8da8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8da8:	6840      	ldr	r0, [r0, #4]
   b8daa:	2100      	movs	r1, #0
   b8dac:	f7fe bc7e 	b.w	b76ac <network_is_off>

000b8db0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8db0:	6840      	ldr	r0, [r0, #4]
   b8db2:	2200      	movs	r2, #0
   b8db4:	f081 0101 	eor.w	r1, r1, #1
   b8db8:	f7fe bc50 	b.w	b765c <network_listen>

000b8dbc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8dbc:	6840      	ldr	r0, [r0, #4]
   b8dbe:	2200      	movs	r2, #0
   b8dc0:	f7fe bc5c 	b.w	b767c <network_set_listen_timeout>

000b8dc4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8dc4:	2200      	movs	r2, #0
   b8dc6:	6840      	ldr	r0, [r0, #4]
   b8dc8:	4611      	mov	r1, r2
   b8dca:	f7fe bc5f 	b.w	b768c <network_get_listen_timeout>

000b8dce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8dce:	2200      	movs	r2, #0
   b8dd0:	6840      	ldr	r0, [r0, #4]
   b8dd2:	4611      	mov	r1, r2
   b8dd4:	f7fe bc4a 	b.w	b766c <network_listening>

000b8dd8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8ddc:	b095      	sub	sp, #84	; 0x54
   b8dde:	4614      	mov	r4, r2
   b8de0:	460d      	mov	r5, r1
   b8de2:	4607      	mov	r7, r0
    IPAddress addr;
   b8de4:	f7ff fac8 	bl	b8378 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8de8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8dea:	221c      	movs	r2, #28
   b8dec:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8dee:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8df0:	f001 fb10 	bl	ba414 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8df4:	2340      	movs	r3, #64	; 0x40
   b8df6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8df8:	4620      	mov	r0, r4
   b8dfa:	466b      	mov	r3, sp
   b8dfc:	aa0c      	add	r2, sp, #48	; 0x30
   b8dfe:	2100      	movs	r1, #0
   b8e00:	f7fe f970 	bl	b70e4 <netdb_getaddrinfo>
    if (!r) {
   b8e04:	4604      	mov	r4, r0
   b8e06:	2800      	cmp	r0, #0
   b8e08:	d14b      	bne.n	b8ea2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8e0a:	4602      	mov	r2, r0
   b8e0c:	2101      	movs	r1, #1
   b8e0e:	6868      	ldr	r0, [r5, #4]
   b8e10:	f7fe fc0c 	bl	b762c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8e14:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8e16:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8e18:	4622      	mov	r2, r4
   b8e1a:	6868      	ldr	r0, [r5, #4]
   b8e1c:	f7fe fc06 	bl	b762c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8e20:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8e22:	4681      	mov	r9, r0
        bool ok = false;
   b8e24:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8e26:	2e00      	cmp	r6, #0
   b8e28:	d03b      	beq.n	b8ea2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8e2a:	2900      	cmp	r1, #0
   b8e2c:	d139      	bne.n	b8ea2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8e2e:	6873      	ldr	r3, [r6, #4]
   b8e30:	2b02      	cmp	r3, #2
   b8e32:	d003      	beq.n	b8e3c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8e34:	2b0a      	cmp	r3, #10
   b8e36:	d011      	beq.n	b8e5c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8e38:	69f6      	ldr	r6, [r6, #28]
   b8e3a:	e7f4      	b.n	b8e26 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8e3c:	f1b8 0f00 	cmp.w	r8, #0
   b8e40:	d0fa      	beq.n	b8e38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8e42:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8e44:	a806      	add	r0, sp, #24
   b8e46:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8e48:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8e4a:	f7ff fad9 	bl	b8400 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8e50:	1d3c      	adds	r4, r7, #4
   b8e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8e54:	682b      	ldr	r3, [r5, #0]
   b8e56:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8e58:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8e5a:	e7ed      	b.n	b8e38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8e5c:	f1b9 0f00 	cmp.w	r9, #0
   b8e60:	d0ea      	beq.n	b8e38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8e62:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8e64:	2210      	movs	r2, #16
   b8e66:	a801      	add	r0, sp, #4
   b8e68:	f001 fad4 	bl	ba414 <memset>
                    a.v = 6;
   b8e6c:	2306      	movs	r3, #6
   b8e6e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8e72:	ad01      	add	r5, sp, #4
   b8e74:	f104 0308 	add.w	r3, r4, #8
   b8e78:	3418      	adds	r4, #24
   b8e7a:	6818      	ldr	r0, [r3, #0]
   b8e7c:	6859      	ldr	r1, [r3, #4]
   b8e7e:	462a      	mov	r2, r5
   b8e80:	c203      	stmia	r2!, {r0, r1}
   b8e82:	3308      	adds	r3, #8
   b8e84:	42a3      	cmp	r3, r4
   b8e86:	4615      	mov	r5, r2
   b8e88:	d1f7      	bne.n	b8e7a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8e8a:	a901      	add	r1, sp, #4
   b8e8c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8e8e:	ad07      	add	r5, sp, #28
   b8e90:	f7ff fa80 	bl	b8394 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8e96:	1d3c      	adds	r4, r7, #4
   b8e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8e9a:	682b      	ldr	r3, [r5, #0]
   b8e9c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8e9e:	4649      	mov	r1, r9
   b8ea0:	e7ca      	b.n	b8e38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8ea2:	9800      	ldr	r0, [sp, #0]
   b8ea4:	f7fe f916 	bl	b70d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8ea8:	4638      	mov	r0, r7
   b8eaa:	b015      	add	sp, #84	; 0x54
   b8eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8eb0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8eb0:	4b02      	ldr	r3, [pc, #8]	; (b8ebc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8eb2:	4a03      	ldr	r2, [pc, #12]	; (b8ec0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8eb4:	601a      	str	r2, [r3, #0]
   b8eb6:	2200      	movs	r2, #0
   b8eb8:	605a      	str	r2, [r3, #4]

} // spark
   b8eba:	4770      	bx	lr
   b8ebc:	2003e7d0 	.word	0x2003e7d0
   b8ec0:	000bd0ec 	.word	0x000bd0ec

000b8ec4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8ec4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8ec6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8ec8:	d902      	bls.n	b8ed0 <pinAvailable+0xc>
    return false;
   b8eca:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8ecc:	b002      	add	sp, #8
   b8ece:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8ed0:	f1a0 030b 	sub.w	r3, r0, #11
   b8ed4:	2b02      	cmp	r3, #2
   b8ed6:	d81a      	bhi.n	b8f0e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8ed8:	4c17      	ldr	r4, [pc, #92]	; (b8f38 <pinAvailable+0x74>)
   b8eda:	7821      	ldrb	r1, [r4, #0]
   b8edc:	f3bf 8f5b 	dmb	ish
   b8ee0:	f011 0101 	ands.w	r1, r1, #1
   b8ee4:	d10b      	bne.n	b8efe <pinAvailable+0x3a>
   b8ee6:	4620      	mov	r0, r4
   b8ee8:	9101      	str	r1, [sp, #4]
   b8eea:	f7fb f8e5 	bl	b40b8 <__cxa_guard_acquire>
   b8eee:	9901      	ldr	r1, [sp, #4]
   b8ef0:	b128      	cbz	r0, b8efe <pinAvailable+0x3a>
   b8ef2:	4812      	ldr	r0, [pc, #72]	; (b8f3c <pinAvailable+0x78>)
   b8ef4:	f7fe fca6 	bl	b7844 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8ef8:	4620      	mov	r0, r4
   b8efa:	f7fb f8e2 	bl	b40c2 <__cxa_guard_release>
   b8efe:	4b0f      	ldr	r3, [pc, #60]	; (b8f3c <pinAvailable+0x78>)
   b8f00:	7818      	ldrb	r0, [r3, #0]
   b8f02:	f7fe fad7 	bl	b74b4 <hal_spi_is_enabled>
   b8f06:	2800      	cmp	r0, #0
   b8f08:	d1df      	bne.n	b8eca <pinAvailable+0x6>
  return true; // 'pin' is available
   b8f0a:	2001      	movs	r0, #1
   b8f0c:	e7de      	b.n	b8ecc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8f0e:	2801      	cmp	r0, #1
   b8f10:	d809      	bhi.n	b8f26 <pinAvailable+0x62>
   b8f12:	f000 f8a1 	bl	b9058 <_Z19__fetch_global_Wirev>
   b8f16:	2100      	movs	r1, #0
   b8f18:	7c00      	ldrb	r0, [r0, #16]
   b8f1a:	f7fe fa53 	bl	b73c4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8f1e:	f080 0001 	eor.w	r0, r0, #1
   b8f22:	b2c0      	uxtb	r0, r0
   b8f24:	e7d2      	b.n	b8ecc <pinAvailable+0x8>
   b8f26:	3809      	subs	r0, #9
   b8f28:	2801      	cmp	r0, #1
   b8f2a:	d8ee      	bhi.n	b8f0a <pinAvailable+0x46>
   b8f2c:	f7ff fb58 	bl	b85e0 <_Z22__fetch_global_Serial1v>
   b8f30:	7c00      	ldrb	r0, [r0, #16]
   b8f32:	f7fe f9f7 	bl	b7324 <hal_usart_is_enabled>
   b8f36:	e7f2      	b.n	b8f1e <pinAvailable+0x5a>
   b8f38:	2003e634 	.word	0x2003e634
   b8f3c:	2003e638 	.word	0x2003e638

000b8f40 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8f40:	2823      	cmp	r0, #35	; 0x23
{
   b8f42:	b538      	push	{r3, r4, r5, lr}
   b8f44:	4604      	mov	r4, r0
   b8f46:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8f48:	d80a      	bhi.n	b8f60 <pinMode+0x20>
   b8f4a:	29ff      	cmp	r1, #255	; 0xff
   b8f4c:	d008      	beq.n	b8f60 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8f4e:	f7ff ffb9 	bl	b8ec4 <pinAvailable>
   b8f52:	b128      	cbz	r0, b8f60 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b8f54:	4629      	mov	r1, r5
   b8f56:	4620      	mov	r0, r4
}
   b8f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8f5c:	f7fe b8da 	b.w	b7114 <HAL_Pin_Mode>
}
   b8f60:	bd38      	pop	{r3, r4, r5, pc}

000b8f62 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b8f62:	b538      	push	{r3, r4, r5, lr}
   b8f64:	4604      	mov	r4, r0
   b8f66:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8f68:	f7fe f8dc 	bl	b7124 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8f6c:	28ff      	cmp	r0, #255	; 0xff
   b8f6e:	d010      	beq.n	b8f92 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8f70:	2806      	cmp	r0, #6
   b8f72:	d804      	bhi.n	b8f7e <digitalWrite+0x1c>
   b8f74:	234d      	movs	r3, #77	; 0x4d
   b8f76:	fa23 f000 	lsr.w	r0, r3, r0
   b8f7a:	07c3      	lsls	r3, r0, #31
   b8f7c:	d409      	bmi.n	b8f92 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8f7e:	4620      	mov	r0, r4
   b8f80:	f7ff ffa0 	bl	b8ec4 <pinAvailable>
   b8f84:	b128      	cbz	r0, b8f92 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b8f86:	4629      	mov	r1, r5
   b8f88:	4620      	mov	r0, r4
}
   b8f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8f8e:	f7fe b8d1 	b.w	b7134 <HAL_GPIO_Write>
}
   b8f92:	bd38      	pop	{r3, r4, r5, pc}

000b8f94 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b8f94:	b510      	push	{r4, lr}
   b8f96:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8f98:	f7fe f8c4 	bl	b7124 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8f9c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8f9e:	b2db      	uxtb	r3, r3
   b8fa0:	2b01      	cmp	r3, #1
   b8fa2:	d908      	bls.n	b8fb6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8fa4:	4620      	mov	r0, r4
   b8fa6:	f7ff ff8d 	bl	b8ec4 <pinAvailable>
   b8faa:	b120      	cbz	r0, b8fb6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8fac:	4620      	mov	r0, r4
}
   b8fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b8fb2:	f7fe b8c7 	b.w	b7144 <HAL_GPIO_Read>
}
   b8fb6:	2000      	movs	r0, #0
   b8fb8:	bd10      	pop	{r4, pc}

000b8fba <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   b8fba:	280d      	cmp	r0, #13
{
   b8fbc:	b510      	push	{r4, lr}
   b8fbe:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8fc0:	bf9c      	itt	ls
   b8fc2:	340e      	addls	r4, #14
   b8fc4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   b8fc6:	4620      	mov	r0, r4
   b8fc8:	f7ff ff7c 	bl	b8ec4 <pinAvailable>
   b8fcc:	b150      	cbz	r0, b8fe4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b8fce:	2103      	movs	r1, #3
   b8fd0:	4620      	mov	r0, r4
   b8fd2:	f7fe f897 	bl	b7104 <HAL_Validate_Pin_Function>
   b8fd6:	2803      	cmp	r0, #3
   b8fd8:	d104      	bne.n	b8fe4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8fda:	4620      	mov	r0, r4
}
   b8fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8fe0:	f7fe b8c8 	b.w	b7174 <hal_adc_read>
}
   b8fe4:	2000      	movs	r0, #0
   b8fe6:	bd10      	pop	{r4, pc}

000b8fe8 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b8fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8fec:	4690      	mov	r8, r2
   b8fee:	461f      	mov	r7, r3
   b8ff0:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b8ff2:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b8ff4:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b8ff6:	f1c4 0107 	rsb	r1, r4, #7
   b8ffa:	f1b8 0f00 	cmp.w	r8, #0
   b8ffe:	d112      	bne.n	b9026 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b9000:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b9004:	f001 0101 	and.w	r1, r1, #1
   b9008:	4630      	mov	r0, r6
   b900a:	f7ff ffaa 	bl	b8f62 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b900e:	2101      	movs	r1, #1
   b9010:	4628      	mov	r0, r5
   b9012:	f7ff ffa6 	bl	b8f62 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b9016:	2100      	movs	r1, #0
   b9018:	4628      	mov	r0, r5
   b901a:	f7ff ffa2 	bl	b8f62 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b901e:	3c01      	subs	r4, #1
   b9020:	d2e9      	bcs.n	b8ff6 <shiftOut+0xe>
  }
}
   b9022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b9026:	fa47 f104 	asr.w	r1, r7, r4
   b902a:	e7eb      	b.n	b9004 <shiftOut+0x1c>

000b902c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b902c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b902e:	2520      	movs	r5, #32
   b9030:	2314      	movs	r3, #20
{
   b9032:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9034:	6003      	str	r3, [r0, #0]
   b9036:	6085      	str	r5, [r0, #8]
   b9038:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b903a:	4906      	ldr	r1, [pc, #24]	; (b9054 <_Z17acquireWireBufferv+0x28>)
   b903c:	4628      	mov	r0, r5
   b903e:	f000 f83a 	bl	b90b6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9042:	4904      	ldr	r1, [pc, #16]	; (b9054 <_Z17acquireWireBufferv+0x28>)
	};
   b9044:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9046:	4628      	mov	r0, r5
   b9048:	f000 f835 	bl	b90b6 <_ZnajRKSt9nothrow_t>
	};
   b904c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b904e:	4620      	mov	r0, r4
   b9050:	bd38      	pop	{r3, r4, r5, pc}
   b9052:	bf00      	nop
   b9054:	000bd120 	.word	0x000bd120

000b9058 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b9058:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b905a:	4d0f      	ldr	r5, [pc, #60]	; (b9098 <_Z19__fetch_global_Wirev+0x40>)
   b905c:	7829      	ldrb	r1, [r5, #0]
   b905e:	f3bf 8f5b 	dmb	ish
   b9062:	f011 0401 	ands.w	r4, r1, #1
{
   b9066:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9068:	d113      	bne.n	b9092 <_Z19__fetch_global_Wirev+0x3a>
   b906a:	4628      	mov	r0, r5
   b906c:	f7fb f824 	bl	b40b8 <__cxa_guard_acquire>
   b9070:	b178      	cbz	r0, b9092 <_Z19__fetch_global_Wirev+0x3a>
   b9072:	a801      	add	r0, sp, #4
   b9074:	f7ff ffda 	bl	b902c <_Z17acquireWireBufferv>
   b9078:	aa01      	add	r2, sp, #4
   b907a:	4621      	mov	r1, r4
   b907c:	4807      	ldr	r0, [pc, #28]	; (b909c <_Z19__fetch_global_Wirev+0x44>)
   b907e:	f7ff fb05 	bl	b868c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9082:	4628      	mov	r0, r5
   b9084:	f7fb f81d 	bl	b40c2 <__cxa_guard_release>
   b9088:	4a05      	ldr	r2, [pc, #20]	; (b90a0 <_Z19__fetch_global_Wirev+0x48>)
   b908a:	4906      	ldr	r1, [pc, #24]	; (b90a4 <_Z19__fetch_global_Wirev+0x4c>)
   b908c:	4803      	ldr	r0, [pc, #12]	; (b909c <_Z19__fetch_global_Wirev+0x44>)
   b908e:	f000 f80b 	bl	b90a8 <__aeabi_atexit>
	return wire;
}
   b9092:	4802      	ldr	r0, [pc, #8]	; (b909c <_Z19__fetch_global_Wirev+0x44>)
   b9094:	b007      	add	sp, #28
   b9096:	bd30      	pop	{r4, r5, pc}
   b9098:	2003e7dc 	.word	0x2003e7dc
   b909c:	2003e7e0 	.word	0x2003e7e0
   b90a0:	2003e208 	.word	0x2003e208
   b90a4:	000b8635 	.word	0x000b8635

000b90a8 <__aeabi_atexit>:
   b90a8:	460b      	mov	r3, r1
   b90aa:	4601      	mov	r1, r0
   b90ac:	4618      	mov	r0, r3
   b90ae:	f001 b967 	b.w	ba380 <__cxa_atexit>

000b90b2 <_ZdlPvj>:
   b90b2:	f7fa bff4 	b.w	b409e <_ZdlPv>

000b90b6 <_ZnajRKSt9nothrow_t>:
   b90b6:	f7fa bff0 	b.w	b409a <_Znaj>
	...

000b90bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b90bc:	4901      	ldr	r1, [pc, #4]	; (b90c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b90be:	f000 b8f9 	b.w	b92b4 <_ZNKSt9type_infoeqERKS_>
   b90c2:	bf00      	nop
   b90c4:	000bd13c 	.word	0x000bd13c

000b90c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b90c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b90ca:	2400      	movs	r4, #0
   b90cc:	2310      	movs	r3, #16
   b90ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b90d2:	6803      	ldr	r3, [r0, #0]
   b90d4:	4615      	mov	r5, r2
   b90d6:	699e      	ldr	r6, [r3, #24]
   b90d8:	6812      	ldr	r2, [r2, #0]
   b90da:	466b      	mov	r3, sp
   b90dc:	e9cd 4400 	strd	r4, r4, [sp]
   b90e0:	47b0      	blx	r6
   b90e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b90e6:	f003 0306 	and.w	r3, r3, #6
   b90ea:	2b06      	cmp	r3, #6
   b90ec:	bf03      	ittte	eq
   b90ee:	9b00      	ldreq	r3, [sp, #0]
   b90f0:	602b      	streq	r3, [r5, #0]
   b90f2:	2001      	moveq	r0, #1
   b90f4:	4620      	movne	r0, r4
   b90f6:	b004      	add	sp, #16
   b90f8:	bd70      	pop	{r4, r5, r6, pc}

000b90fa <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b90fa:	9800      	ldr	r0, [sp, #0]
   b90fc:	4290      	cmp	r0, r2
   b90fe:	bf14      	ite	ne
   b9100:	2001      	movne	r0, #1
   b9102:	2006      	moveq	r0, #6
   b9104:	4770      	bx	lr
	...

000b9108 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9108:	b510      	push	{r4, lr}
   b910a:	4b03      	ldr	r3, [pc, #12]	; (b9118 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b910c:	6003      	str	r3, [r0, #0]
   b910e:	4604      	mov	r4, r0
   b9110:	f000 f8cd 	bl	b92ae <_ZNSt9type_infoD1Ev>
   b9114:	4620      	mov	r0, r4
   b9116:	bd10      	pop	{r4, pc}
   b9118:	000bd17c 	.word	0x000bd17c

000b911c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b911c:	b510      	push	{r4, lr}
   b911e:	4604      	mov	r4, r0
   b9120:	f7ff fff2 	bl	b9108 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9124:	4620      	mov	r0, r4
   b9126:	2108      	movs	r1, #8
   b9128:	f7ff ffc3 	bl	b90b2 <_ZdlPvj>
   b912c:	4620      	mov	r0, r4
   b912e:	bd10      	pop	{r4, pc}

000b9130 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9134:	461f      	mov	r7, r3
   b9136:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b913a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b913e:	4598      	cmp	r8, r3
   b9140:	4606      	mov	r6, r0
   b9142:	4615      	mov	r5, r2
   b9144:	d107      	bne.n	b9156 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9146:	9907      	ldr	r1, [sp, #28]
   b9148:	f000 f8b4 	bl	b92b4 <_ZNKSt9type_infoeqERKS_>
   b914c:	b118      	cbz	r0, b9156 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b914e:	7165      	strb	r5, [r4, #5]
   b9150:	2000      	movs	r0, #0
   b9152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9156:	4639      	mov	r1, r7
   b9158:	4630      	mov	r0, r6
   b915a:	f000 f8ab 	bl	b92b4 <_ZNKSt9type_infoeqERKS_>
   b915e:	2800      	cmp	r0, #0
   b9160:	d0f6      	beq.n	b9150 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9162:	2301      	movs	r3, #1
   b9164:	f8c4 8000 	str.w	r8, [r4]
   b9168:	7125      	strb	r5, [r4, #4]
   b916a:	71a3      	strb	r3, [r4, #6]
   b916c:	e7f0      	b.n	b9150 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b916e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b916e:	b538      	push	{r3, r4, r5, lr}
   b9170:	4615      	mov	r5, r2
   b9172:	461c      	mov	r4, r3
   b9174:	f000 f89e 	bl	b92b4 <_ZNKSt9type_infoeqERKS_>
   b9178:	b120      	cbz	r0, b9184 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b917a:	2308      	movs	r3, #8
   b917c:	60e3      	str	r3, [r4, #12]
   b917e:	2306      	movs	r3, #6
   b9180:	6025      	str	r5, [r4, #0]
   b9182:	7123      	strb	r3, [r4, #4]
   b9184:	bd38      	pop	{r3, r4, r5, pc}

000b9186 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9186:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9188:	4605      	mov	r5, r0
   b918a:	460c      	mov	r4, r1
   b918c:	9201      	str	r2, [sp, #4]
   b918e:	461e      	mov	r6, r3
   b9190:	f000 f890 	bl	b92b4 <_ZNKSt9type_infoeqERKS_>
   b9194:	b950      	cbnz	r0, b91ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9196:	2e03      	cmp	r6, #3
   b9198:	d808      	bhi.n	b91ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b919a:	6823      	ldr	r3, [r4, #0]
   b919c:	9a01      	ldr	r2, [sp, #4]
   b919e:	695b      	ldr	r3, [r3, #20]
   b91a0:	4629      	mov	r1, r5
   b91a2:	4620      	mov	r0, r4
   b91a4:	b002      	add	sp, #8
   b91a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b91aa:	4718      	bx	r3
   b91ac:	b002      	add	sp, #8
   b91ae:	bd70      	pop	{r4, r5, r6, pc}

000b91b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b91b0:	b510      	push	{r4, lr}
   b91b2:	4b03      	ldr	r3, [pc, #12]	; (b91c0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b91b4:	6003      	str	r3, [r0, #0]
   b91b6:	4604      	mov	r4, r0
   b91b8:	f7ff ffa6 	bl	b9108 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b91bc:	4620      	mov	r0, r4
   b91be:	bd10      	pop	{r4, pc}
   b91c0:	000bd1dc 	.word	0x000bd1dc

000b91c4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b91c4:	b510      	push	{r4, lr}
   b91c6:	4604      	mov	r4, r0
   b91c8:	f7ff fff2 	bl	b91b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b91cc:	4620      	mov	r0, r4
   b91ce:	210c      	movs	r1, #12
   b91d0:	f7ff ff6f 	bl	b90b2 <_ZdlPvj>
   b91d4:	4620      	mov	r0, r4
   b91d6:	bd10      	pop	{r4, pc}

000b91d8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b91d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b91da:	9f08      	ldr	r7, [sp, #32]
   b91dc:	4297      	cmp	r7, r2
   b91de:	4605      	mov	r5, r0
   b91e0:	460e      	mov	r6, r1
   b91e2:	4614      	mov	r4, r2
   b91e4:	d00a      	beq.n	b91fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b91e6:	68a8      	ldr	r0, [r5, #8]
   b91e8:	6802      	ldr	r2, [r0, #0]
   b91ea:	9708      	str	r7, [sp, #32]
   b91ec:	6a15      	ldr	r5, [r2, #32]
   b91ee:	4631      	mov	r1, r6
   b91f0:	4622      	mov	r2, r4
   b91f2:	46ac      	mov	ip, r5
   b91f4:	b003      	add	sp, #12
   b91f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b91fa:	4760      	bx	ip
   b91fc:	4619      	mov	r1, r3
   b91fe:	9301      	str	r3, [sp, #4]
   b9200:	f000 f858 	bl	b92b4 <_ZNKSt9type_infoeqERKS_>
   b9204:	9b01      	ldr	r3, [sp, #4]
   b9206:	2800      	cmp	r0, #0
   b9208:	d0ed      	beq.n	b91e6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b920a:	2006      	movs	r0, #6
   b920c:	b003      	add	sp, #12
   b920e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9210 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9210:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9214:	460d      	mov	r5, r1
   b9216:	4619      	mov	r1, r3
   b9218:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b921c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9220:	4681      	mov	r9, r0
   b9222:	4617      	mov	r7, r2
   b9224:	4698      	mov	r8, r3
   b9226:	f000 f845 	bl	b92b4 <_ZNKSt9type_infoeqERKS_>
   b922a:	b190      	cbz	r0, b9252 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b922c:	2d00      	cmp	r5, #0
   b922e:	6034      	str	r4, [r6, #0]
   b9230:	7137      	strb	r7, [r6, #4]
   b9232:	db09      	blt.n	b9248 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9234:	1961      	adds	r1, r4, r5
   b9236:	458a      	cmp	sl, r1
   b9238:	bf0c      	ite	eq
   b923a:	2106      	moveq	r1, #6
   b923c:	2101      	movne	r1, #1
   b923e:	71b1      	strb	r1, [r6, #6]
   b9240:	2000      	movs	r0, #0
   b9242:	b001      	add	sp, #4
   b9244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9248:	3502      	adds	r5, #2
   b924a:	d1f9      	bne.n	b9240 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b924c:	2301      	movs	r3, #1
   b924e:	71b3      	strb	r3, [r6, #6]
   b9250:	e7f6      	b.n	b9240 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9252:	4554      	cmp	r4, sl
   b9254:	d106      	bne.n	b9264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9256:	4659      	mov	r1, fp
   b9258:	4648      	mov	r0, r9
   b925a:	f000 f82b 	bl	b92b4 <_ZNKSt9type_infoeqERKS_>
   b925e:	b108      	cbz	r0, b9264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9260:	7177      	strb	r7, [r6, #5]
   b9262:	e7ed      	b.n	b9240 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9264:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9268:	6803      	ldr	r3, [r0, #0]
   b926a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b926e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9272:	69dc      	ldr	r4, [r3, #28]
   b9274:	463a      	mov	r2, r7
   b9276:	4643      	mov	r3, r8
   b9278:	4629      	mov	r1, r5
   b927a:	46a4      	mov	ip, r4
   b927c:	b001      	add	sp, #4
   b927e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9282:	4760      	bx	ip

000b9284 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9288:	4607      	mov	r7, r0
   b928a:	460c      	mov	r4, r1
   b928c:	4615      	mov	r5, r2
   b928e:	461e      	mov	r6, r3
   b9290:	f7ff ff6d 	bl	b916e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9294:	b948      	cbnz	r0, b92aa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9296:	68b8      	ldr	r0, [r7, #8]
   b9298:	6803      	ldr	r3, [r0, #0]
   b929a:	699f      	ldr	r7, [r3, #24]
   b929c:	462a      	mov	r2, r5
   b929e:	4633      	mov	r3, r6
   b92a0:	4621      	mov	r1, r4
   b92a2:	46bc      	mov	ip, r7
   b92a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b92a8:	4760      	bx	ip
   b92aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b92ae <_ZNSt9type_infoD1Ev>:
   b92ae:	4770      	bx	lr

000b92b0 <_ZNKSt9type_info14__is_pointer_pEv>:
   b92b0:	2000      	movs	r0, #0
   b92b2:	4770      	bx	lr

000b92b4 <_ZNKSt9type_infoeqERKS_>:
   b92b4:	4281      	cmp	r1, r0
   b92b6:	b508      	push	{r3, lr}
   b92b8:	d00e      	beq.n	b92d8 <_ZNKSt9type_infoeqERKS_+0x24>
   b92ba:	6840      	ldr	r0, [r0, #4]
   b92bc:	7803      	ldrb	r3, [r0, #0]
   b92be:	2b2a      	cmp	r3, #42	; 0x2a
   b92c0:	d00c      	beq.n	b92dc <_ZNKSt9type_infoeqERKS_+0x28>
   b92c2:	6849      	ldr	r1, [r1, #4]
   b92c4:	780b      	ldrb	r3, [r1, #0]
   b92c6:	2b2a      	cmp	r3, #42	; 0x2a
   b92c8:	bf08      	it	eq
   b92ca:	3101      	addeq	r1, #1
   b92cc:	f001 f916 	bl	ba4fc <strcmp>
   b92d0:	fab0 f080 	clz	r0, r0
   b92d4:	0940      	lsrs	r0, r0, #5
   b92d6:	bd08      	pop	{r3, pc}
   b92d8:	2001      	movs	r0, #1
   b92da:	e7fc      	b.n	b92d6 <_ZNKSt9type_infoeqERKS_+0x22>
   b92dc:	2000      	movs	r0, #0
   b92de:	e7fa      	b.n	b92d6 <_ZNKSt9type_infoeqERKS_+0x22>

000b92e0 <nan>:
   b92e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; b92e8 <nan+0x8>
   b92e4:	4770      	bx	lr
   b92e6:	bf00      	nop
   b92e8:	00000000 	.word	0x00000000
   b92ec:	7ff80000 	.word	0x7ff80000

000b92f0 <__aeabi_drsub>:
   b92f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b92f4:	e002      	b.n	b92fc <__adddf3>
   b92f6:	bf00      	nop

000b92f8 <__aeabi_dsub>:
   b92f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b92fc <__adddf3>:
   b92fc:	b530      	push	{r4, r5, lr}
   b92fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b9302:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9306:	ea94 0f05 	teq	r4, r5
   b930a:	bf08      	it	eq
   b930c:	ea90 0f02 	teqeq	r0, r2
   b9310:	bf1f      	itttt	ne
   b9312:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9316:	ea55 0c02 	orrsne.w	ip, r5, r2
   b931a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b931e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9322:	f000 80e2 	beq.w	b94ea <__adddf3+0x1ee>
   b9326:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b932a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b932e:	bfb8      	it	lt
   b9330:	426d      	neglt	r5, r5
   b9332:	dd0c      	ble.n	b934e <__adddf3+0x52>
   b9334:	442c      	add	r4, r5
   b9336:	ea80 0202 	eor.w	r2, r0, r2
   b933a:	ea81 0303 	eor.w	r3, r1, r3
   b933e:	ea82 0000 	eor.w	r0, r2, r0
   b9342:	ea83 0101 	eor.w	r1, r3, r1
   b9346:	ea80 0202 	eor.w	r2, r0, r2
   b934a:	ea81 0303 	eor.w	r3, r1, r3
   b934e:	2d36      	cmp	r5, #54	; 0x36
   b9350:	bf88      	it	hi
   b9352:	bd30      	pophi	{r4, r5, pc}
   b9354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9358:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b935c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9364:	d002      	beq.n	b936c <__adddf3+0x70>
   b9366:	4240      	negs	r0, r0
   b9368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b936c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9370:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9378:	d002      	beq.n	b9380 <__adddf3+0x84>
   b937a:	4252      	negs	r2, r2
   b937c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9380:	ea94 0f05 	teq	r4, r5
   b9384:	f000 80a7 	beq.w	b94d6 <__adddf3+0x1da>
   b9388:	f1a4 0401 	sub.w	r4, r4, #1
   b938c:	f1d5 0e20 	rsbs	lr, r5, #32
   b9390:	db0d      	blt.n	b93ae <__adddf3+0xb2>
   b9392:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9396:	fa22 f205 	lsr.w	r2, r2, r5
   b939a:	1880      	adds	r0, r0, r2
   b939c:	f141 0100 	adc.w	r1, r1, #0
   b93a0:	fa03 f20e 	lsl.w	r2, r3, lr
   b93a4:	1880      	adds	r0, r0, r2
   b93a6:	fa43 f305 	asr.w	r3, r3, r5
   b93aa:	4159      	adcs	r1, r3
   b93ac:	e00e      	b.n	b93cc <__adddf3+0xd0>
   b93ae:	f1a5 0520 	sub.w	r5, r5, #32
   b93b2:	f10e 0e20 	add.w	lr, lr, #32
   b93b6:	2a01      	cmp	r2, #1
   b93b8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b93bc:	bf28      	it	cs
   b93be:	f04c 0c02 	orrcs.w	ip, ip, #2
   b93c2:	fa43 f305 	asr.w	r3, r3, r5
   b93c6:	18c0      	adds	r0, r0, r3
   b93c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b93cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b93d0:	d507      	bpl.n	b93e2 <__adddf3+0xe6>
   b93d2:	f04f 0e00 	mov.w	lr, #0
   b93d6:	f1dc 0c00 	rsbs	ip, ip, #0
   b93da:	eb7e 0000 	sbcs.w	r0, lr, r0
   b93de:	eb6e 0101 	sbc.w	r1, lr, r1
   b93e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b93e6:	d31b      	bcc.n	b9420 <__adddf3+0x124>
   b93e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b93ec:	d30c      	bcc.n	b9408 <__adddf3+0x10c>
   b93ee:	0849      	lsrs	r1, r1, #1
   b93f0:	ea5f 0030 	movs.w	r0, r0, rrx
   b93f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b93f8:	f104 0401 	add.w	r4, r4, #1
   b93fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9404:	f080 809a 	bcs.w	b953c <__adddf3+0x240>
   b9408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b940c:	bf08      	it	eq
   b940e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9412:	f150 0000 	adcs.w	r0, r0, #0
   b9416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b941a:	ea41 0105 	orr.w	r1, r1, r5
   b941e:	bd30      	pop	{r4, r5, pc}
   b9420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9424:	4140      	adcs	r0, r0
   b9426:	eb41 0101 	adc.w	r1, r1, r1
   b942a:	3c01      	subs	r4, #1
   b942c:	bf28      	it	cs
   b942e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9432:	d2e9      	bcs.n	b9408 <__adddf3+0x10c>
   b9434:	f091 0f00 	teq	r1, #0
   b9438:	bf04      	itt	eq
   b943a:	4601      	moveq	r1, r0
   b943c:	2000      	moveq	r0, #0
   b943e:	fab1 f381 	clz	r3, r1
   b9442:	bf08      	it	eq
   b9444:	3320      	addeq	r3, #32
   b9446:	f1a3 030b 	sub.w	r3, r3, #11
   b944a:	f1b3 0220 	subs.w	r2, r3, #32
   b944e:	da0c      	bge.n	b946a <__adddf3+0x16e>
   b9450:	320c      	adds	r2, #12
   b9452:	dd08      	ble.n	b9466 <__adddf3+0x16a>
   b9454:	f102 0c14 	add.w	ip, r2, #20
   b9458:	f1c2 020c 	rsb	r2, r2, #12
   b945c:	fa01 f00c 	lsl.w	r0, r1, ip
   b9460:	fa21 f102 	lsr.w	r1, r1, r2
   b9464:	e00c      	b.n	b9480 <__adddf3+0x184>
   b9466:	f102 0214 	add.w	r2, r2, #20
   b946a:	bfd8      	it	le
   b946c:	f1c2 0c20 	rsble	ip, r2, #32
   b9470:	fa01 f102 	lsl.w	r1, r1, r2
   b9474:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9478:	bfdc      	itt	le
   b947a:	ea41 010c 	orrle.w	r1, r1, ip
   b947e:	4090      	lslle	r0, r2
   b9480:	1ae4      	subs	r4, r4, r3
   b9482:	bfa2      	ittt	ge
   b9484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9488:	4329      	orrge	r1, r5
   b948a:	bd30      	popge	{r4, r5, pc}
   b948c:	ea6f 0404 	mvn.w	r4, r4
   b9490:	3c1f      	subs	r4, #31
   b9492:	da1c      	bge.n	b94ce <__adddf3+0x1d2>
   b9494:	340c      	adds	r4, #12
   b9496:	dc0e      	bgt.n	b94b6 <__adddf3+0x1ba>
   b9498:	f104 0414 	add.w	r4, r4, #20
   b949c:	f1c4 0220 	rsb	r2, r4, #32
   b94a0:	fa20 f004 	lsr.w	r0, r0, r4
   b94a4:	fa01 f302 	lsl.w	r3, r1, r2
   b94a8:	ea40 0003 	orr.w	r0, r0, r3
   b94ac:	fa21 f304 	lsr.w	r3, r1, r4
   b94b0:	ea45 0103 	orr.w	r1, r5, r3
   b94b4:	bd30      	pop	{r4, r5, pc}
   b94b6:	f1c4 040c 	rsb	r4, r4, #12
   b94ba:	f1c4 0220 	rsb	r2, r4, #32
   b94be:	fa20 f002 	lsr.w	r0, r0, r2
   b94c2:	fa01 f304 	lsl.w	r3, r1, r4
   b94c6:	ea40 0003 	orr.w	r0, r0, r3
   b94ca:	4629      	mov	r1, r5
   b94cc:	bd30      	pop	{r4, r5, pc}
   b94ce:	fa21 f004 	lsr.w	r0, r1, r4
   b94d2:	4629      	mov	r1, r5
   b94d4:	bd30      	pop	{r4, r5, pc}
   b94d6:	f094 0f00 	teq	r4, #0
   b94da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b94de:	bf06      	itte	eq
   b94e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b94e4:	3401      	addeq	r4, #1
   b94e6:	3d01      	subne	r5, #1
   b94e8:	e74e      	b.n	b9388 <__adddf3+0x8c>
   b94ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b94ee:	bf18      	it	ne
   b94f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b94f4:	d029      	beq.n	b954a <__adddf3+0x24e>
   b94f6:	ea94 0f05 	teq	r4, r5
   b94fa:	bf08      	it	eq
   b94fc:	ea90 0f02 	teqeq	r0, r2
   b9500:	d005      	beq.n	b950e <__adddf3+0x212>
   b9502:	ea54 0c00 	orrs.w	ip, r4, r0
   b9506:	bf04      	itt	eq
   b9508:	4619      	moveq	r1, r3
   b950a:	4610      	moveq	r0, r2
   b950c:	bd30      	pop	{r4, r5, pc}
   b950e:	ea91 0f03 	teq	r1, r3
   b9512:	bf1e      	ittt	ne
   b9514:	2100      	movne	r1, #0
   b9516:	2000      	movne	r0, #0
   b9518:	bd30      	popne	{r4, r5, pc}
   b951a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b951e:	d105      	bne.n	b952c <__adddf3+0x230>
   b9520:	0040      	lsls	r0, r0, #1
   b9522:	4149      	adcs	r1, r1
   b9524:	bf28      	it	cs
   b9526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b952a:	bd30      	pop	{r4, r5, pc}
   b952c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9530:	bf3c      	itt	cc
   b9532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9536:	bd30      	popcc	{r4, r5, pc}
   b9538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b953c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9544:	f04f 0000 	mov.w	r0, #0
   b9548:	bd30      	pop	{r4, r5, pc}
   b954a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b954e:	bf1a      	itte	ne
   b9550:	4619      	movne	r1, r3
   b9552:	4610      	movne	r0, r2
   b9554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9558:	bf1c      	itt	ne
   b955a:	460b      	movne	r3, r1
   b955c:	4602      	movne	r2, r0
   b955e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9562:	bf06      	itte	eq
   b9564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9568:	ea91 0f03 	teqeq	r1, r3
   b956c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9570:	bd30      	pop	{r4, r5, pc}
   b9572:	bf00      	nop

000b9574 <__aeabi_ui2d>:
   b9574:	f090 0f00 	teq	r0, #0
   b9578:	bf04      	itt	eq
   b957a:	2100      	moveq	r1, #0
   b957c:	4770      	bxeq	lr
   b957e:	b530      	push	{r4, r5, lr}
   b9580:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9584:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9588:	f04f 0500 	mov.w	r5, #0
   b958c:	f04f 0100 	mov.w	r1, #0
   b9590:	e750      	b.n	b9434 <__adddf3+0x138>
   b9592:	bf00      	nop

000b9594 <__aeabi_i2d>:
   b9594:	f090 0f00 	teq	r0, #0
   b9598:	bf04      	itt	eq
   b959a:	2100      	moveq	r1, #0
   b959c:	4770      	bxeq	lr
   b959e:	b530      	push	{r4, r5, lr}
   b95a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b95a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b95a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b95ac:	bf48      	it	mi
   b95ae:	4240      	negmi	r0, r0
   b95b0:	f04f 0100 	mov.w	r1, #0
   b95b4:	e73e      	b.n	b9434 <__adddf3+0x138>
   b95b6:	bf00      	nop

000b95b8 <__aeabi_f2d>:
   b95b8:	0042      	lsls	r2, r0, #1
   b95ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b95be:	ea4f 0131 	mov.w	r1, r1, rrx
   b95c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b95c6:	bf1f      	itttt	ne
   b95c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b95cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b95d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b95d4:	4770      	bxne	lr
   b95d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b95da:	bf08      	it	eq
   b95dc:	4770      	bxeq	lr
   b95de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b95e2:	bf04      	itt	eq
   b95e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b95e8:	4770      	bxeq	lr
   b95ea:	b530      	push	{r4, r5, lr}
   b95ec:	f44f 7460 	mov.w	r4, #896	; 0x380
   b95f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b95f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b95f8:	e71c      	b.n	b9434 <__adddf3+0x138>
   b95fa:	bf00      	nop

000b95fc <__aeabi_ul2d>:
   b95fc:	ea50 0201 	orrs.w	r2, r0, r1
   b9600:	bf08      	it	eq
   b9602:	4770      	bxeq	lr
   b9604:	b530      	push	{r4, r5, lr}
   b9606:	f04f 0500 	mov.w	r5, #0
   b960a:	e00a      	b.n	b9622 <__aeabi_l2d+0x16>

000b960c <__aeabi_l2d>:
   b960c:	ea50 0201 	orrs.w	r2, r0, r1
   b9610:	bf08      	it	eq
   b9612:	4770      	bxeq	lr
   b9614:	b530      	push	{r4, r5, lr}
   b9616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b961a:	d502      	bpl.n	b9622 <__aeabi_l2d+0x16>
   b961c:	4240      	negs	r0, r0
   b961e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9622:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9626:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b962a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b962e:	f43f aed8 	beq.w	b93e2 <__adddf3+0xe6>
   b9632:	f04f 0203 	mov.w	r2, #3
   b9636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b963a:	bf18      	it	ne
   b963c:	3203      	addne	r2, #3
   b963e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9642:	bf18      	it	ne
   b9644:	3203      	addne	r2, #3
   b9646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b964a:	f1c2 0320 	rsb	r3, r2, #32
   b964e:	fa00 fc03 	lsl.w	ip, r0, r3
   b9652:	fa20 f002 	lsr.w	r0, r0, r2
   b9656:	fa01 fe03 	lsl.w	lr, r1, r3
   b965a:	ea40 000e 	orr.w	r0, r0, lr
   b965e:	fa21 f102 	lsr.w	r1, r1, r2
   b9662:	4414      	add	r4, r2
   b9664:	e6bd      	b.n	b93e2 <__adddf3+0xe6>
   b9666:	bf00      	nop

000b9668 <__aeabi_dmul>:
   b9668:	b570      	push	{r4, r5, r6, lr}
   b966a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b966e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9676:	bf1d      	ittte	ne
   b9678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b967c:	ea94 0f0c 	teqne	r4, ip
   b9680:	ea95 0f0c 	teqne	r5, ip
   b9684:	f000 f8de 	bleq	b9844 <__aeabi_dmul+0x1dc>
   b9688:	442c      	add	r4, r5
   b968a:	ea81 0603 	eor.w	r6, r1, r3
   b968e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b9692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b9696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b969a:	bf18      	it	ne
   b969c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b96a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b96a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b96a8:	d038      	beq.n	b971c <__aeabi_dmul+0xb4>
   b96aa:	fba0 ce02 	umull	ip, lr, r0, r2
   b96ae:	f04f 0500 	mov.w	r5, #0
   b96b2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b96b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b96ba:	fbe0 e503 	umlal	lr, r5, r0, r3
   b96be:	f04f 0600 	mov.w	r6, #0
   b96c2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b96c6:	f09c 0f00 	teq	ip, #0
   b96ca:	bf18      	it	ne
   b96cc:	f04e 0e01 	orrne.w	lr, lr, #1
   b96d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b96d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b96d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b96dc:	d204      	bcs.n	b96e8 <__aeabi_dmul+0x80>
   b96de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b96e2:	416d      	adcs	r5, r5
   b96e4:	eb46 0606 	adc.w	r6, r6, r6
   b96e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b96ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b96f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b96f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b96f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b96fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9700:	bf88      	it	hi
   b9702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9706:	d81e      	bhi.n	b9746 <__aeabi_dmul+0xde>
   b9708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b970c:	bf08      	it	eq
   b970e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b9712:	f150 0000 	adcs.w	r0, r0, #0
   b9716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b971a:	bd70      	pop	{r4, r5, r6, pc}
   b971c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9720:	ea46 0101 	orr.w	r1, r6, r1
   b9724:	ea40 0002 	orr.w	r0, r0, r2
   b9728:	ea81 0103 	eor.w	r1, r1, r3
   b972c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b9730:	bfc2      	ittt	gt
   b9732:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b973a:	bd70      	popgt	{r4, r5, r6, pc}
   b973c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9740:	f04f 0e00 	mov.w	lr, #0
   b9744:	3c01      	subs	r4, #1
   b9746:	f300 80ab 	bgt.w	b98a0 <__aeabi_dmul+0x238>
   b974a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b974e:	bfde      	ittt	le
   b9750:	2000      	movle	r0, #0
   b9752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b9756:	bd70      	pople	{r4, r5, r6, pc}
   b9758:	f1c4 0400 	rsb	r4, r4, #0
   b975c:	3c20      	subs	r4, #32
   b975e:	da35      	bge.n	b97cc <__aeabi_dmul+0x164>
   b9760:	340c      	adds	r4, #12
   b9762:	dc1b      	bgt.n	b979c <__aeabi_dmul+0x134>
   b9764:	f104 0414 	add.w	r4, r4, #20
   b9768:	f1c4 0520 	rsb	r5, r4, #32
   b976c:	fa00 f305 	lsl.w	r3, r0, r5
   b9770:	fa20 f004 	lsr.w	r0, r0, r4
   b9774:	fa01 f205 	lsl.w	r2, r1, r5
   b9778:	ea40 0002 	orr.w	r0, r0, r2
   b977c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b9780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9788:	fa21 f604 	lsr.w	r6, r1, r4
   b978c:	eb42 0106 	adc.w	r1, r2, r6
   b9790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9794:	bf08      	it	eq
   b9796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b979a:	bd70      	pop	{r4, r5, r6, pc}
   b979c:	f1c4 040c 	rsb	r4, r4, #12
   b97a0:	f1c4 0520 	rsb	r5, r4, #32
   b97a4:	fa00 f304 	lsl.w	r3, r0, r4
   b97a8:	fa20 f005 	lsr.w	r0, r0, r5
   b97ac:	fa01 f204 	lsl.w	r2, r1, r4
   b97b0:	ea40 0002 	orr.w	r0, r0, r2
   b97b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b97b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b97bc:	f141 0100 	adc.w	r1, r1, #0
   b97c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b97c4:	bf08      	it	eq
   b97c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b97ca:	bd70      	pop	{r4, r5, r6, pc}
   b97cc:	f1c4 0520 	rsb	r5, r4, #32
   b97d0:	fa00 f205 	lsl.w	r2, r0, r5
   b97d4:	ea4e 0e02 	orr.w	lr, lr, r2
   b97d8:	fa20 f304 	lsr.w	r3, r0, r4
   b97dc:	fa01 f205 	lsl.w	r2, r1, r5
   b97e0:	ea43 0302 	orr.w	r3, r3, r2
   b97e4:	fa21 f004 	lsr.w	r0, r1, r4
   b97e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b97ec:	fa21 f204 	lsr.w	r2, r1, r4
   b97f0:	ea20 0002 	bic.w	r0, r0, r2
   b97f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b97f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b97fc:	bf08      	it	eq
   b97fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9802:	bd70      	pop	{r4, r5, r6, pc}
   b9804:	f094 0f00 	teq	r4, #0
   b9808:	d10f      	bne.n	b982a <__aeabi_dmul+0x1c2>
   b980a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b980e:	0040      	lsls	r0, r0, #1
   b9810:	eb41 0101 	adc.w	r1, r1, r1
   b9814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9818:	bf08      	it	eq
   b981a:	3c01      	subeq	r4, #1
   b981c:	d0f7      	beq.n	b980e <__aeabi_dmul+0x1a6>
   b981e:	ea41 0106 	orr.w	r1, r1, r6
   b9822:	f095 0f00 	teq	r5, #0
   b9826:	bf18      	it	ne
   b9828:	4770      	bxne	lr
   b982a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b982e:	0052      	lsls	r2, r2, #1
   b9830:	eb43 0303 	adc.w	r3, r3, r3
   b9834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b9838:	bf08      	it	eq
   b983a:	3d01      	subeq	r5, #1
   b983c:	d0f7      	beq.n	b982e <__aeabi_dmul+0x1c6>
   b983e:	ea43 0306 	orr.w	r3, r3, r6
   b9842:	4770      	bx	lr
   b9844:	ea94 0f0c 	teq	r4, ip
   b9848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b984c:	bf18      	it	ne
   b984e:	ea95 0f0c 	teqne	r5, ip
   b9852:	d00c      	beq.n	b986e <__aeabi_dmul+0x206>
   b9854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9858:	bf18      	it	ne
   b985a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b985e:	d1d1      	bne.n	b9804 <__aeabi_dmul+0x19c>
   b9860:	ea81 0103 	eor.w	r1, r1, r3
   b9864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9868:	f04f 0000 	mov.w	r0, #0
   b986c:	bd70      	pop	{r4, r5, r6, pc}
   b986e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9872:	bf06      	itte	eq
   b9874:	4610      	moveq	r0, r2
   b9876:	4619      	moveq	r1, r3
   b9878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b987c:	d019      	beq.n	b98b2 <__aeabi_dmul+0x24a>
   b987e:	ea94 0f0c 	teq	r4, ip
   b9882:	d102      	bne.n	b988a <__aeabi_dmul+0x222>
   b9884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9888:	d113      	bne.n	b98b2 <__aeabi_dmul+0x24a>
   b988a:	ea95 0f0c 	teq	r5, ip
   b988e:	d105      	bne.n	b989c <__aeabi_dmul+0x234>
   b9890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b9894:	bf1c      	itt	ne
   b9896:	4610      	movne	r0, r2
   b9898:	4619      	movne	r1, r3
   b989a:	d10a      	bne.n	b98b2 <__aeabi_dmul+0x24a>
   b989c:	ea81 0103 	eor.w	r1, r1, r3
   b98a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b98a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b98a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b98ac:	f04f 0000 	mov.w	r0, #0
   b98b0:	bd70      	pop	{r4, r5, r6, pc}
   b98b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b98b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b98ba:	bd70      	pop	{r4, r5, r6, pc}

000b98bc <__aeabi_ddiv>:
   b98bc:	b570      	push	{r4, r5, r6, lr}
   b98be:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b98c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b98c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b98ca:	bf1d      	ittte	ne
   b98cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b98d0:	ea94 0f0c 	teqne	r4, ip
   b98d4:	ea95 0f0c 	teqne	r5, ip
   b98d8:	f000 f8a7 	bleq	b9a2a <__aeabi_ddiv+0x16e>
   b98dc:	eba4 0405 	sub.w	r4, r4, r5
   b98e0:	ea81 0e03 	eor.w	lr, r1, r3
   b98e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b98e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b98ec:	f000 8088 	beq.w	b9a00 <__aeabi_ddiv+0x144>
   b98f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b98f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b98f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b98fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9900:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b990c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9914:	429d      	cmp	r5, r3
   b9916:	bf08      	it	eq
   b9918:	4296      	cmpeq	r6, r2
   b991a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b991e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9922:	d202      	bcs.n	b992a <__aeabi_ddiv+0x6e>
   b9924:	085b      	lsrs	r3, r3, #1
   b9926:	ea4f 0232 	mov.w	r2, r2, rrx
   b992a:	1ab6      	subs	r6, r6, r2
   b992c:	eb65 0503 	sbc.w	r5, r5, r3
   b9930:	085b      	lsrs	r3, r3, #1
   b9932:	ea4f 0232 	mov.w	r2, r2, rrx
   b9936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b993a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b993e:	ebb6 0e02 	subs.w	lr, r6, r2
   b9942:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9946:	bf22      	ittt	cs
   b9948:	1ab6      	subcs	r6, r6, r2
   b994a:	4675      	movcs	r5, lr
   b994c:	ea40 000c 	orrcs.w	r0, r0, ip
   b9950:	085b      	lsrs	r3, r3, #1
   b9952:	ea4f 0232 	mov.w	r2, r2, rrx
   b9956:	ebb6 0e02 	subs.w	lr, r6, r2
   b995a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b995e:	bf22      	ittt	cs
   b9960:	1ab6      	subcs	r6, r6, r2
   b9962:	4675      	movcs	r5, lr
   b9964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b9968:	085b      	lsrs	r3, r3, #1
   b996a:	ea4f 0232 	mov.w	r2, r2, rrx
   b996e:	ebb6 0e02 	subs.w	lr, r6, r2
   b9972:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9976:	bf22      	ittt	cs
   b9978:	1ab6      	subcs	r6, r6, r2
   b997a:	4675      	movcs	r5, lr
   b997c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9980:	085b      	lsrs	r3, r3, #1
   b9982:	ea4f 0232 	mov.w	r2, r2, rrx
   b9986:	ebb6 0e02 	subs.w	lr, r6, r2
   b998a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b998e:	bf22      	ittt	cs
   b9990:	1ab6      	subcs	r6, r6, r2
   b9992:	4675      	movcs	r5, lr
   b9994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9998:	ea55 0e06 	orrs.w	lr, r5, r6
   b999c:	d018      	beq.n	b99d0 <__aeabi_ddiv+0x114>
   b999e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b99a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b99a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b99aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b99ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b99b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b99b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b99ba:	d1c0      	bne.n	b993e <__aeabi_ddiv+0x82>
   b99bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b99c0:	d10b      	bne.n	b99da <__aeabi_ddiv+0x11e>
   b99c2:	ea41 0100 	orr.w	r1, r1, r0
   b99c6:	f04f 0000 	mov.w	r0, #0
   b99ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b99ce:	e7b6      	b.n	b993e <__aeabi_ddiv+0x82>
   b99d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b99d4:	bf04      	itt	eq
   b99d6:	4301      	orreq	r1, r0
   b99d8:	2000      	moveq	r0, #0
   b99da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b99de:	bf88      	it	hi
   b99e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b99e4:	f63f aeaf 	bhi.w	b9746 <__aeabi_dmul+0xde>
   b99e8:	ebb5 0c03 	subs.w	ip, r5, r3
   b99ec:	bf04      	itt	eq
   b99ee:	ebb6 0c02 	subseq.w	ip, r6, r2
   b99f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b99f6:	f150 0000 	adcs.w	r0, r0, #0
   b99fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b99fe:	bd70      	pop	{r4, r5, r6, pc}
   b9a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9a0c:	bfc2      	ittt	gt
   b9a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9a16:	bd70      	popgt	{r4, r5, r6, pc}
   b9a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9a1c:	f04f 0e00 	mov.w	lr, #0
   b9a20:	3c01      	subs	r4, #1
   b9a22:	e690      	b.n	b9746 <__aeabi_dmul+0xde>
   b9a24:	ea45 0e06 	orr.w	lr, r5, r6
   b9a28:	e68d      	b.n	b9746 <__aeabi_dmul+0xde>
   b9a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9a2e:	ea94 0f0c 	teq	r4, ip
   b9a32:	bf08      	it	eq
   b9a34:	ea95 0f0c 	teqeq	r5, ip
   b9a38:	f43f af3b 	beq.w	b98b2 <__aeabi_dmul+0x24a>
   b9a3c:	ea94 0f0c 	teq	r4, ip
   b9a40:	d10a      	bne.n	b9a58 <__aeabi_ddiv+0x19c>
   b9a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9a46:	f47f af34 	bne.w	b98b2 <__aeabi_dmul+0x24a>
   b9a4a:	ea95 0f0c 	teq	r5, ip
   b9a4e:	f47f af25 	bne.w	b989c <__aeabi_dmul+0x234>
   b9a52:	4610      	mov	r0, r2
   b9a54:	4619      	mov	r1, r3
   b9a56:	e72c      	b.n	b98b2 <__aeabi_dmul+0x24a>
   b9a58:	ea95 0f0c 	teq	r5, ip
   b9a5c:	d106      	bne.n	b9a6c <__aeabi_ddiv+0x1b0>
   b9a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9a62:	f43f aefd 	beq.w	b9860 <__aeabi_dmul+0x1f8>
   b9a66:	4610      	mov	r0, r2
   b9a68:	4619      	mov	r1, r3
   b9a6a:	e722      	b.n	b98b2 <__aeabi_dmul+0x24a>
   b9a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9a70:	bf18      	it	ne
   b9a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9a76:	f47f aec5 	bne.w	b9804 <__aeabi_dmul+0x19c>
   b9a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b9a7e:	f47f af0d 	bne.w	b989c <__aeabi_dmul+0x234>
   b9a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b9a86:	f47f aeeb 	bne.w	b9860 <__aeabi_dmul+0x1f8>
   b9a8a:	e712      	b.n	b98b2 <__aeabi_dmul+0x24a>

000b9a8c <__gedf2>:
   b9a8c:	f04f 3cff 	mov.w	ip, #4294967295
   b9a90:	e006      	b.n	b9aa0 <__cmpdf2+0x4>
   b9a92:	bf00      	nop

000b9a94 <__ledf2>:
   b9a94:	f04f 0c01 	mov.w	ip, #1
   b9a98:	e002      	b.n	b9aa0 <__cmpdf2+0x4>
   b9a9a:	bf00      	nop

000b9a9c <__cmpdf2>:
   b9a9c:	f04f 0c01 	mov.w	ip, #1
   b9aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b9aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9ab0:	bf18      	it	ne
   b9ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b9ab6:	d01b      	beq.n	b9af0 <__cmpdf2+0x54>
   b9ab8:	b001      	add	sp, #4
   b9aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b9abe:	bf0c      	ite	eq
   b9ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b9ac4:	ea91 0f03 	teqne	r1, r3
   b9ac8:	bf02      	ittt	eq
   b9aca:	ea90 0f02 	teqeq	r0, r2
   b9ace:	2000      	moveq	r0, #0
   b9ad0:	4770      	bxeq	lr
   b9ad2:	f110 0f00 	cmn.w	r0, #0
   b9ad6:	ea91 0f03 	teq	r1, r3
   b9ada:	bf58      	it	pl
   b9adc:	4299      	cmppl	r1, r3
   b9ade:	bf08      	it	eq
   b9ae0:	4290      	cmpeq	r0, r2
   b9ae2:	bf2c      	ite	cs
   b9ae4:	17d8      	asrcs	r0, r3, #31
   b9ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9aea:	f040 0001 	orr.w	r0, r0, #1
   b9aee:	4770      	bx	lr
   b9af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9af8:	d102      	bne.n	b9b00 <__cmpdf2+0x64>
   b9afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9afe:	d107      	bne.n	b9b10 <__cmpdf2+0x74>
   b9b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9b08:	d1d6      	bne.n	b9ab8 <__cmpdf2+0x1c>
   b9b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9b0e:	d0d3      	beq.n	b9ab8 <__cmpdf2+0x1c>
   b9b10:	f85d 0b04 	ldr.w	r0, [sp], #4
   b9b14:	4770      	bx	lr
   b9b16:	bf00      	nop

000b9b18 <__aeabi_cdrcmple>:
   b9b18:	4684      	mov	ip, r0
   b9b1a:	4610      	mov	r0, r2
   b9b1c:	4662      	mov	r2, ip
   b9b1e:	468c      	mov	ip, r1
   b9b20:	4619      	mov	r1, r3
   b9b22:	4663      	mov	r3, ip
   b9b24:	e000      	b.n	b9b28 <__aeabi_cdcmpeq>
   b9b26:	bf00      	nop

000b9b28 <__aeabi_cdcmpeq>:
   b9b28:	b501      	push	{r0, lr}
   b9b2a:	f7ff ffb7 	bl	b9a9c <__cmpdf2>
   b9b2e:	2800      	cmp	r0, #0
   b9b30:	bf48      	it	mi
   b9b32:	f110 0f00 	cmnmi.w	r0, #0
   b9b36:	bd01      	pop	{r0, pc}

000b9b38 <__aeabi_dcmpeq>:
   b9b38:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9b3c:	f7ff fff4 	bl	b9b28 <__aeabi_cdcmpeq>
   b9b40:	bf0c      	ite	eq
   b9b42:	2001      	moveq	r0, #1
   b9b44:	2000      	movne	r0, #0
   b9b46:	f85d fb08 	ldr.w	pc, [sp], #8
   b9b4a:	bf00      	nop

000b9b4c <__aeabi_dcmplt>:
   b9b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9b50:	f7ff ffea 	bl	b9b28 <__aeabi_cdcmpeq>
   b9b54:	bf34      	ite	cc
   b9b56:	2001      	movcc	r0, #1
   b9b58:	2000      	movcs	r0, #0
   b9b5a:	f85d fb08 	ldr.w	pc, [sp], #8
   b9b5e:	bf00      	nop

000b9b60 <__aeabi_dcmple>:
   b9b60:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9b64:	f7ff ffe0 	bl	b9b28 <__aeabi_cdcmpeq>
   b9b68:	bf94      	ite	ls
   b9b6a:	2001      	movls	r0, #1
   b9b6c:	2000      	movhi	r0, #0
   b9b6e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9b72:	bf00      	nop

000b9b74 <__aeabi_dcmpge>:
   b9b74:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9b78:	f7ff ffce 	bl	b9b18 <__aeabi_cdrcmple>
   b9b7c:	bf94      	ite	ls
   b9b7e:	2001      	movls	r0, #1
   b9b80:	2000      	movhi	r0, #0
   b9b82:	f85d fb08 	ldr.w	pc, [sp], #8
   b9b86:	bf00      	nop

000b9b88 <__aeabi_dcmpgt>:
   b9b88:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9b8c:	f7ff ffc4 	bl	b9b18 <__aeabi_cdrcmple>
   b9b90:	bf34      	ite	cc
   b9b92:	2001      	movcc	r0, #1
   b9b94:	2000      	movcs	r0, #0
   b9b96:	f85d fb08 	ldr.w	pc, [sp], #8
   b9b9a:	bf00      	nop

000b9b9c <__aeabi_dcmpun>:
   b9b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9ba4:	d102      	bne.n	b9bac <__aeabi_dcmpun+0x10>
   b9ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9baa:	d10a      	bne.n	b9bc2 <__aeabi_dcmpun+0x26>
   b9bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9bb4:	d102      	bne.n	b9bbc <__aeabi_dcmpun+0x20>
   b9bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9bba:	d102      	bne.n	b9bc2 <__aeabi_dcmpun+0x26>
   b9bbc:	f04f 0000 	mov.w	r0, #0
   b9bc0:	4770      	bx	lr
   b9bc2:	f04f 0001 	mov.w	r0, #1
   b9bc6:	4770      	bx	lr

000b9bc8 <__aeabi_d2iz>:
   b9bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b9bd0:	d215      	bcs.n	b9bfe <__aeabi_d2iz+0x36>
   b9bd2:	d511      	bpl.n	b9bf8 <__aeabi_d2iz+0x30>
   b9bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9bdc:	d912      	bls.n	b9c04 <__aeabi_d2iz+0x3c>
   b9bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9bee:	fa23 f002 	lsr.w	r0, r3, r2
   b9bf2:	bf18      	it	ne
   b9bf4:	4240      	negne	r0, r0
   b9bf6:	4770      	bx	lr
   b9bf8:	f04f 0000 	mov.w	r0, #0
   b9bfc:	4770      	bx	lr
   b9bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9c02:	d105      	bne.n	b9c10 <__aeabi_d2iz+0x48>
   b9c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b9c08:	bf08      	it	eq
   b9c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b9c0e:	4770      	bx	lr
   b9c10:	f04f 0000 	mov.w	r0, #0
   b9c14:	4770      	bx	lr
   b9c16:	bf00      	nop

000b9c18 <__aeabi_d2uiz>:
   b9c18:	004a      	lsls	r2, r1, #1
   b9c1a:	d211      	bcs.n	b9c40 <__aeabi_d2uiz+0x28>
   b9c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b9c20:	d211      	bcs.n	b9c46 <__aeabi_d2uiz+0x2e>
   b9c22:	d50d      	bpl.n	b9c40 <__aeabi_d2uiz+0x28>
   b9c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9c2c:	d40e      	bmi.n	b9c4c <__aeabi_d2uiz+0x34>
   b9c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9c3a:	fa23 f002 	lsr.w	r0, r3, r2
   b9c3e:	4770      	bx	lr
   b9c40:	f04f 0000 	mov.w	r0, #0
   b9c44:	4770      	bx	lr
   b9c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9c4a:	d102      	bne.n	b9c52 <__aeabi_d2uiz+0x3a>
   b9c4c:	f04f 30ff 	mov.w	r0, #4294967295
   b9c50:	4770      	bx	lr
   b9c52:	f04f 0000 	mov.w	r0, #0
   b9c56:	4770      	bx	lr

000b9c58 <__aeabi_d2f>:
   b9c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b9c60:	bf24      	itt	cs
   b9c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b9c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b9c6a:	d90d      	bls.n	b9c88 <__aeabi_d2f+0x30>
   b9c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b9c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b9c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b9c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b9c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b9c80:	bf08      	it	eq
   b9c82:	f020 0001 	biceq.w	r0, r0, #1
   b9c86:	4770      	bx	lr
   b9c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b9c8c:	d121      	bne.n	b9cd2 <__aeabi_d2f+0x7a>
   b9c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b9c92:	bfbc      	itt	lt
   b9c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b9c98:	4770      	bxlt	lr
   b9c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b9ca2:	f1c2 0218 	rsb	r2, r2, #24
   b9ca6:	f1c2 0c20 	rsb	ip, r2, #32
   b9caa:	fa10 f30c 	lsls.w	r3, r0, ip
   b9cae:	fa20 f002 	lsr.w	r0, r0, r2
   b9cb2:	bf18      	it	ne
   b9cb4:	f040 0001 	orrne.w	r0, r0, #1
   b9cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b9cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b9cc4:	ea40 000c 	orr.w	r0, r0, ip
   b9cc8:	fa23 f302 	lsr.w	r3, r3, r2
   b9ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b9cd0:	e7cc      	b.n	b9c6c <__aeabi_d2f+0x14>
   b9cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b9cd6:	d107      	bne.n	b9ce8 <__aeabi_d2f+0x90>
   b9cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b9cdc:	bf1e      	ittt	ne
   b9cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b9ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b9ce6:	4770      	bxne	lr
   b9ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b9cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b9cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9cf4:	4770      	bx	lr
   b9cf6:	bf00      	nop

000b9cf8 <__aeabi_frsub>:
   b9cf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b9cfc:	e002      	b.n	b9d04 <__addsf3>
   b9cfe:	bf00      	nop

000b9d00 <__aeabi_fsub>:
   b9d00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b9d04 <__addsf3>:
   b9d04:	0042      	lsls	r2, r0, #1
   b9d06:	bf1f      	itttt	ne
   b9d08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b9d0c:	ea92 0f03 	teqne	r2, r3
   b9d10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b9d14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b9d18:	d06a      	beq.n	b9df0 <__addsf3+0xec>
   b9d1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b9d1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b9d22:	bfc1      	itttt	gt
   b9d24:	18d2      	addgt	r2, r2, r3
   b9d26:	4041      	eorgt	r1, r0
   b9d28:	4048      	eorgt	r0, r1
   b9d2a:	4041      	eorgt	r1, r0
   b9d2c:	bfb8      	it	lt
   b9d2e:	425b      	neglt	r3, r3
   b9d30:	2b19      	cmp	r3, #25
   b9d32:	bf88      	it	hi
   b9d34:	4770      	bxhi	lr
   b9d36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b9d3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9d3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b9d42:	bf18      	it	ne
   b9d44:	4240      	negne	r0, r0
   b9d46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9d4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b9d4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b9d52:	bf18      	it	ne
   b9d54:	4249      	negne	r1, r1
   b9d56:	ea92 0f03 	teq	r2, r3
   b9d5a:	d03f      	beq.n	b9ddc <__addsf3+0xd8>
   b9d5c:	f1a2 0201 	sub.w	r2, r2, #1
   b9d60:	fa41 fc03 	asr.w	ip, r1, r3
   b9d64:	eb10 000c 	adds.w	r0, r0, ip
   b9d68:	f1c3 0320 	rsb	r3, r3, #32
   b9d6c:	fa01 f103 	lsl.w	r1, r1, r3
   b9d70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b9d74:	d502      	bpl.n	b9d7c <__addsf3+0x78>
   b9d76:	4249      	negs	r1, r1
   b9d78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b9d7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b9d80:	d313      	bcc.n	b9daa <__addsf3+0xa6>
   b9d82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b9d86:	d306      	bcc.n	b9d96 <__addsf3+0x92>
   b9d88:	0840      	lsrs	r0, r0, #1
   b9d8a:	ea4f 0131 	mov.w	r1, r1, rrx
   b9d8e:	f102 0201 	add.w	r2, r2, #1
   b9d92:	2afe      	cmp	r2, #254	; 0xfe
   b9d94:	d251      	bcs.n	b9e3a <__addsf3+0x136>
   b9d96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b9d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b9d9e:	bf08      	it	eq
   b9da0:	f020 0001 	biceq.w	r0, r0, #1
   b9da4:	ea40 0003 	orr.w	r0, r0, r3
   b9da8:	4770      	bx	lr
   b9daa:	0049      	lsls	r1, r1, #1
   b9dac:	eb40 0000 	adc.w	r0, r0, r0
   b9db0:	3a01      	subs	r2, #1
   b9db2:	bf28      	it	cs
   b9db4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b9db8:	d2ed      	bcs.n	b9d96 <__addsf3+0x92>
   b9dba:	fab0 fc80 	clz	ip, r0
   b9dbe:	f1ac 0c08 	sub.w	ip, ip, #8
   b9dc2:	ebb2 020c 	subs.w	r2, r2, ip
   b9dc6:	fa00 f00c 	lsl.w	r0, r0, ip
   b9dca:	bfaa      	itet	ge
   b9dcc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b9dd0:	4252      	neglt	r2, r2
   b9dd2:	4318      	orrge	r0, r3
   b9dd4:	bfbc      	itt	lt
   b9dd6:	40d0      	lsrlt	r0, r2
   b9dd8:	4318      	orrlt	r0, r3
   b9dda:	4770      	bx	lr
   b9ddc:	f092 0f00 	teq	r2, #0
   b9de0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b9de4:	bf06      	itte	eq
   b9de6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b9dea:	3201      	addeq	r2, #1
   b9dec:	3b01      	subne	r3, #1
   b9dee:	e7b5      	b.n	b9d5c <__addsf3+0x58>
   b9df0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b9df4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b9df8:	bf18      	it	ne
   b9dfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b9dfe:	d021      	beq.n	b9e44 <__addsf3+0x140>
   b9e00:	ea92 0f03 	teq	r2, r3
   b9e04:	d004      	beq.n	b9e10 <__addsf3+0x10c>
   b9e06:	f092 0f00 	teq	r2, #0
   b9e0a:	bf08      	it	eq
   b9e0c:	4608      	moveq	r0, r1
   b9e0e:	4770      	bx	lr
   b9e10:	ea90 0f01 	teq	r0, r1
   b9e14:	bf1c      	itt	ne
   b9e16:	2000      	movne	r0, #0
   b9e18:	4770      	bxne	lr
   b9e1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b9e1e:	d104      	bne.n	b9e2a <__addsf3+0x126>
   b9e20:	0040      	lsls	r0, r0, #1
   b9e22:	bf28      	it	cs
   b9e24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b9e28:	4770      	bx	lr
   b9e2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b9e2e:	bf3c      	itt	cc
   b9e30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b9e34:	4770      	bxcc	lr
   b9e36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b9e3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b9e3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9e42:	4770      	bx	lr
   b9e44:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b9e48:	bf16      	itet	ne
   b9e4a:	4608      	movne	r0, r1
   b9e4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b9e50:	4601      	movne	r1, r0
   b9e52:	0242      	lsls	r2, r0, #9
   b9e54:	bf06      	itte	eq
   b9e56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b9e5a:	ea90 0f01 	teqeq	r0, r1
   b9e5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b9e62:	4770      	bx	lr

000b9e64 <__aeabi_ui2f>:
   b9e64:	f04f 0300 	mov.w	r3, #0
   b9e68:	e004      	b.n	b9e74 <__aeabi_i2f+0x8>
   b9e6a:	bf00      	nop

000b9e6c <__aeabi_i2f>:
   b9e6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b9e70:	bf48      	it	mi
   b9e72:	4240      	negmi	r0, r0
   b9e74:	ea5f 0c00 	movs.w	ip, r0
   b9e78:	bf08      	it	eq
   b9e7a:	4770      	bxeq	lr
   b9e7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b9e80:	4601      	mov	r1, r0
   b9e82:	f04f 0000 	mov.w	r0, #0
   b9e86:	e01c      	b.n	b9ec2 <__aeabi_l2f+0x2a>

000b9e88 <__aeabi_ul2f>:
   b9e88:	ea50 0201 	orrs.w	r2, r0, r1
   b9e8c:	bf08      	it	eq
   b9e8e:	4770      	bxeq	lr
   b9e90:	f04f 0300 	mov.w	r3, #0
   b9e94:	e00a      	b.n	b9eac <__aeabi_l2f+0x14>
   b9e96:	bf00      	nop

000b9e98 <__aeabi_l2f>:
   b9e98:	ea50 0201 	orrs.w	r2, r0, r1
   b9e9c:	bf08      	it	eq
   b9e9e:	4770      	bxeq	lr
   b9ea0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b9ea4:	d502      	bpl.n	b9eac <__aeabi_l2f+0x14>
   b9ea6:	4240      	negs	r0, r0
   b9ea8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9eac:	ea5f 0c01 	movs.w	ip, r1
   b9eb0:	bf02      	ittt	eq
   b9eb2:	4684      	moveq	ip, r0
   b9eb4:	4601      	moveq	r1, r0
   b9eb6:	2000      	moveq	r0, #0
   b9eb8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b9ebc:	bf08      	it	eq
   b9ebe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b9ec2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b9ec6:	fabc f28c 	clz	r2, ip
   b9eca:	3a08      	subs	r2, #8
   b9ecc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b9ed0:	db10      	blt.n	b9ef4 <__aeabi_l2f+0x5c>
   b9ed2:	fa01 fc02 	lsl.w	ip, r1, r2
   b9ed6:	4463      	add	r3, ip
   b9ed8:	fa00 fc02 	lsl.w	ip, r0, r2
   b9edc:	f1c2 0220 	rsb	r2, r2, #32
   b9ee0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9ee4:	fa20 f202 	lsr.w	r2, r0, r2
   b9ee8:	eb43 0002 	adc.w	r0, r3, r2
   b9eec:	bf08      	it	eq
   b9eee:	f020 0001 	biceq.w	r0, r0, #1
   b9ef2:	4770      	bx	lr
   b9ef4:	f102 0220 	add.w	r2, r2, #32
   b9ef8:	fa01 fc02 	lsl.w	ip, r1, r2
   b9efc:	f1c2 0220 	rsb	r2, r2, #32
   b9f00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b9f04:	fa21 f202 	lsr.w	r2, r1, r2
   b9f08:	eb43 0002 	adc.w	r0, r3, r2
   b9f0c:	bf08      	it	eq
   b9f0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b9f12:	4770      	bx	lr

000b9f14 <__aeabi_ldivmod>:
   b9f14:	b97b      	cbnz	r3, b9f36 <__aeabi_ldivmod+0x22>
   b9f16:	b972      	cbnz	r2, b9f36 <__aeabi_ldivmod+0x22>
   b9f18:	2900      	cmp	r1, #0
   b9f1a:	bfbe      	ittt	lt
   b9f1c:	2000      	movlt	r0, #0
   b9f1e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b9f22:	e006      	blt.n	b9f32 <__aeabi_ldivmod+0x1e>
   b9f24:	bf08      	it	eq
   b9f26:	2800      	cmpeq	r0, #0
   b9f28:	bf1c      	itt	ne
   b9f2a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b9f2e:	f04f 30ff 	movne.w	r0, #4294967295
   b9f32:	f000 b9f9 	b.w	ba328 <__aeabi_idiv0>
   b9f36:	f1ad 0c08 	sub.w	ip, sp, #8
   b9f3a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b9f3e:	2900      	cmp	r1, #0
   b9f40:	db09      	blt.n	b9f56 <__aeabi_ldivmod+0x42>
   b9f42:	2b00      	cmp	r3, #0
   b9f44:	db1a      	blt.n	b9f7c <__aeabi_ldivmod+0x68>
   b9f46:	f000 f887 	bl	ba058 <__udivmoddi4>
   b9f4a:	f8dd e004 	ldr.w	lr, [sp, #4]
   b9f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9f52:	b004      	add	sp, #16
   b9f54:	4770      	bx	lr
   b9f56:	4240      	negs	r0, r0
   b9f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9f5c:	2b00      	cmp	r3, #0
   b9f5e:	db1b      	blt.n	b9f98 <__aeabi_ldivmod+0x84>
   b9f60:	f000 f87a 	bl	ba058 <__udivmoddi4>
   b9f64:	f8dd e004 	ldr.w	lr, [sp, #4]
   b9f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9f6c:	b004      	add	sp, #16
   b9f6e:	4240      	negs	r0, r0
   b9f70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9f74:	4252      	negs	r2, r2
   b9f76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9f7a:	4770      	bx	lr
   b9f7c:	4252      	negs	r2, r2
   b9f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9f82:	f000 f869 	bl	ba058 <__udivmoddi4>
   b9f86:	f8dd e004 	ldr.w	lr, [sp, #4]
   b9f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9f8e:	b004      	add	sp, #16
   b9f90:	4240      	negs	r0, r0
   b9f92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9f96:	4770      	bx	lr
   b9f98:	4252      	negs	r2, r2
   b9f9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9f9e:	f000 f85b 	bl	ba058 <__udivmoddi4>
   b9fa2:	f8dd e004 	ldr.w	lr, [sp, #4]
   b9fa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9faa:	b004      	add	sp, #16
   b9fac:	4252      	negs	r2, r2
   b9fae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9fb2:	4770      	bx	lr

000b9fb4 <__aeabi_f2lz>:
   b9fb4:	ee07 0a90 	vmov	s15, r0
   b9fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b9fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9fc0:	d401      	bmi.n	b9fc6 <__aeabi_f2lz+0x12>
   b9fc2:	f000 b80b 	b.w	b9fdc <__aeabi_f2ulz>
   b9fc6:	eef1 7a67 	vneg.f32	s15, s15
   b9fca:	b508      	push	{r3, lr}
   b9fcc:	ee17 0a90 	vmov	r0, s15
   b9fd0:	f000 f804 	bl	b9fdc <__aeabi_f2ulz>
   b9fd4:	4240      	negs	r0, r0
   b9fd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9fda:	bd08      	pop	{r3, pc}

000b9fdc <__aeabi_f2ulz>:
   b9fdc:	b5d0      	push	{r4, r6, r7, lr}
   b9fde:	f7ff faeb 	bl	b95b8 <__aeabi_f2d>
   b9fe2:	4b0c      	ldr	r3, [pc, #48]	; (ba014 <__aeabi_f2ulz+0x38>)
   b9fe4:	2200      	movs	r2, #0
   b9fe6:	4606      	mov	r6, r0
   b9fe8:	460f      	mov	r7, r1
   b9fea:	f7ff fb3d 	bl	b9668 <__aeabi_dmul>
   b9fee:	f7ff fe13 	bl	b9c18 <__aeabi_d2uiz>
   b9ff2:	4604      	mov	r4, r0
   b9ff4:	f7ff fabe 	bl	b9574 <__aeabi_ui2d>
   b9ff8:	4b07      	ldr	r3, [pc, #28]	; (ba018 <__aeabi_f2ulz+0x3c>)
   b9ffa:	2200      	movs	r2, #0
   b9ffc:	f7ff fb34 	bl	b9668 <__aeabi_dmul>
   ba000:	4602      	mov	r2, r0
   ba002:	460b      	mov	r3, r1
   ba004:	4630      	mov	r0, r6
   ba006:	4639      	mov	r1, r7
   ba008:	f7ff f976 	bl	b92f8 <__aeabi_dsub>
   ba00c:	f7ff fe04 	bl	b9c18 <__aeabi_d2uiz>
   ba010:	4621      	mov	r1, r4
   ba012:	bdd0      	pop	{r4, r6, r7, pc}
   ba014:	3df00000 	.word	0x3df00000
   ba018:	41f00000 	.word	0x41f00000

000ba01c <__aeabi_d2ulz>:
   ba01c:	b5d0      	push	{r4, r6, r7, lr}
   ba01e:	4b0c      	ldr	r3, [pc, #48]	; (ba050 <__aeabi_d2ulz+0x34>)
   ba020:	2200      	movs	r2, #0
   ba022:	4606      	mov	r6, r0
   ba024:	460f      	mov	r7, r1
   ba026:	f7ff fb1f 	bl	b9668 <__aeabi_dmul>
   ba02a:	f7ff fdf5 	bl	b9c18 <__aeabi_d2uiz>
   ba02e:	4604      	mov	r4, r0
   ba030:	f7ff faa0 	bl	b9574 <__aeabi_ui2d>
   ba034:	4b07      	ldr	r3, [pc, #28]	; (ba054 <__aeabi_d2ulz+0x38>)
   ba036:	2200      	movs	r2, #0
   ba038:	f7ff fb16 	bl	b9668 <__aeabi_dmul>
   ba03c:	4602      	mov	r2, r0
   ba03e:	460b      	mov	r3, r1
   ba040:	4630      	mov	r0, r6
   ba042:	4639      	mov	r1, r7
   ba044:	f7ff f958 	bl	b92f8 <__aeabi_dsub>
   ba048:	f7ff fde6 	bl	b9c18 <__aeabi_d2uiz>
   ba04c:	4621      	mov	r1, r4
   ba04e:	bdd0      	pop	{r4, r6, r7, pc}
   ba050:	3df00000 	.word	0x3df00000
   ba054:	41f00000 	.word	0x41f00000

000ba058 <__udivmoddi4>:
   ba058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba05c:	9d08      	ldr	r5, [sp, #32]
   ba05e:	4604      	mov	r4, r0
   ba060:	468e      	mov	lr, r1
   ba062:	2b00      	cmp	r3, #0
   ba064:	d14d      	bne.n	ba102 <__udivmoddi4+0xaa>
   ba066:	428a      	cmp	r2, r1
   ba068:	4694      	mov	ip, r2
   ba06a:	d969      	bls.n	ba140 <__udivmoddi4+0xe8>
   ba06c:	fab2 f282 	clz	r2, r2
   ba070:	b152      	cbz	r2, ba088 <__udivmoddi4+0x30>
   ba072:	fa01 f302 	lsl.w	r3, r1, r2
   ba076:	f1c2 0120 	rsb	r1, r2, #32
   ba07a:	fa20 f101 	lsr.w	r1, r0, r1
   ba07e:	fa0c fc02 	lsl.w	ip, ip, r2
   ba082:	ea41 0e03 	orr.w	lr, r1, r3
   ba086:	4094      	lsls	r4, r2
   ba088:	ea4f 481c 	mov.w	r8, ip, lsr #16
   ba08c:	0c21      	lsrs	r1, r4, #16
   ba08e:	fbbe f6f8 	udiv	r6, lr, r8
   ba092:	fa1f f78c 	uxth.w	r7, ip
   ba096:	fb08 e316 	mls	r3, r8, r6, lr
   ba09a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   ba09e:	fb06 f107 	mul.w	r1, r6, r7
   ba0a2:	4299      	cmp	r1, r3
   ba0a4:	d90a      	bls.n	ba0bc <__udivmoddi4+0x64>
   ba0a6:	eb1c 0303 	adds.w	r3, ip, r3
   ba0aa:	f106 30ff 	add.w	r0, r6, #4294967295
   ba0ae:	f080 811f 	bcs.w	ba2f0 <__udivmoddi4+0x298>
   ba0b2:	4299      	cmp	r1, r3
   ba0b4:	f240 811c 	bls.w	ba2f0 <__udivmoddi4+0x298>
   ba0b8:	3e02      	subs	r6, #2
   ba0ba:	4463      	add	r3, ip
   ba0bc:	1a5b      	subs	r3, r3, r1
   ba0be:	b2a4      	uxth	r4, r4
   ba0c0:	fbb3 f0f8 	udiv	r0, r3, r8
   ba0c4:	fb08 3310 	mls	r3, r8, r0, r3
   ba0c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   ba0cc:	fb00 f707 	mul.w	r7, r0, r7
   ba0d0:	42a7      	cmp	r7, r4
   ba0d2:	d90a      	bls.n	ba0ea <__udivmoddi4+0x92>
   ba0d4:	eb1c 0404 	adds.w	r4, ip, r4
   ba0d8:	f100 33ff 	add.w	r3, r0, #4294967295
   ba0dc:	f080 810a 	bcs.w	ba2f4 <__udivmoddi4+0x29c>
   ba0e0:	42a7      	cmp	r7, r4
   ba0e2:	f240 8107 	bls.w	ba2f4 <__udivmoddi4+0x29c>
   ba0e6:	4464      	add	r4, ip
   ba0e8:	3802      	subs	r0, #2
   ba0ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   ba0ee:	1be4      	subs	r4, r4, r7
   ba0f0:	2600      	movs	r6, #0
   ba0f2:	b11d      	cbz	r5, ba0fc <__udivmoddi4+0xa4>
   ba0f4:	40d4      	lsrs	r4, r2
   ba0f6:	2300      	movs	r3, #0
   ba0f8:	e9c5 4300 	strd	r4, r3, [r5]
   ba0fc:	4631      	mov	r1, r6
   ba0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba102:	428b      	cmp	r3, r1
   ba104:	d909      	bls.n	ba11a <__udivmoddi4+0xc2>
   ba106:	2d00      	cmp	r5, #0
   ba108:	f000 80ef 	beq.w	ba2ea <__udivmoddi4+0x292>
   ba10c:	2600      	movs	r6, #0
   ba10e:	e9c5 0100 	strd	r0, r1, [r5]
   ba112:	4630      	mov	r0, r6
   ba114:	4631      	mov	r1, r6
   ba116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba11a:	fab3 f683 	clz	r6, r3
   ba11e:	2e00      	cmp	r6, #0
   ba120:	d14a      	bne.n	ba1b8 <__udivmoddi4+0x160>
   ba122:	428b      	cmp	r3, r1
   ba124:	d302      	bcc.n	ba12c <__udivmoddi4+0xd4>
   ba126:	4282      	cmp	r2, r0
   ba128:	f200 80f9 	bhi.w	ba31e <__udivmoddi4+0x2c6>
   ba12c:	1a84      	subs	r4, r0, r2
   ba12e:	eb61 0303 	sbc.w	r3, r1, r3
   ba132:	2001      	movs	r0, #1
   ba134:	469e      	mov	lr, r3
   ba136:	2d00      	cmp	r5, #0
   ba138:	d0e0      	beq.n	ba0fc <__udivmoddi4+0xa4>
   ba13a:	e9c5 4e00 	strd	r4, lr, [r5]
   ba13e:	e7dd      	b.n	ba0fc <__udivmoddi4+0xa4>
   ba140:	b902      	cbnz	r2, ba144 <__udivmoddi4+0xec>
   ba142:	deff      	udf	#255	; 0xff
   ba144:	fab2 f282 	clz	r2, r2
   ba148:	2a00      	cmp	r2, #0
   ba14a:	f040 8092 	bne.w	ba272 <__udivmoddi4+0x21a>
   ba14e:	eba1 010c 	sub.w	r1, r1, ip
   ba152:	ea4f 471c 	mov.w	r7, ip, lsr #16
   ba156:	fa1f fe8c 	uxth.w	lr, ip
   ba15a:	2601      	movs	r6, #1
   ba15c:	0c20      	lsrs	r0, r4, #16
   ba15e:	fbb1 f3f7 	udiv	r3, r1, r7
   ba162:	fb07 1113 	mls	r1, r7, r3, r1
   ba166:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   ba16a:	fb0e f003 	mul.w	r0, lr, r3
   ba16e:	4288      	cmp	r0, r1
   ba170:	d908      	bls.n	ba184 <__udivmoddi4+0x12c>
   ba172:	eb1c 0101 	adds.w	r1, ip, r1
   ba176:	f103 38ff 	add.w	r8, r3, #4294967295
   ba17a:	d202      	bcs.n	ba182 <__udivmoddi4+0x12a>
   ba17c:	4288      	cmp	r0, r1
   ba17e:	f200 80cb 	bhi.w	ba318 <__udivmoddi4+0x2c0>
   ba182:	4643      	mov	r3, r8
   ba184:	1a09      	subs	r1, r1, r0
   ba186:	b2a4      	uxth	r4, r4
   ba188:	fbb1 f0f7 	udiv	r0, r1, r7
   ba18c:	fb07 1110 	mls	r1, r7, r0, r1
   ba190:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   ba194:	fb0e fe00 	mul.w	lr, lr, r0
   ba198:	45a6      	cmp	lr, r4
   ba19a:	d908      	bls.n	ba1ae <__udivmoddi4+0x156>
   ba19c:	eb1c 0404 	adds.w	r4, ip, r4
   ba1a0:	f100 31ff 	add.w	r1, r0, #4294967295
   ba1a4:	d202      	bcs.n	ba1ac <__udivmoddi4+0x154>
   ba1a6:	45a6      	cmp	lr, r4
   ba1a8:	f200 80bb 	bhi.w	ba322 <__udivmoddi4+0x2ca>
   ba1ac:	4608      	mov	r0, r1
   ba1ae:	eba4 040e 	sub.w	r4, r4, lr
   ba1b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   ba1b6:	e79c      	b.n	ba0f2 <__udivmoddi4+0x9a>
   ba1b8:	f1c6 0720 	rsb	r7, r6, #32
   ba1bc:	40b3      	lsls	r3, r6
   ba1be:	fa22 fc07 	lsr.w	ip, r2, r7
   ba1c2:	ea4c 0c03 	orr.w	ip, ip, r3
   ba1c6:	fa20 f407 	lsr.w	r4, r0, r7
   ba1ca:	fa01 f306 	lsl.w	r3, r1, r6
   ba1ce:	431c      	orrs	r4, r3
   ba1d0:	40f9      	lsrs	r1, r7
   ba1d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   ba1d6:	fa00 f306 	lsl.w	r3, r0, r6
   ba1da:	fbb1 f8f9 	udiv	r8, r1, r9
   ba1de:	0c20      	lsrs	r0, r4, #16
   ba1e0:	fa1f fe8c 	uxth.w	lr, ip
   ba1e4:	fb09 1118 	mls	r1, r9, r8, r1
   ba1e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   ba1ec:	fb08 f00e 	mul.w	r0, r8, lr
   ba1f0:	4288      	cmp	r0, r1
   ba1f2:	fa02 f206 	lsl.w	r2, r2, r6
   ba1f6:	d90b      	bls.n	ba210 <__udivmoddi4+0x1b8>
   ba1f8:	eb1c 0101 	adds.w	r1, ip, r1
   ba1fc:	f108 3aff 	add.w	sl, r8, #4294967295
   ba200:	f080 8088 	bcs.w	ba314 <__udivmoddi4+0x2bc>
   ba204:	4288      	cmp	r0, r1
   ba206:	f240 8085 	bls.w	ba314 <__udivmoddi4+0x2bc>
   ba20a:	f1a8 0802 	sub.w	r8, r8, #2
   ba20e:	4461      	add	r1, ip
   ba210:	1a09      	subs	r1, r1, r0
   ba212:	b2a4      	uxth	r4, r4
   ba214:	fbb1 f0f9 	udiv	r0, r1, r9
   ba218:	fb09 1110 	mls	r1, r9, r0, r1
   ba21c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   ba220:	fb00 fe0e 	mul.w	lr, r0, lr
   ba224:	458e      	cmp	lr, r1
   ba226:	d908      	bls.n	ba23a <__udivmoddi4+0x1e2>
   ba228:	eb1c 0101 	adds.w	r1, ip, r1
   ba22c:	f100 34ff 	add.w	r4, r0, #4294967295
   ba230:	d26c      	bcs.n	ba30c <__udivmoddi4+0x2b4>
   ba232:	458e      	cmp	lr, r1
   ba234:	d96a      	bls.n	ba30c <__udivmoddi4+0x2b4>
   ba236:	3802      	subs	r0, #2
   ba238:	4461      	add	r1, ip
   ba23a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   ba23e:	fba0 9402 	umull	r9, r4, r0, r2
   ba242:	eba1 010e 	sub.w	r1, r1, lr
   ba246:	42a1      	cmp	r1, r4
   ba248:	46c8      	mov	r8, r9
   ba24a:	46a6      	mov	lr, r4
   ba24c:	d356      	bcc.n	ba2fc <__udivmoddi4+0x2a4>
   ba24e:	d053      	beq.n	ba2f8 <__udivmoddi4+0x2a0>
   ba250:	b15d      	cbz	r5, ba26a <__udivmoddi4+0x212>
   ba252:	ebb3 0208 	subs.w	r2, r3, r8
   ba256:	eb61 010e 	sbc.w	r1, r1, lr
   ba25a:	fa01 f707 	lsl.w	r7, r1, r7
   ba25e:	fa22 f306 	lsr.w	r3, r2, r6
   ba262:	40f1      	lsrs	r1, r6
   ba264:	431f      	orrs	r7, r3
   ba266:	e9c5 7100 	strd	r7, r1, [r5]
   ba26a:	2600      	movs	r6, #0
   ba26c:	4631      	mov	r1, r6
   ba26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba272:	f1c2 0320 	rsb	r3, r2, #32
   ba276:	40d8      	lsrs	r0, r3
   ba278:	fa0c fc02 	lsl.w	ip, ip, r2
   ba27c:	fa21 f303 	lsr.w	r3, r1, r3
   ba280:	4091      	lsls	r1, r2
   ba282:	4301      	orrs	r1, r0
   ba284:	ea4f 471c 	mov.w	r7, ip, lsr #16
   ba288:	fa1f fe8c 	uxth.w	lr, ip
   ba28c:	fbb3 f0f7 	udiv	r0, r3, r7
   ba290:	fb07 3610 	mls	r6, r7, r0, r3
   ba294:	0c0b      	lsrs	r3, r1, #16
   ba296:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   ba29a:	fb00 f60e 	mul.w	r6, r0, lr
   ba29e:	429e      	cmp	r6, r3
   ba2a0:	fa04 f402 	lsl.w	r4, r4, r2
   ba2a4:	d908      	bls.n	ba2b8 <__udivmoddi4+0x260>
   ba2a6:	eb1c 0303 	adds.w	r3, ip, r3
   ba2aa:	f100 38ff 	add.w	r8, r0, #4294967295
   ba2ae:	d22f      	bcs.n	ba310 <__udivmoddi4+0x2b8>
   ba2b0:	429e      	cmp	r6, r3
   ba2b2:	d92d      	bls.n	ba310 <__udivmoddi4+0x2b8>
   ba2b4:	3802      	subs	r0, #2
   ba2b6:	4463      	add	r3, ip
   ba2b8:	1b9b      	subs	r3, r3, r6
   ba2ba:	b289      	uxth	r1, r1
   ba2bc:	fbb3 f6f7 	udiv	r6, r3, r7
   ba2c0:	fb07 3316 	mls	r3, r7, r6, r3
   ba2c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   ba2c8:	fb06 f30e 	mul.w	r3, r6, lr
   ba2cc:	428b      	cmp	r3, r1
   ba2ce:	d908      	bls.n	ba2e2 <__udivmoddi4+0x28a>
   ba2d0:	eb1c 0101 	adds.w	r1, ip, r1
   ba2d4:	f106 38ff 	add.w	r8, r6, #4294967295
   ba2d8:	d216      	bcs.n	ba308 <__udivmoddi4+0x2b0>
   ba2da:	428b      	cmp	r3, r1
   ba2dc:	d914      	bls.n	ba308 <__udivmoddi4+0x2b0>
   ba2de:	3e02      	subs	r6, #2
   ba2e0:	4461      	add	r1, ip
   ba2e2:	1ac9      	subs	r1, r1, r3
   ba2e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   ba2e8:	e738      	b.n	ba15c <__udivmoddi4+0x104>
   ba2ea:	462e      	mov	r6, r5
   ba2ec:	4628      	mov	r0, r5
   ba2ee:	e705      	b.n	ba0fc <__udivmoddi4+0xa4>
   ba2f0:	4606      	mov	r6, r0
   ba2f2:	e6e3      	b.n	ba0bc <__udivmoddi4+0x64>
   ba2f4:	4618      	mov	r0, r3
   ba2f6:	e6f8      	b.n	ba0ea <__udivmoddi4+0x92>
   ba2f8:	454b      	cmp	r3, r9
   ba2fa:	d2a9      	bcs.n	ba250 <__udivmoddi4+0x1f8>
   ba2fc:	ebb9 0802 	subs.w	r8, r9, r2
   ba300:	eb64 0e0c 	sbc.w	lr, r4, ip
   ba304:	3801      	subs	r0, #1
   ba306:	e7a3      	b.n	ba250 <__udivmoddi4+0x1f8>
   ba308:	4646      	mov	r6, r8
   ba30a:	e7ea      	b.n	ba2e2 <__udivmoddi4+0x28a>
   ba30c:	4620      	mov	r0, r4
   ba30e:	e794      	b.n	ba23a <__udivmoddi4+0x1e2>
   ba310:	4640      	mov	r0, r8
   ba312:	e7d1      	b.n	ba2b8 <__udivmoddi4+0x260>
   ba314:	46d0      	mov	r8, sl
   ba316:	e77b      	b.n	ba210 <__udivmoddi4+0x1b8>
   ba318:	3b02      	subs	r3, #2
   ba31a:	4461      	add	r1, ip
   ba31c:	e732      	b.n	ba184 <__udivmoddi4+0x12c>
   ba31e:	4630      	mov	r0, r6
   ba320:	e709      	b.n	ba136 <__udivmoddi4+0xde>
   ba322:	4464      	add	r4, ip
   ba324:	3802      	subs	r0, #2
   ba326:	e742      	b.n	ba1ae <__udivmoddi4+0x156>

000ba328 <__aeabi_idiv0>:
   ba328:	4770      	bx	lr
   ba32a:	bf00      	nop

000ba32c <asctime_r>:
   ba32c:	b510      	push	{r4, lr}
   ba32e:	460c      	mov	r4, r1
   ba330:	6941      	ldr	r1, [r0, #20]
   ba332:	6903      	ldr	r3, [r0, #16]
   ba334:	6982      	ldr	r2, [r0, #24]
   ba336:	b086      	sub	sp, #24
   ba338:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   ba33c:	9104      	str	r1, [sp, #16]
   ba33e:	6801      	ldr	r1, [r0, #0]
   ba340:	9103      	str	r1, [sp, #12]
   ba342:	6841      	ldr	r1, [r0, #4]
   ba344:	9102      	str	r1, [sp, #8]
   ba346:	6881      	ldr	r1, [r0, #8]
   ba348:	9101      	str	r1, [sp, #4]
   ba34a:	68c1      	ldr	r1, [r0, #12]
   ba34c:	9100      	str	r1, [sp, #0]
   ba34e:	4907      	ldr	r1, [pc, #28]	; (ba36c <asctime_r+0x40>)
   ba350:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   ba354:	440b      	add	r3, r1
   ba356:	4906      	ldr	r1, [pc, #24]	; (ba370 <asctime_r+0x44>)
   ba358:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   ba35c:	440a      	add	r2, r1
   ba35e:	4620      	mov	r0, r4
   ba360:	4904      	ldr	r1, [pc, #16]	; (ba374 <asctime_r+0x48>)
   ba362:	f7fd f9f3 	bl	b774c <siprintf>
   ba366:	4620      	mov	r0, r4
   ba368:	b006      	add	sp, #24
   ba36a:	bd10      	pop	{r4, pc}
   ba36c:	000bd24a 	.word	0x000bd24a
   ba370:	000bd235 	.word	0x000bd235
   ba374:	000bd215 	.word	0x000bd215

000ba378 <atof>:
   ba378:	2100      	movs	r1, #0
   ba37a:	f000 bf47 	b.w	bb20c <strtod>
	...

000ba380 <__cxa_atexit>:
   ba380:	b510      	push	{r4, lr}
   ba382:	4c05      	ldr	r4, [pc, #20]	; (ba398 <__cxa_atexit+0x18>)
   ba384:	4613      	mov	r3, r2
   ba386:	b12c      	cbz	r4, ba394 <__cxa_atexit+0x14>
   ba388:	460a      	mov	r2, r1
   ba38a:	4601      	mov	r1, r0
   ba38c:	2002      	movs	r0, #2
   ba38e:	f3af 8000 	nop.w
   ba392:	bd10      	pop	{r4, pc}
   ba394:	4620      	mov	r0, r4
   ba396:	e7fc      	b.n	ba392 <__cxa_atexit+0x12>
   ba398:	00000000 	.word	0x00000000

000ba39c <ldiv>:
   ba39c:	2900      	cmp	r1, #0
   ba39e:	b510      	push	{r4, lr}
   ba3a0:	fb91 f4f2 	sdiv	r4, r1, r2
   ba3a4:	fb02 1314 	mls	r3, r2, r4, r1
   ba3a8:	db06      	blt.n	ba3b8 <ldiv+0x1c>
   ba3aa:	2b00      	cmp	r3, #0
   ba3ac:	da01      	bge.n	ba3b2 <ldiv+0x16>
   ba3ae:	3401      	adds	r4, #1
   ba3b0:	1a9b      	subs	r3, r3, r2
   ba3b2:	e9c0 4300 	strd	r4, r3, [r0]
   ba3b6:	bd10      	pop	{r4, pc}
   ba3b8:	2b00      	cmp	r3, #0
   ba3ba:	bfc4      	itt	gt
   ba3bc:	f104 34ff 	addgt.w	r4, r4, #4294967295
   ba3c0:	189b      	addgt	r3, r3, r2
   ba3c2:	e7f6      	b.n	ba3b2 <ldiv+0x16>

000ba3c4 <memcpy>:
   ba3c4:	440a      	add	r2, r1
   ba3c6:	4291      	cmp	r1, r2
   ba3c8:	f100 33ff 	add.w	r3, r0, #4294967295
   ba3cc:	d100      	bne.n	ba3d0 <memcpy+0xc>
   ba3ce:	4770      	bx	lr
   ba3d0:	b510      	push	{r4, lr}
   ba3d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba3d6:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba3da:	4291      	cmp	r1, r2
   ba3dc:	d1f9      	bne.n	ba3d2 <memcpy+0xe>
   ba3de:	bd10      	pop	{r4, pc}

000ba3e0 <memmove>:
   ba3e0:	4288      	cmp	r0, r1
   ba3e2:	b510      	push	{r4, lr}
   ba3e4:	eb01 0402 	add.w	r4, r1, r2
   ba3e8:	d902      	bls.n	ba3f0 <memmove+0x10>
   ba3ea:	4284      	cmp	r4, r0
   ba3ec:	4623      	mov	r3, r4
   ba3ee:	d807      	bhi.n	ba400 <memmove+0x20>
   ba3f0:	1e43      	subs	r3, r0, #1
   ba3f2:	42a1      	cmp	r1, r4
   ba3f4:	d008      	beq.n	ba408 <memmove+0x28>
   ba3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba3fa:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba3fe:	e7f8      	b.n	ba3f2 <memmove+0x12>
   ba400:	4402      	add	r2, r0
   ba402:	4601      	mov	r1, r0
   ba404:	428a      	cmp	r2, r1
   ba406:	d100      	bne.n	ba40a <memmove+0x2a>
   ba408:	bd10      	pop	{r4, pc}
   ba40a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   ba40e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   ba412:	e7f7      	b.n	ba404 <memmove+0x24>

000ba414 <memset>:
   ba414:	4402      	add	r2, r0
   ba416:	4603      	mov	r3, r0
   ba418:	4293      	cmp	r3, r2
   ba41a:	d100      	bne.n	ba41e <memset+0xa>
   ba41c:	4770      	bx	lr
   ba41e:	f803 1b01 	strb.w	r1, [r3], #1
   ba422:	e7f9      	b.n	ba418 <memset+0x4>

000ba424 <srand>:
   ba424:	b538      	push	{r3, r4, r5, lr}
   ba426:	4b10      	ldr	r3, [pc, #64]	; (ba468 <srand+0x44>)
   ba428:	681d      	ldr	r5, [r3, #0]
   ba42a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba42c:	4604      	mov	r4, r0
   ba42e:	b9b3      	cbnz	r3, ba45e <srand+0x3a>
   ba430:	2018      	movs	r0, #24
   ba432:	f7fd f96b 	bl	b770c <malloc>
   ba436:	4602      	mov	r2, r0
   ba438:	63a8      	str	r0, [r5, #56]	; 0x38
   ba43a:	b920      	cbnz	r0, ba446 <srand+0x22>
   ba43c:	4b0b      	ldr	r3, [pc, #44]	; (ba46c <srand+0x48>)
   ba43e:	480c      	ldr	r0, [pc, #48]	; (ba470 <srand+0x4c>)
   ba440:	2142      	movs	r1, #66	; 0x42
   ba442:	f7fd f9a3 	bl	b778c <__assert_func>
   ba446:	490b      	ldr	r1, [pc, #44]	; (ba474 <srand+0x50>)
   ba448:	4b0b      	ldr	r3, [pc, #44]	; (ba478 <srand+0x54>)
   ba44a:	e9c0 1300 	strd	r1, r3, [r0]
   ba44e:	4b0b      	ldr	r3, [pc, #44]	; (ba47c <srand+0x58>)
   ba450:	6083      	str	r3, [r0, #8]
   ba452:	230b      	movs	r3, #11
   ba454:	8183      	strh	r3, [r0, #12]
   ba456:	2100      	movs	r1, #0
   ba458:	2001      	movs	r0, #1
   ba45a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba45e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba460:	2200      	movs	r2, #0
   ba462:	611c      	str	r4, [r3, #16]
   ba464:	615a      	str	r2, [r3, #20]
   ba466:	bd38      	pop	{r3, r4, r5, pc}
   ba468:	2003e030 	.word	0x2003e030
   ba46c:	000bd26e 	.word	0x000bd26e
   ba470:	000bd285 	.word	0x000bd285
   ba474:	abcd330e 	.word	0xabcd330e
   ba478:	e66d1234 	.word	0xe66d1234
   ba47c:	0005deec 	.word	0x0005deec

000ba480 <rand>:
   ba480:	4b16      	ldr	r3, [pc, #88]	; (ba4dc <rand+0x5c>)
   ba482:	b510      	push	{r4, lr}
   ba484:	681c      	ldr	r4, [r3, #0]
   ba486:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba488:	b9b3      	cbnz	r3, ba4b8 <rand+0x38>
   ba48a:	2018      	movs	r0, #24
   ba48c:	f7fd f93e 	bl	b770c <malloc>
   ba490:	63a0      	str	r0, [r4, #56]	; 0x38
   ba492:	b928      	cbnz	r0, ba4a0 <rand+0x20>
   ba494:	4602      	mov	r2, r0
   ba496:	4b12      	ldr	r3, [pc, #72]	; (ba4e0 <rand+0x60>)
   ba498:	4812      	ldr	r0, [pc, #72]	; (ba4e4 <rand+0x64>)
   ba49a:	214e      	movs	r1, #78	; 0x4e
   ba49c:	f7fd f976 	bl	b778c <__assert_func>
   ba4a0:	4a11      	ldr	r2, [pc, #68]	; (ba4e8 <rand+0x68>)
   ba4a2:	4b12      	ldr	r3, [pc, #72]	; (ba4ec <rand+0x6c>)
   ba4a4:	e9c0 2300 	strd	r2, r3, [r0]
   ba4a8:	4b11      	ldr	r3, [pc, #68]	; (ba4f0 <rand+0x70>)
   ba4aa:	6083      	str	r3, [r0, #8]
   ba4ac:	230b      	movs	r3, #11
   ba4ae:	8183      	strh	r3, [r0, #12]
   ba4b0:	2201      	movs	r2, #1
   ba4b2:	2300      	movs	r3, #0
   ba4b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   ba4b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   ba4ba:	4a0e      	ldr	r2, [pc, #56]	; (ba4f4 <rand+0x74>)
   ba4bc:	6920      	ldr	r0, [r4, #16]
   ba4be:	6963      	ldr	r3, [r4, #20]
   ba4c0:	490d      	ldr	r1, [pc, #52]	; (ba4f8 <rand+0x78>)
   ba4c2:	4342      	muls	r2, r0
   ba4c4:	fb01 2203 	mla	r2, r1, r3, r2
   ba4c8:	fba0 0101 	umull	r0, r1, r0, r1
   ba4cc:	1c43      	adds	r3, r0, #1
   ba4ce:	eb42 0001 	adc.w	r0, r2, r1
   ba4d2:	e9c4 3004 	strd	r3, r0, [r4, #16]
   ba4d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   ba4da:	bd10      	pop	{r4, pc}
   ba4dc:	2003e030 	.word	0x2003e030
   ba4e0:	000bd26e 	.word	0x000bd26e
   ba4e4:	000bd285 	.word	0x000bd285
   ba4e8:	abcd330e 	.word	0xabcd330e
   ba4ec:	e66d1234 	.word	0xe66d1234
   ba4f0:	0005deec 	.word	0x0005deec
   ba4f4:	5851f42d 	.word	0x5851f42d
   ba4f8:	4c957f2d 	.word	0x4c957f2d

000ba4fc <strcmp>:
   ba4fc:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba500:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba504:	2a01      	cmp	r2, #1
   ba506:	bf28      	it	cs
   ba508:	429a      	cmpcs	r2, r3
   ba50a:	d0f7      	beq.n	ba4fc <strcmp>
   ba50c:	1ad0      	subs	r0, r2, r3
   ba50e:	4770      	bx	lr

000ba510 <strcpy>:
   ba510:	4603      	mov	r3, r0
   ba512:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba516:	f803 2b01 	strb.w	r2, [r3], #1
   ba51a:	2a00      	cmp	r2, #0
   ba51c:	d1f9      	bne.n	ba512 <strcpy+0x2>
   ba51e:	4770      	bx	lr

000ba520 <strlen>:
   ba520:	4603      	mov	r3, r0
   ba522:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba526:	2a00      	cmp	r2, #0
   ba528:	d1fb      	bne.n	ba522 <strlen+0x2>
   ba52a:	1a18      	subs	r0, r3, r0
   ba52c:	3801      	subs	r0, #1
   ba52e:	4770      	bx	lr

000ba530 <strncasecmp>:
   ba530:	b570      	push	{r4, r5, r6, lr}
   ba532:	4e0f      	ldr	r6, [pc, #60]	; (ba570 <strncasecmp+0x40>)
   ba534:	4604      	mov	r4, r0
   ba536:	440a      	add	r2, r1
   ba538:	428a      	cmp	r2, r1
   ba53a:	d101      	bne.n	ba540 <strncasecmp+0x10>
   ba53c:	2000      	movs	r0, #0
   ba53e:	e013      	b.n	ba568 <strncasecmp+0x38>
   ba540:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba544:	5d98      	ldrb	r0, [r3, r6]
   ba546:	f000 0003 	and.w	r0, r0, #3
   ba54a:	2801      	cmp	r0, #1
   ba54c:	f811 0b01 	ldrb.w	r0, [r1], #1
   ba550:	5c35      	ldrb	r5, [r6, r0]
   ba552:	f005 0503 	and.w	r5, r5, #3
   ba556:	bf08      	it	eq
   ba558:	3320      	addeq	r3, #32
   ba55a:	2d01      	cmp	r5, #1
   ba55c:	bf08      	it	eq
   ba55e:	3020      	addeq	r0, #32
   ba560:	1a1b      	subs	r3, r3, r0
   ba562:	d102      	bne.n	ba56a <strncasecmp+0x3a>
   ba564:	2800      	cmp	r0, #0
   ba566:	d1e7      	bne.n	ba538 <strncasecmp+0x8>
   ba568:	bd70      	pop	{r4, r5, r6, pc}
   ba56a:	4618      	mov	r0, r3
   ba56c:	e7fc      	b.n	ba568 <strncasecmp+0x38>
   ba56e:	bf00      	nop
   ba570:	000bd359 	.word	0x000bd359

000ba574 <strncmp>:
   ba574:	b510      	push	{r4, lr}
   ba576:	b17a      	cbz	r2, ba598 <strncmp+0x24>
   ba578:	4603      	mov	r3, r0
   ba57a:	3901      	subs	r1, #1
   ba57c:	1884      	adds	r4, r0, r2
   ba57e:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba582:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   ba586:	4290      	cmp	r0, r2
   ba588:	d101      	bne.n	ba58e <strncmp+0x1a>
   ba58a:	42a3      	cmp	r3, r4
   ba58c:	d101      	bne.n	ba592 <strncmp+0x1e>
   ba58e:	1a80      	subs	r0, r0, r2
   ba590:	bd10      	pop	{r4, pc}
   ba592:	2800      	cmp	r0, #0
   ba594:	d1f3      	bne.n	ba57e <strncmp+0xa>
   ba596:	e7fa      	b.n	ba58e <strncmp+0x1a>
   ba598:	4610      	mov	r0, r2
   ba59a:	e7f9      	b.n	ba590 <strncmp+0x1c>

000ba59c <strncpy>:
   ba59c:	b510      	push	{r4, lr}
   ba59e:	3901      	subs	r1, #1
   ba5a0:	4603      	mov	r3, r0
   ba5a2:	b132      	cbz	r2, ba5b2 <strncpy+0x16>
   ba5a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba5a8:	f803 4b01 	strb.w	r4, [r3], #1
   ba5ac:	3a01      	subs	r2, #1
   ba5ae:	2c00      	cmp	r4, #0
   ba5b0:	d1f7      	bne.n	ba5a2 <strncpy+0x6>
   ba5b2:	441a      	add	r2, r3
   ba5b4:	2100      	movs	r1, #0
   ba5b6:	4293      	cmp	r3, r2
   ba5b8:	d100      	bne.n	ba5bc <strncpy+0x20>
   ba5ba:	bd10      	pop	{r4, pc}
   ba5bc:	f803 1b01 	strb.w	r1, [r3], #1
   ba5c0:	e7f9      	b.n	ba5b6 <strncpy+0x1a>

000ba5c2 <sulp>:
   ba5c2:	b570      	push	{r4, r5, r6, lr}
   ba5c4:	4604      	mov	r4, r0
   ba5c6:	460d      	mov	r5, r1
   ba5c8:	ec45 4b10 	vmov	d0, r4, r5
   ba5cc:	4616      	mov	r6, r2
   ba5ce:	f001 fd1d 	bl	bc00c <__ulp>
   ba5d2:	ec51 0b10 	vmov	r0, r1, d0
   ba5d6:	b17e      	cbz	r6, ba5f8 <sulp+0x36>
   ba5d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
   ba5dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba5e0:	2b00      	cmp	r3, #0
   ba5e2:	dd09      	ble.n	ba5f8 <sulp+0x36>
   ba5e4:	051b      	lsls	r3, r3, #20
   ba5e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   ba5ea:	2400      	movs	r4, #0
   ba5ec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   ba5f0:	4622      	mov	r2, r4
   ba5f2:	462b      	mov	r3, r5
   ba5f4:	f7ff f838 	bl	b9668 <__aeabi_dmul>
   ba5f8:	bd70      	pop	{r4, r5, r6, pc}
   ba5fa:	0000      	movs	r0, r0
   ba5fc:	0000      	movs	r0, r0
	...

000ba600 <_strtod_l>:
   ba600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba604:	ed2d 8b02 	vpush	{d8}
   ba608:	b09d      	sub	sp, #116	; 0x74
   ba60a:	461f      	mov	r7, r3
   ba60c:	2300      	movs	r3, #0
   ba60e:	9318      	str	r3, [sp, #96]	; 0x60
   ba610:	4ba2      	ldr	r3, [pc, #648]	; (ba89c <_strtod_l+0x29c>)
   ba612:	9213      	str	r2, [sp, #76]	; 0x4c
   ba614:	681b      	ldr	r3, [r3, #0]
   ba616:	9305      	str	r3, [sp, #20]
   ba618:	4604      	mov	r4, r0
   ba61a:	4618      	mov	r0, r3
   ba61c:	4688      	mov	r8, r1
   ba61e:	f7ff ff7f 	bl	ba520 <strlen>
   ba622:	f04f 0a00 	mov.w	sl, #0
   ba626:	4605      	mov	r5, r0
   ba628:	f04f 0b00 	mov.w	fp, #0
   ba62c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba632:	781a      	ldrb	r2, [r3, #0]
   ba634:	2a2b      	cmp	r2, #43	; 0x2b
   ba636:	d04e      	beq.n	ba6d6 <_strtod_l+0xd6>
   ba638:	d83b      	bhi.n	ba6b2 <_strtod_l+0xb2>
   ba63a:	2a0d      	cmp	r2, #13
   ba63c:	d834      	bhi.n	ba6a8 <_strtod_l+0xa8>
   ba63e:	2a08      	cmp	r2, #8
   ba640:	d834      	bhi.n	ba6ac <_strtod_l+0xac>
   ba642:	2a00      	cmp	r2, #0
   ba644:	d03e      	beq.n	ba6c4 <_strtod_l+0xc4>
   ba646:	2300      	movs	r3, #0
   ba648:	930a      	str	r3, [sp, #40]	; 0x28
   ba64a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   ba64c:	7833      	ldrb	r3, [r6, #0]
   ba64e:	2b30      	cmp	r3, #48	; 0x30
   ba650:	f040 80b0 	bne.w	ba7b4 <_strtod_l+0x1b4>
   ba654:	7873      	ldrb	r3, [r6, #1]
   ba656:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba65a:	2b58      	cmp	r3, #88	; 0x58
   ba65c:	d168      	bne.n	ba730 <_strtod_l+0x130>
   ba65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba660:	9301      	str	r3, [sp, #4]
   ba662:	ab18      	add	r3, sp, #96	; 0x60
   ba664:	9702      	str	r7, [sp, #8]
   ba666:	9300      	str	r3, [sp, #0]
   ba668:	4a8d      	ldr	r2, [pc, #564]	; (ba8a0 <_strtod_l+0x2a0>)
   ba66a:	ab19      	add	r3, sp, #100	; 0x64
   ba66c:	a917      	add	r1, sp, #92	; 0x5c
   ba66e:	4620      	mov	r0, r4
   ba670:	f000 fe40 	bl	bb2f4 <__gethex>
   ba674:	f010 0707 	ands.w	r7, r0, #7
   ba678:	4605      	mov	r5, r0
   ba67a:	d005      	beq.n	ba688 <_strtod_l+0x88>
   ba67c:	2f06      	cmp	r7, #6
   ba67e:	d12c      	bne.n	ba6da <_strtod_l+0xda>
   ba680:	3601      	adds	r6, #1
   ba682:	2300      	movs	r3, #0
   ba684:	9617      	str	r6, [sp, #92]	; 0x5c
   ba686:	930a      	str	r3, [sp, #40]	; 0x28
   ba688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba68a:	2b00      	cmp	r3, #0
   ba68c:	f040 8590 	bne.w	bb1b0 <_strtod_l+0xbb0>
   ba690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba692:	b1eb      	cbz	r3, ba6d0 <_strtod_l+0xd0>
   ba694:	4652      	mov	r2, sl
   ba696:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ba69a:	ec43 2b10 	vmov	d0, r2, r3
   ba69e:	b01d      	add	sp, #116	; 0x74
   ba6a0:	ecbd 8b02 	vpop	{d8}
   ba6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba6a8:	2a20      	cmp	r2, #32
   ba6aa:	d1cc      	bne.n	ba646 <_strtod_l+0x46>
   ba6ac:	3301      	adds	r3, #1
   ba6ae:	9317      	str	r3, [sp, #92]	; 0x5c
   ba6b0:	e7be      	b.n	ba630 <_strtod_l+0x30>
   ba6b2:	2a2d      	cmp	r2, #45	; 0x2d
   ba6b4:	d1c7      	bne.n	ba646 <_strtod_l+0x46>
   ba6b6:	2201      	movs	r2, #1
   ba6b8:	920a      	str	r2, [sp, #40]	; 0x28
   ba6ba:	1c5a      	adds	r2, r3, #1
   ba6bc:	9217      	str	r2, [sp, #92]	; 0x5c
   ba6be:	785b      	ldrb	r3, [r3, #1]
   ba6c0:	2b00      	cmp	r3, #0
   ba6c2:	d1c2      	bne.n	ba64a <_strtod_l+0x4a>
   ba6c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba6c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba6ca:	2b00      	cmp	r3, #0
   ba6cc:	f040 856e 	bne.w	bb1ac <_strtod_l+0xbac>
   ba6d0:	4652      	mov	r2, sl
   ba6d2:	465b      	mov	r3, fp
   ba6d4:	e7e1      	b.n	ba69a <_strtod_l+0x9a>
   ba6d6:	2200      	movs	r2, #0
   ba6d8:	e7ee      	b.n	ba6b8 <_strtod_l+0xb8>
   ba6da:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba6dc:	b13a      	cbz	r2, ba6ee <_strtod_l+0xee>
   ba6de:	2135      	movs	r1, #53	; 0x35
   ba6e0:	a81a      	add	r0, sp, #104	; 0x68
   ba6e2:	f001 fd9e 	bl	bc222 <__copybits>
   ba6e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba6e8:	4620      	mov	r0, r4
   ba6ea:	f001 f95d 	bl	bb9a8 <_Bfree>
   ba6ee:	3f01      	subs	r7, #1
   ba6f0:	2f04      	cmp	r7, #4
   ba6f2:	d806      	bhi.n	ba702 <_strtod_l+0x102>
   ba6f4:	e8df f007 	tbb	[pc, r7]
   ba6f8:	1714030a 	.word	0x1714030a
   ba6fc:	0a          	.byte	0x0a
   ba6fd:	00          	.byte	0x00
   ba6fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   ba702:	0728      	lsls	r0, r5, #28
   ba704:	d5c0      	bpl.n	ba688 <_strtod_l+0x88>
   ba706:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   ba70a:	e7bd      	b.n	ba688 <_strtod_l+0x88>
   ba70c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   ba710:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ba712:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   ba716:	f202 4233 	addw	r2, r2, #1075	; 0x433
   ba71a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   ba71e:	e7f0      	b.n	ba702 <_strtod_l+0x102>
   ba720:	f8df b180 	ldr.w	fp, [pc, #384]	; ba8a4 <_strtod_l+0x2a4>
   ba724:	e7ed      	b.n	ba702 <_strtod_l+0x102>
   ba726:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   ba72a:	f04f 3aff 	mov.w	sl, #4294967295
   ba72e:	e7e8      	b.n	ba702 <_strtod_l+0x102>
   ba730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba732:	1c5a      	adds	r2, r3, #1
   ba734:	9217      	str	r2, [sp, #92]	; 0x5c
   ba736:	785b      	ldrb	r3, [r3, #1]
   ba738:	2b30      	cmp	r3, #48	; 0x30
   ba73a:	d0f9      	beq.n	ba730 <_strtod_l+0x130>
   ba73c:	2b00      	cmp	r3, #0
   ba73e:	d0a3      	beq.n	ba688 <_strtod_l+0x88>
   ba740:	2301      	movs	r3, #1
   ba742:	f04f 0900 	mov.w	r9, #0
   ba746:	9304      	str	r3, [sp, #16]
   ba748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba74a:	9308      	str	r3, [sp, #32]
   ba74c:	f8cd 901c 	str.w	r9, [sp, #28]
   ba750:	464f      	mov	r7, r9
   ba752:	220a      	movs	r2, #10
   ba754:	9817      	ldr	r0, [sp, #92]	; 0x5c
   ba756:	7806      	ldrb	r6, [r0, #0]
   ba758:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   ba75c:	b2d9      	uxtb	r1, r3
   ba75e:	2909      	cmp	r1, #9
   ba760:	d92a      	bls.n	ba7b8 <_strtod_l+0x1b8>
   ba762:	9905      	ldr	r1, [sp, #20]
   ba764:	462a      	mov	r2, r5
   ba766:	f7ff ff05 	bl	ba574 <strncmp>
   ba76a:	b398      	cbz	r0, ba7d4 <_strtod_l+0x1d4>
   ba76c:	2000      	movs	r0, #0
   ba76e:	4632      	mov	r2, r6
   ba770:	463d      	mov	r5, r7
   ba772:	9005      	str	r0, [sp, #20]
   ba774:	4603      	mov	r3, r0
   ba776:	2a65      	cmp	r2, #101	; 0x65
   ba778:	d001      	beq.n	ba77e <_strtod_l+0x17e>
   ba77a:	2a45      	cmp	r2, #69	; 0x45
   ba77c:	d118      	bne.n	ba7b0 <_strtod_l+0x1b0>
   ba77e:	b91d      	cbnz	r5, ba788 <_strtod_l+0x188>
   ba780:	9a04      	ldr	r2, [sp, #16]
   ba782:	4302      	orrs	r2, r0
   ba784:	d09e      	beq.n	ba6c4 <_strtod_l+0xc4>
   ba786:	2500      	movs	r5, #0
   ba788:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   ba78c:	f108 0201 	add.w	r2, r8, #1
   ba790:	9217      	str	r2, [sp, #92]	; 0x5c
   ba792:	f898 2001 	ldrb.w	r2, [r8, #1]
   ba796:	2a2b      	cmp	r2, #43	; 0x2b
   ba798:	d075      	beq.n	ba886 <_strtod_l+0x286>
   ba79a:	2a2d      	cmp	r2, #45	; 0x2d
   ba79c:	d07b      	beq.n	ba896 <_strtod_l+0x296>
   ba79e:	f04f 0c00 	mov.w	ip, #0
   ba7a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   ba7a6:	2909      	cmp	r1, #9
   ba7a8:	f240 8082 	bls.w	ba8b0 <_strtod_l+0x2b0>
   ba7ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba7b0:	2600      	movs	r6, #0
   ba7b2:	e09d      	b.n	ba8f0 <_strtod_l+0x2f0>
   ba7b4:	2300      	movs	r3, #0
   ba7b6:	e7c4      	b.n	ba742 <_strtod_l+0x142>
   ba7b8:	2f08      	cmp	r7, #8
   ba7ba:	bfd8      	it	le
   ba7bc:	9907      	ldrle	r1, [sp, #28]
   ba7be:	f100 0001 	add.w	r0, r0, #1
   ba7c2:	bfda      	itte	le
   ba7c4:	fb02 3301 	mlale	r3, r2, r1, r3
   ba7c8:	9307      	strle	r3, [sp, #28]
   ba7ca:	fb02 3909 	mlagt	r9, r2, r9, r3
   ba7ce:	3701      	adds	r7, #1
   ba7d0:	9017      	str	r0, [sp, #92]	; 0x5c
   ba7d2:	e7bf      	b.n	ba754 <_strtod_l+0x154>
   ba7d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba7d6:	195a      	adds	r2, r3, r5
   ba7d8:	9217      	str	r2, [sp, #92]	; 0x5c
   ba7da:	5d5a      	ldrb	r2, [r3, r5]
   ba7dc:	2f00      	cmp	r7, #0
   ba7de:	d037      	beq.n	ba850 <_strtod_l+0x250>
   ba7e0:	9005      	str	r0, [sp, #20]
   ba7e2:	463d      	mov	r5, r7
   ba7e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   ba7e8:	2b09      	cmp	r3, #9
   ba7ea:	d912      	bls.n	ba812 <_strtod_l+0x212>
   ba7ec:	2301      	movs	r3, #1
   ba7ee:	e7c2      	b.n	ba776 <_strtod_l+0x176>
   ba7f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba7f2:	1c5a      	adds	r2, r3, #1
   ba7f4:	9217      	str	r2, [sp, #92]	; 0x5c
   ba7f6:	785a      	ldrb	r2, [r3, #1]
   ba7f8:	3001      	adds	r0, #1
   ba7fa:	2a30      	cmp	r2, #48	; 0x30
   ba7fc:	d0f8      	beq.n	ba7f0 <_strtod_l+0x1f0>
   ba7fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   ba802:	2b08      	cmp	r3, #8
   ba804:	f200 84d9 	bhi.w	bb1ba <_strtod_l+0xbba>
   ba808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba80a:	9005      	str	r0, [sp, #20]
   ba80c:	2000      	movs	r0, #0
   ba80e:	9308      	str	r3, [sp, #32]
   ba810:	4605      	mov	r5, r0
   ba812:	3a30      	subs	r2, #48	; 0x30
   ba814:	f100 0301 	add.w	r3, r0, #1
   ba818:	d014      	beq.n	ba844 <_strtod_l+0x244>
   ba81a:	9905      	ldr	r1, [sp, #20]
   ba81c:	4419      	add	r1, r3
   ba81e:	9105      	str	r1, [sp, #20]
   ba820:	462b      	mov	r3, r5
   ba822:	eb00 0e05 	add.w	lr, r0, r5
   ba826:	210a      	movs	r1, #10
   ba828:	4573      	cmp	r3, lr
   ba82a:	d113      	bne.n	ba854 <_strtod_l+0x254>
   ba82c:	182b      	adds	r3, r5, r0
   ba82e:	2b08      	cmp	r3, #8
   ba830:	f105 0501 	add.w	r5, r5, #1
   ba834:	4405      	add	r5, r0
   ba836:	dc1c      	bgt.n	ba872 <_strtod_l+0x272>
   ba838:	9907      	ldr	r1, [sp, #28]
   ba83a:	230a      	movs	r3, #10
   ba83c:	fb03 2301 	mla	r3, r3, r1, r2
   ba840:	9307      	str	r3, [sp, #28]
   ba842:	2300      	movs	r3, #0
   ba844:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba846:	1c51      	adds	r1, r2, #1
   ba848:	9117      	str	r1, [sp, #92]	; 0x5c
   ba84a:	7852      	ldrb	r2, [r2, #1]
   ba84c:	4618      	mov	r0, r3
   ba84e:	e7c9      	b.n	ba7e4 <_strtod_l+0x1e4>
   ba850:	4638      	mov	r0, r7
   ba852:	e7d2      	b.n	ba7fa <_strtod_l+0x1fa>
   ba854:	2b08      	cmp	r3, #8
   ba856:	dc04      	bgt.n	ba862 <_strtod_l+0x262>
   ba858:	9e07      	ldr	r6, [sp, #28]
   ba85a:	434e      	muls	r6, r1
   ba85c:	9607      	str	r6, [sp, #28]
   ba85e:	3301      	adds	r3, #1
   ba860:	e7e2      	b.n	ba828 <_strtod_l+0x228>
   ba862:	f103 0c01 	add.w	ip, r3, #1
   ba866:	f1bc 0f10 	cmp.w	ip, #16
   ba86a:	bfd8      	it	le
   ba86c:	fb01 f909 	mulle.w	r9, r1, r9
   ba870:	e7f5      	b.n	ba85e <_strtod_l+0x25e>
   ba872:	2d10      	cmp	r5, #16
   ba874:	bfdc      	itt	le
   ba876:	230a      	movle	r3, #10
   ba878:	fb03 2909 	mlale	r9, r3, r9, r2
   ba87c:	e7e1      	b.n	ba842 <_strtod_l+0x242>
   ba87e:	2300      	movs	r3, #0
   ba880:	9305      	str	r3, [sp, #20]
   ba882:	2301      	movs	r3, #1
   ba884:	e77c      	b.n	ba780 <_strtod_l+0x180>
   ba886:	f04f 0c00 	mov.w	ip, #0
   ba88a:	f108 0202 	add.w	r2, r8, #2
   ba88e:	9217      	str	r2, [sp, #92]	; 0x5c
   ba890:	f898 2002 	ldrb.w	r2, [r8, #2]
   ba894:	e785      	b.n	ba7a2 <_strtod_l+0x1a2>
   ba896:	f04f 0c01 	mov.w	ip, #1
   ba89a:	e7f6      	b.n	ba88a <_strtod_l+0x28a>
   ba89c:	000bd4f0 	.word	0x000bd4f0
   ba8a0:	000bd308 	.word	0x000bd308
   ba8a4:	7ff00000 	.word	0x7ff00000
   ba8a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba8aa:	1c51      	adds	r1, r2, #1
   ba8ac:	9117      	str	r1, [sp, #92]	; 0x5c
   ba8ae:	7852      	ldrb	r2, [r2, #1]
   ba8b0:	2a30      	cmp	r2, #48	; 0x30
   ba8b2:	d0f9      	beq.n	ba8a8 <_strtod_l+0x2a8>
   ba8b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   ba8b8:	2908      	cmp	r1, #8
   ba8ba:	f63f af79 	bhi.w	ba7b0 <_strtod_l+0x1b0>
   ba8be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   ba8c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba8c4:	9206      	str	r2, [sp, #24]
   ba8c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba8c8:	1c51      	adds	r1, r2, #1
   ba8ca:	9117      	str	r1, [sp, #92]	; 0x5c
   ba8cc:	7852      	ldrb	r2, [r2, #1]
   ba8ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   ba8d2:	2e09      	cmp	r6, #9
   ba8d4:	d937      	bls.n	ba946 <_strtod_l+0x346>
   ba8d6:	9e06      	ldr	r6, [sp, #24]
   ba8d8:	1b89      	subs	r1, r1, r6
   ba8da:	2908      	cmp	r1, #8
   ba8dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   ba8e0:	dc02      	bgt.n	ba8e8 <_strtod_l+0x2e8>
   ba8e2:	4576      	cmp	r6, lr
   ba8e4:	bfa8      	it	ge
   ba8e6:	4676      	movge	r6, lr
   ba8e8:	f1bc 0f00 	cmp.w	ip, #0
   ba8ec:	d000      	beq.n	ba8f0 <_strtod_l+0x2f0>
   ba8ee:	4276      	negs	r6, r6
   ba8f0:	2d00      	cmp	r5, #0
   ba8f2:	d14d      	bne.n	ba990 <_strtod_l+0x390>
   ba8f4:	9904      	ldr	r1, [sp, #16]
   ba8f6:	4301      	orrs	r1, r0
   ba8f8:	f47f aec6 	bne.w	ba688 <_strtod_l+0x88>
   ba8fc:	2b00      	cmp	r3, #0
   ba8fe:	f47f aee1 	bne.w	ba6c4 <_strtod_l+0xc4>
   ba902:	2a69      	cmp	r2, #105	; 0x69
   ba904:	d027      	beq.n	ba956 <_strtod_l+0x356>
   ba906:	dc24      	bgt.n	ba952 <_strtod_l+0x352>
   ba908:	2a49      	cmp	r2, #73	; 0x49
   ba90a:	d024      	beq.n	ba956 <_strtod_l+0x356>
   ba90c:	2a4e      	cmp	r2, #78	; 0x4e
   ba90e:	f47f aed9 	bne.w	ba6c4 <_strtod_l+0xc4>
   ba912:	499f      	ldr	r1, [pc, #636]	; (bab90 <_strtod_l+0x590>)
   ba914:	a817      	add	r0, sp, #92	; 0x5c
   ba916:	f000 ff45 	bl	bb7a4 <__match>
   ba91a:	2800      	cmp	r0, #0
   ba91c:	f43f aed2 	beq.w	ba6c4 <_strtod_l+0xc4>
   ba920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba922:	781b      	ldrb	r3, [r3, #0]
   ba924:	2b28      	cmp	r3, #40	; 0x28
   ba926:	d12d      	bne.n	ba984 <_strtod_l+0x384>
   ba928:	499a      	ldr	r1, [pc, #616]	; (bab94 <_strtod_l+0x594>)
   ba92a:	aa1a      	add	r2, sp, #104	; 0x68
   ba92c:	a817      	add	r0, sp, #92	; 0x5c
   ba92e:	f000 ff4d 	bl	bb7cc <__hexnan>
   ba932:	2805      	cmp	r0, #5
   ba934:	d126      	bne.n	ba984 <_strtod_l+0x384>
   ba936:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   ba938:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   ba93c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   ba940:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   ba944:	e6a0      	b.n	ba688 <_strtod_l+0x88>
   ba946:	210a      	movs	r1, #10
   ba948:	fb01 2e0e 	mla	lr, r1, lr, r2
   ba94c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   ba950:	e7b9      	b.n	ba8c6 <_strtod_l+0x2c6>
   ba952:	2a6e      	cmp	r2, #110	; 0x6e
   ba954:	e7db      	b.n	ba90e <_strtod_l+0x30e>
   ba956:	4990      	ldr	r1, [pc, #576]	; (bab98 <_strtod_l+0x598>)
   ba958:	a817      	add	r0, sp, #92	; 0x5c
   ba95a:	f000 ff23 	bl	bb7a4 <__match>
   ba95e:	2800      	cmp	r0, #0
   ba960:	f43f aeb0 	beq.w	ba6c4 <_strtod_l+0xc4>
   ba964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba966:	498d      	ldr	r1, [pc, #564]	; (bab9c <_strtod_l+0x59c>)
   ba968:	3b01      	subs	r3, #1
   ba96a:	a817      	add	r0, sp, #92	; 0x5c
   ba96c:	9317      	str	r3, [sp, #92]	; 0x5c
   ba96e:	f000 ff19 	bl	bb7a4 <__match>
   ba972:	b910      	cbnz	r0, ba97a <_strtod_l+0x37a>
   ba974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba976:	3301      	adds	r3, #1
   ba978:	9317      	str	r3, [sp, #92]	; 0x5c
   ba97a:	f8df b230 	ldr.w	fp, [pc, #560]	; babac <_strtod_l+0x5ac>
   ba97e:	f04f 0a00 	mov.w	sl, #0
   ba982:	e681      	b.n	ba688 <_strtod_l+0x88>
   ba984:	4886      	ldr	r0, [pc, #536]	; (baba0 <_strtod_l+0x5a0>)
   ba986:	f7fe fcab 	bl	b92e0 <nan>
   ba98a:	ec5b ab10 	vmov	sl, fp, d0
   ba98e:	e67b      	b.n	ba688 <_strtod_l+0x88>
   ba990:	9b05      	ldr	r3, [sp, #20]
   ba992:	9807      	ldr	r0, [sp, #28]
   ba994:	1af3      	subs	r3, r6, r3
   ba996:	2f00      	cmp	r7, #0
   ba998:	bf08      	it	eq
   ba99a:	462f      	moveq	r7, r5
   ba99c:	2d10      	cmp	r5, #16
   ba99e:	9306      	str	r3, [sp, #24]
   ba9a0:	46a8      	mov	r8, r5
   ba9a2:	bfa8      	it	ge
   ba9a4:	f04f 0810 	movge.w	r8, #16
   ba9a8:	f7fe fde4 	bl	b9574 <__aeabi_ui2d>
   ba9ac:	2d09      	cmp	r5, #9
   ba9ae:	4682      	mov	sl, r0
   ba9b0:	468b      	mov	fp, r1
   ba9b2:	dd13      	ble.n	ba9dc <_strtod_l+0x3dc>
   ba9b4:	4b7b      	ldr	r3, [pc, #492]	; (baba4 <_strtod_l+0x5a4>)
   ba9b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   ba9ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   ba9be:	f7fe fe53 	bl	b9668 <__aeabi_dmul>
   ba9c2:	4682      	mov	sl, r0
   ba9c4:	4648      	mov	r0, r9
   ba9c6:	468b      	mov	fp, r1
   ba9c8:	f7fe fdd4 	bl	b9574 <__aeabi_ui2d>
   ba9cc:	4602      	mov	r2, r0
   ba9ce:	460b      	mov	r3, r1
   ba9d0:	4650      	mov	r0, sl
   ba9d2:	4659      	mov	r1, fp
   ba9d4:	f7fe fc92 	bl	b92fc <__adddf3>
   ba9d8:	4682      	mov	sl, r0
   ba9da:	468b      	mov	fp, r1
   ba9dc:	2d0f      	cmp	r5, #15
   ba9de:	dc38      	bgt.n	baa52 <_strtod_l+0x452>
   ba9e0:	9b06      	ldr	r3, [sp, #24]
   ba9e2:	2b00      	cmp	r3, #0
   ba9e4:	f43f ae50 	beq.w	ba688 <_strtod_l+0x88>
   ba9e8:	dd24      	ble.n	baa34 <_strtod_l+0x434>
   ba9ea:	2b16      	cmp	r3, #22
   ba9ec:	dc0b      	bgt.n	baa06 <_strtod_l+0x406>
   ba9ee:	496d      	ldr	r1, [pc, #436]	; (baba4 <_strtod_l+0x5a4>)
   ba9f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba9f4:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba9f8:	4652      	mov	r2, sl
   ba9fa:	465b      	mov	r3, fp
   ba9fc:	f7fe fe34 	bl	b9668 <__aeabi_dmul>
   baa00:	4682      	mov	sl, r0
   baa02:	468b      	mov	fp, r1
   baa04:	e640      	b.n	ba688 <_strtod_l+0x88>
   baa06:	9a06      	ldr	r2, [sp, #24]
   baa08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   baa0c:	4293      	cmp	r3, r2
   baa0e:	db20      	blt.n	baa52 <_strtod_l+0x452>
   baa10:	4c64      	ldr	r4, [pc, #400]	; (baba4 <_strtod_l+0x5a4>)
   baa12:	f1c5 050f 	rsb	r5, r5, #15
   baa16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   baa1a:	4652      	mov	r2, sl
   baa1c:	465b      	mov	r3, fp
   baa1e:	e9d1 0100 	ldrd	r0, r1, [r1]
   baa22:	f7fe fe21 	bl	b9668 <__aeabi_dmul>
   baa26:	9b06      	ldr	r3, [sp, #24]
   baa28:	1b5d      	subs	r5, r3, r5
   baa2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   baa2e:	e9d4 2300 	ldrd	r2, r3, [r4]
   baa32:	e7e3      	b.n	ba9fc <_strtod_l+0x3fc>
   baa34:	9b06      	ldr	r3, [sp, #24]
   baa36:	3316      	adds	r3, #22
   baa38:	db0b      	blt.n	baa52 <_strtod_l+0x452>
   baa3a:	9b05      	ldr	r3, [sp, #20]
   baa3c:	1b9e      	subs	r6, r3, r6
   baa3e:	4b59      	ldr	r3, [pc, #356]	; (baba4 <_strtod_l+0x5a4>)
   baa40:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   baa44:	e9d6 2300 	ldrd	r2, r3, [r6]
   baa48:	4650      	mov	r0, sl
   baa4a:	4659      	mov	r1, fp
   baa4c:	f7fe ff36 	bl	b98bc <__aeabi_ddiv>
   baa50:	e7d6      	b.n	baa00 <_strtod_l+0x400>
   baa52:	9b06      	ldr	r3, [sp, #24]
   baa54:	eba5 0808 	sub.w	r8, r5, r8
   baa58:	4498      	add	r8, r3
   baa5a:	f1b8 0f00 	cmp.w	r8, #0
   baa5e:	dd74      	ble.n	bab4a <_strtod_l+0x54a>
   baa60:	f018 030f 	ands.w	r3, r8, #15
   baa64:	d00a      	beq.n	baa7c <_strtod_l+0x47c>
   baa66:	494f      	ldr	r1, [pc, #316]	; (baba4 <_strtod_l+0x5a4>)
   baa68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   baa6c:	4652      	mov	r2, sl
   baa6e:	465b      	mov	r3, fp
   baa70:	e9d1 0100 	ldrd	r0, r1, [r1]
   baa74:	f7fe fdf8 	bl	b9668 <__aeabi_dmul>
   baa78:	4682      	mov	sl, r0
   baa7a:	468b      	mov	fp, r1
   baa7c:	f038 080f 	bics.w	r8, r8, #15
   baa80:	d04f      	beq.n	bab22 <_strtod_l+0x522>
   baa82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   baa86:	dd22      	ble.n	baace <_strtod_l+0x4ce>
   baa88:	2500      	movs	r5, #0
   baa8a:	462e      	mov	r6, r5
   baa8c:	9507      	str	r5, [sp, #28]
   baa8e:	9505      	str	r5, [sp, #20]
   baa90:	2322      	movs	r3, #34	; 0x22
   baa92:	f8df b118 	ldr.w	fp, [pc, #280]	; babac <_strtod_l+0x5ac>
   baa96:	6023      	str	r3, [r4, #0]
   baa98:	f04f 0a00 	mov.w	sl, #0
   baa9c:	9b07      	ldr	r3, [sp, #28]
   baa9e:	2b00      	cmp	r3, #0
   baaa0:	f43f adf2 	beq.w	ba688 <_strtod_l+0x88>
   baaa4:	9918      	ldr	r1, [sp, #96]	; 0x60
   baaa6:	4620      	mov	r0, r4
   baaa8:	f000 ff7e 	bl	bb9a8 <_Bfree>
   baaac:	9905      	ldr	r1, [sp, #20]
   baaae:	4620      	mov	r0, r4
   baab0:	f000 ff7a 	bl	bb9a8 <_Bfree>
   baab4:	4631      	mov	r1, r6
   baab6:	4620      	mov	r0, r4
   baab8:	f000 ff76 	bl	bb9a8 <_Bfree>
   baabc:	9907      	ldr	r1, [sp, #28]
   baabe:	4620      	mov	r0, r4
   baac0:	f000 ff72 	bl	bb9a8 <_Bfree>
   baac4:	4629      	mov	r1, r5
   baac6:	4620      	mov	r0, r4
   baac8:	f000 ff6e 	bl	bb9a8 <_Bfree>
   baacc:	e5dc      	b.n	ba688 <_strtod_l+0x88>
   baace:	4b36      	ldr	r3, [pc, #216]	; (baba8 <_strtod_l+0x5a8>)
   baad0:	9304      	str	r3, [sp, #16]
   baad2:	2300      	movs	r3, #0
   baad4:	ea4f 1828 	mov.w	r8, r8, asr #4
   baad8:	4650      	mov	r0, sl
   baada:	4659      	mov	r1, fp
   baadc:	4699      	mov	r9, r3
   baade:	f1b8 0f01 	cmp.w	r8, #1
   baae2:	dc21      	bgt.n	bab28 <_strtod_l+0x528>
   baae4:	b10b      	cbz	r3, baaea <_strtod_l+0x4ea>
   baae6:	4682      	mov	sl, r0
   baae8:	468b      	mov	fp, r1
   baaea:	4b2f      	ldr	r3, [pc, #188]	; (baba8 <_strtod_l+0x5a8>)
   baaec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   baaf0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   baaf4:	4652      	mov	r2, sl
   baaf6:	465b      	mov	r3, fp
   baaf8:	e9d9 0100 	ldrd	r0, r1, [r9]
   baafc:	f7fe fdb4 	bl	b9668 <__aeabi_dmul>
   bab00:	4b2a      	ldr	r3, [pc, #168]	; (babac <_strtod_l+0x5ac>)
   bab02:	460a      	mov	r2, r1
   bab04:	400b      	ands	r3, r1
   bab06:	492a      	ldr	r1, [pc, #168]	; (babb0 <_strtod_l+0x5b0>)
   bab08:	428b      	cmp	r3, r1
   bab0a:	4682      	mov	sl, r0
   bab0c:	d8bc      	bhi.n	baa88 <_strtod_l+0x488>
   bab0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bab12:	428b      	cmp	r3, r1
   bab14:	bf86      	itte	hi
   bab16:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; babb4 <_strtod_l+0x5b4>
   bab1a:	f04f 3aff 	movhi.w	sl, #4294967295
   bab1e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bab22:	2300      	movs	r3, #0
   bab24:	9304      	str	r3, [sp, #16]
   bab26:	e084      	b.n	bac32 <_strtod_l+0x632>
   bab28:	f018 0f01 	tst.w	r8, #1
   bab2c:	d005      	beq.n	bab3a <_strtod_l+0x53a>
   bab2e:	9b04      	ldr	r3, [sp, #16]
   bab30:	e9d3 2300 	ldrd	r2, r3, [r3]
   bab34:	f7fe fd98 	bl	b9668 <__aeabi_dmul>
   bab38:	2301      	movs	r3, #1
   bab3a:	9a04      	ldr	r2, [sp, #16]
   bab3c:	3208      	adds	r2, #8
   bab3e:	f109 0901 	add.w	r9, r9, #1
   bab42:	ea4f 0868 	mov.w	r8, r8, asr #1
   bab46:	9204      	str	r2, [sp, #16]
   bab48:	e7c9      	b.n	baade <_strtod_l+0x4de>
   bab4a:	d0ea      	beq.n	bab22 <_strtod_l+0x522>
   bab4c:	f1c8 0800 	rsb	r8, r8, #0
   bab50:	f018 020f 	ands.w	r2, r8, #15
   bab54:	d00a      	beq.n	bab6c <_strtod_l+0x56c>
   bab56:	4b13      	ldr	r3, [pc, #76]	; (baba4 <_strtod_l+0x5a4>)
   bab58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bab5c:	4650      	mov	r0, sl
   bab5e:	4659      	mov	r1, fp
   bab60:	e9d3 2300 	ldrd	r2, r3, [r3]
   bab64:	f7fe feaa 	bl	b98bc <__aeabi_ddiv>
   bab68:	4682      	mov	sl, r0
   bab6a:	468b      	mov	fp, r1
   bab6c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bab70:	d0d7      	beq.n	bab22 <_strtod_l+0x522>
   bab72:	f1b8 0f1f 	cmp.w	r8, #31
   bab76:	dd1f      	ble.n	babb8 <_strtod_l+0x5b8>
   bab78:	2500      	movs	r5, #0
   bab7a:	462e      	mov	r6, r5
   bab7c:	9507      	str	r5, [sp, #28]
   bab7e:	9505      	str	r5, [sp, #20]
   bab80:	2322      	movs	r3, #34	; 0x22
   bab82:	f04f 0a00 	mov.w	sl, #0
   bab86:	f04f 0b00 	mov.w	fp, #0
   bab8a:	6023      	str	r3, [r4, #0]
   bab8c:	e786      	b.n	baa9c <_strtod_l+0x49c>
   bab8e:	bf00      	nop
   bab90:	000bcf61 	.word	0x000bcf61
   bab94:	000bd31c 	.word	0x000bd31c
   bab98:	000bcf65 	.word	0x000bcf65
   bab9c:	000bd302 	.word	0x000bd302
   baba0:	000bc440 	.word	0x000bc440
   baba4:	000bd5b0 	.word	0x000bd5b0
   baba8:	000bd588 	.word	0x000bd588
   babac:	7ff00000 	.word	0x7ff00000
   babb0:	7ca00000 	.word	0x7ca00000
   babb4:	7fefffff 	.word	0x7fefffff
   babb8:	f018 0310 	ands.w	r3, r8, #16
   babbc:	bf18      	it	ne
   babbe:	236a      	movne	r3, #106	; 0x6a
   babc0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; baf70 <_strtod_l+0x970>
   babc4:	9304      	str	r3, [sp, #16]
   babc6:	4650      	mov	r0, sl
   babc8:	4659      	mov	r1, fp
   babca:	2300      	movs	r3, #0
   babcc:	f018 0f01 	tst.w	r8, #1
   babd0:	d004      	beq.n	babdc <_strtod_l+0x5dc>
   babd2:	e9d9 2300 	ldrd	r2, r3, [r9]
   babd6:	f7fe fd47 	bl	b9668 <__aeabi_dmul>
   babda:	2301      	movs	r3, #1
   babdc:	ea5f 0868 	movs.w	r8, r8, asr #1
   babe0:	f109 0908 	add.w	r9, r9, #8
   babe4:	d1f2      	bne.n	babcc <_strtod_l+0x5cc>
   babe6:	b10b      	cbz	r3, babec <_strtod_l+0x5ec>
   babe8:	4682      	mov	sl, r0
   babea:	468b      	mov	fp, r1
   babec:	9b04      	ldr	r3, [sp, #16]
   babee:	b1c3      	cbz	r3, bac22 <_strtod_l+0x622>
   babf0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   babf4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   babf8:	2b00      	cmp	r3, #0
   babfa:	4659      	mov	r1, fp
   babfc:	dd11      	ble.n	bac22 <_strtod_l+0x622>
   babfe:	2b1f      	cmp	r3, #31
   bac00:	f340 8124 	ble.w	bae4c <_strtod_l+0x84c>
   bac04:	2b34      	cmp	r3, #52	; 0x34
   bac06:	bfde      	ittt	le
   bac08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bac0c:	f04f 33ff 	movle.w	r3, #4294967295
   bac10:	fa03 f202 	lslle.w	r2, r3, r2
   bac14:	f04f 0a00 	mov.w	sl, #0
   bac18:	bfcc      	ite	gt
   bac1a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bac1e:	ea02 0b01 	andle.w	fp, r2, r1
   bac22:	2200      	movs	r2, #0
   bac24:	2300      	movs	r3, #0
   bac26:	4650      	mov	r0, sl
   bac28:	4659      	mov	r1, fp
   bac2a:	f7fe ff85 	bl	b9b38 <__aeabi_dcmpeq>
   bac2e:	2800      	cmp	r0, #0
   bac30:	d1a2      	bne.n	bab78 <_strtod_l+0x578>
   bac32:	9b07      	ldr	r3, [sp, #28]
   bac34:	9300      	str	r3, [sp, #0]
   bac36:	9908      	ldr	r1, [sp, #32]
   bac38:	462b      	mov	r3, r5
   bac3a:	463a      	mov	r2, r7
   bac3c:	4620      	mov	r0, r4
   bac3e:	f000 ff1b 	bl	bba78 <__s2b>
   bac42:	9007      	str	r0, [sp, #28]
   bac44:	2800      	cmp	r0, #0
   bac46:	f43f af1f 	beq.w	baa88 <_strtod_l+0x488>
   bac4a:	9b05      	ldr	r3, [sp, #20]
   bac4c:	1b9e      	subs	r6, r3, r6
   bac4e:	9b06      	ldr	r3, [sp, #24]
   bac50:	2b00      	cmp	r3, #0
   bac52:	bfb4      	ite	lt
   bac54:	4633      	movlt	r3, r6
   bac56:	2300      	movge	r3, #0
   bac58:	930c      	str	r3, [sp, #48]	; 0x30
   bac5a:	9b06      	ldr	r3, [sp, #24]
   bac5c:	2500      	movs	r5, #0
   bac5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bac62:	9312      	str	r3, [sp, #72]	; 0x48
   bac64:	462e      	mov	r6, r5
   bac66:	9b07      	ldr	r3, [sp, #28]
   bac68:	4620      	mov	r0, r4
   bac6a:	6859      	ldr	r1, [r3, #4]
   bac6c:	f000 fe5c 	bl	bb928 <_Balloc>
   bac70:	9005      	str	r0, [sp, #20]
   bac72:	2800      	cmp	r0, #0
   bac74:	f43f af0c 	beq.w	baa90 <_strtod_l+0x490>
   bac78:	9b07      	ldr	r3, [sp, #28]
   bac7a:	691a      	ldr	r2, [r3, #16]
   bac7c:	3202      	adds	r2, #2
   bac7e:	f103 010c 	add.w	r1, r3, #12
   bac82:	0092      	lsls	r2, r2, #2
   bac84:	300c      	adds	r0, #12
   bac86:	f7ff fb9d 	bl	ba3c4 <memcpy>
   bac8a:	ec4b ab10 	vmov	d0, sl, fp
   bac8e:	aa1a      	add	r2, sp, #104	; 0x68
   bac90:	a919      	add	r1, sp, #100	; 0x64
   bac92:	4620      	mov	r0, r4
   bac94:	f001 fa36 	bl	bc104 <__d2b>
   bac98:	ec4b ab18 	vmov	d8, sl, fp
   bac9c:	9018      	str	r0, [sp, #96]	; 0x60
   bac9e:	2800      	cmp	r0, #0
   baca0:	f43f aef6 	beq.w	baa90 <_strtod_l+0x490>
   baca4:	2101      	movs	r1, #1
   baca6:	4620      	mov	r0, r4
   baca8:	f000 ff80 	bl	bbbac <__i2b>
   bacac:	4606      	mov	r6, r0
   bacae:	2800      	cmp	r0, #0
   bacb0:	f43f aeee 	beq.w	baa90 <_strtod_l+0x490>
   bacb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bacb6:	9904      	ldr	r1, [sp, #16]
   bacb8:	2b00      	cmp	r3, #0
   bacba:	bfab      	itete	ge
   bacbc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bacbe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bacc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bacc2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bacc6:	bfac      	ite	ge
   bacc8:	eb03 0902 	addge.w	r9, r3, r2
   baccc:	1ad7      	sublt	r7, r2, r3
   bacce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bacd0:	eba3 0801 	sub.w	r8, r3, r1
   bacd4:	4490      	add	r8, r2
   bacd6:	4ba1      	ldr	r3, [pc, #644]	; (baf5c <_strtod_l+0x95c>)
   bacd8:	f108 38ff 	add.w	r8, r8, #4294967295
   bacdc:	4598      	cmp	r8, r3
   bacde:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bace2:	f280 80c7 	bge.w	bae74 <_strtod_l+0x874>
   bace6:	eba3 0308 	sub.w	r3, r3, r8
   bacea:	2b1f      	cmp	r3, #31
   bacec:	eba2 0203 	sub.w	r2, r2, r3
   bacf0:	f04f 0101 	mov.w	r1, #1
   bacf4:	f300 80b1 	bgt.w	bae5a <_strtod_l+0x85a>
   bacf8:	fa01 f303 	lsl.w	r3, r1, r3
   bacfc:	930d      	str	r3, [sp, #52]	; 0x34
   bacfe:	2300      	movs	r3, #0
   bad00:	9308      	str	r3, [sp, #32]
   bad02:	eb09 0802 	add.w	r8, r9, r2
   bad06:	9b04      	ldr	r3, [sp, #16]
   bad08:	45c1      	cmp	r9, r8
   bad0a:	4417      	add	r7, r2
   bad0c:	441f      	add	r7, r3
   bad0e:	464b      	mov	r3, r9
   bad10:	bfa8      	it	ge
   bad12:	4643      	movge	r3, r8
   bad14:	42bb      	cmp	r3, r7
   bad16:	bfa8      	it	ge
   bad18:	463b      	movge	r3, r7
   bad1a:	2b00      	cmp	r3, #0
   bad1c:	bfc2      	ittt	gt
   bad1e:	eba8 0803 	subgt.w	r8, r8, r3
   bad22:	1aff      	subgt	r7, r7, r3
   bad24:	eba9 0903 	subgt.w	r9, r9, r3
   bad28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bad2a:	2b00      	cmp	r3, #0
   bad2c:	dd17      	ble.n	bad5e <_strtod_l+0x75e>
   bad2e:	4631      	mov	r1, r6
   bad30:	461a      	mov	r2, r3
   bad32:	4620      	mov	r0, r4
   bad34:	f000 fffa 	bl	bbd2c <__pow5mult>
   bad38:	4606      	mov	r6, r0
   bad3a:	2800      	cmp	r0, #0
   bad3c:	f43f aea8 	beq.w	baa90 <_strtod_l+0x490>
   bad40:	4601      	mov	r1, r0
   bad42:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bad44:	4620      	mov	r0, r4
   bad46:	f000 ff47 	bl	bbbd8 <__multiply>
   bad4a:	900b      	str	r0, [sp, #44]	; 0x2c
   bad4c:	2800      	cmp	r0, #0
   bad4e:	f43f ae9f 	beq.w	baa90 <_strtod_l+0x490>
   bad52:	9918      	ldr	r1, [sp, #96]	; 0x60
   bad54:	4620      	mov	r0, r4
   bad56:	f000 fe27 	bl	bb9a8 <_Bfree>
   bad5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bad5c:	9318      	str	r3, [sp, #96]	; 0x60
   bad5e:	f1b8 0f00 	cmp.w	r8, #0
   bad62:	f300 808c 	bgt.w	bae7e <_strtod_l+0x87e>
   bad66:	9b06      	ldr	r3, [sp, #24]
   bad68:	2b00      	cmp	r3, #0
   bad6a:	dd08      	ble.n	bad7e <_strtod_l+0x77e>
   bad6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bad6e:	9905      	ldr	r1, [sp, #20]
   bad70:	4620      	mov	r0, r4
   bad72:	f000 ffdb 	bl	bbd2c <__pow5mult>
   bad76:	9005      	str	r0, [sp, #20]
   bad78:	2800      	cmp	r0, #0
   bad7a:	f43f ae89 	beq.w	baa90 <_strtod_l+0x490>
   bad7e:	2f00      	cmp	r7, #0
   bad80:	dd08      	ble.n	bad94 <_strtod_l+0x794>
   bad82:	9905      	ldr	r1, [sp, #20]
   bad84:	463a      	mov	r2, r7
   bad86:	4620      	mov	r0, r4
   bad88:	f001 f82a 	bl	bbde0 <__lshift>
   bad8c:	9005      	str	r0, [sp, #20]
   bad8e:	2800      	cmp	r0, #0
   bad90:	f43f ae7e 	beq.w	baa90 <_strtod_l+0x490>
   bad94:	f1b9 0f00 	cmp.w	r9, #0
   bad98:	dd08      	ble.n	badac <_strtod_l+0x7ac>
   bad9a:	4631      	mov	r1, r6
   bad9c:	464a      	mov	r2, r9
   bad9e:	4620      	mov	r0, r4
   bada0:	f001 f81e 	bl	bbde0 <__lshift>
   bada4:	4606      	mov	r6, r0
   bada6:	2800      	cmp	r0, #0
   bada8:	f43f ae72 	beq.w	baa90 <_strtod_l+0x490>
   badac:	9a05      	ldr	r2, [sp, #20]
   badae:	9918      	ldr	r1, [sp, #96]	; 0x60
   badb0:	4620      	mov	r0, r4
   badb2:	f001 f8a1 	bl	bbef8 <__mdiff>
   badb6:	4605      	mov	r5, r0
   badb8:	2800      	cmp	r0, #0
   badba:	f43f ae69 	beq.w	baa90 <_strtod_l+0x490>
   badbe:	68c3      	ldr	r3, [r0, #12]
   badc0:	930b      	str	r3, [sp, #44]	; 0x2c
   badc2:	2300      	movs	r3, #0
   badc4:	60c3      	str	r3, [r0, #12]
   badc6:	4631      	mov	r1, r6
   badc8:	f001 f87a 	bl	bbec0 <__mcmp>
   badcc:	2800      	cmp	r0, #0
   badce:	da60      	bge.n	bae92 <_strtod_l+0x892>
   badd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   badd2:	ea53 030a 	orrs.w	r3, r3, sl
   badd6:	f040 8082 	bne.w	baede <_strtod_l+0x8de>
   badda:	f3cb 0313 	ubfx	r3, fp, #0, #20
   badde:	2b00      	cmp	r3, #0
   bade0:	d17d      	bne.n	baede <_strtod_l+0x8de>
   bade2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bade6:	0d1b      	lsrs	r3, r3, #20
   bade8:	051b      	lsls	r3, r3, #20
   badea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   badee:	d976      	bls.n	baede <_strtod_l+0x8de>
   badf0:	696b      	ldr	r3, [r5, #20]
   badf2:	b913      	cbnz	r3, badfa <_strtod_l+0x7fa>
   badf4:	692b      	ldr	r3, [r5, #16]
   badf6:	2b01      	cmp	r3, #1
   badf8:	dd71      	ble.n	baede <_strtod_l+0x8de>
   badfa:	4629      	mov	r1, r5
   badfc:	2201      	movs	r2, #1
   badfe:	4620      	mov	r0, r4
   bae00:	f000 ffee 	bl	bbde0 <__lshift>
   bae04:	4631      	mov	r1, r6
   bae06:	4605      	mov	r5, r0
   bae08:	f001 f85a 	bl	bbec0 <__mcmp>
   bae0c:	2800      	cmp	r0, #0
   bae0e:	dd66      	ble.n	baede <_strtod_l+0x8de>
   bae10:	9904      	ldr	r1, [sp, #16]
   bae12:	4a53      	ldr	r2, [pc, #332]	; (baf60 <_strtod_l+0x960>)
   bae14:	465b      	mov	r3, fp
   bae16:	2900      	cmp	r1, #0
   bae18:	f000 8081 	beq.w	baf1e <_strtod_l+0x91e>
   bae1c:	ea02 010b 	and.w	r1, r2, fp
   bae20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bae24:	dc7b      	bgt.n	baf1e <_strtod_l+0x91e>
   bae26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bae2a:	f77f aea9 	ble.w	bab80 <_strtod_l+0x580>
   bae2e:	4b4d      	ldr	r3, [pc, #308]	; (baf64 <_strtod_l+0x964>)
   bae30:	4650      	mov	r0, sl
   bae32:	4659      	mov	r1, fp
   bae34:	2200      	movs	r2, #0
   bae36:	f7fe fc17 	bl	b9668 <__aeabi_dmul>
   bae3a:	460b      	mov	r3, r1
   bae3c:	4303      	orrs	r3, r0
   bae3e:	bf08      	it	eq
   bae40:	2322      	moveq	r3, #34	; 0x22
   bae42:	4682      	mov	sl, r0
   bae44:	468b      	mov	fp, r1
   bae46:	bf08      	it	eq
   bae48:	6023      	streq	r3, [r4, #0]
   bae4a:	e62b      	b.n	baaa4 <_strtod_l+0x4a4>
   bae4c:	f04f 32ff 	mov.w	r2, #4294967295
   bae50:	fa02 f303 	lsl.w	r3, r2, r3
   bae54:	ea03 0a0a 	and.w	sl, r3, sl
   bae58:	e6e3      	b.n	bac22 <_strtod_l+0x622>
   bae5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bae5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bae62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bae66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bae6a:	fa01 f308 	lsl.w	r3, r1, r8
   bae6e:	9308      	str	r3, [sp, #32]
   bae70:	910d      	str	r1, [sp, #52]	; 0x34
   bae72:	e746      	b.n	bad02 <_strtod_l+0x702>
   bae74:	2300      	movs	r3, #0
   bae76:	9308      	str	r3, [sp, #32]
   bae78:	2301      	movs	r3, #1
   bae7a:	930d      	str	r3, [sp, #52]	; 0x34
   bae7c:	e741      	b.n	bad02 <_strtod_l+0x702>
   bae7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bae80:	4642      	mov	r2, r8
   bae82:	4620      	mov	r0, r4
   bae84:	f000 ffac 	bl	bbde0 <__lshift>
   bae88:	9018      	str	r0, [sp, #96]	; 0x60
   bae8a:	2800      	cmp	r0, #0
   bae8c:	f47f af6b 	bne.w	bad66 <_strtod_l+0x766>
   bae90:	e5fe      	b.n	baa90 <_strtod_l+0x490>
   bae92:	465f      	mov	r7, fp
   bae94:	d16e      	bne.n	baf74 <_strtod_l+0x974>
   bae96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bae98:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bae9c:	b342      	cbz	r2, baef0 <_strtod_l+0x8f0>
   bae9e:	4a32      	ldr	r2, [pc, #200]	; (baf68 <_strtod_l+0x968>)
   baea0:	4293      	cmp	r3, r2
   baea2:	d128      	bne.n	baef6 <_strtod_l+0x8f6>
   baea4:	9b04      	ldr	r3, [sp, #16]
   baea6:	4651      	mov	r1, sl
   baea8:	b1eb      	cbz	r3, baee6 <_strtod_l+0x8e6>
   baeaa:	4b2d      	ldr	r3, [pc, #180]	; (baf60 <_strtod_l+0x960>)
   baeac:	403b      	ands	r3, r7
   baeae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   baeb2:	f04f 32ff 	mov.w	r2, #4294967295
   baeb6:	d819      	bhi.n	baeec <_strtod_l+0x8ec>
   baeb8:	0d1b      	lsrs	r3, r3, #20
   baeba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   baebe:	fa02 f303 	lsl.w	r3, r2, r3
   baec2:	4299      	cmp	r1, r3
   baec4:	d117      	bne.n	baef6 <_strtod_l+0x8f6>
   baec6:	4b29      	ldr	r3, [pc, #164]	; (baf6c <_strtod_l+0x96c>)
   baec8:	429f      	cmp	r7, r3
   baeca:	d102      	bne.n	baed2 <_strtod_l+0x8d2>
   baecc:	3101      	adds	r1, #1
   baece:	f43f addf 	beq.w	baa90 <_strtod_l+0x490>
   baed2:	4b23      	ldr	r3, [pc, #140]	; (baf60 <_strtod_l+0x960>)
   baed4:	403b      	ands	r3, r7
   baed6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   baeda:	f04f 0a00 	mov.w	sl, #0
   baede:	9b04      	ldr	r3, [sp, #16]
   baee0:	2b00      	cmp	r3, #0
   baee2:	d1a4      	bne.n	bae2e <_strtod_l+0x82e>
   baee4:	e5de      	b.n	baaa4 <_strtod_l+0x4a4>
   baee6:	f04f 33ff 	mov.w	r3, #4294967295
   baeea:	e7ea      	b.n	baec2 <_strtod_l+0x8c2>
   baeec:	4613      	mov	r3, r2
   baeee:	e7e8      	b.n	baec2 <_strtod_l+0x8c2>
   baef0:	ea53 030a 	orrs.w	r3, r3, sl
   baef4:	d08c      	beq.n	bae10 <_strtod_l+0x810>
   baef6:	9b08      	ldr	r3, [sp, #32]
   baef8:	b1db      	cbz	r3, baf32 <_strtod_l+0x932>
   baefa:	423b      	tst	r3, r7
   baefc:	d0ef      	beq.n	baede <_strtod_l+0x8de>
   baefe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baf00:	9a04      	ldr	r2, [sp, #16]
   baf02:	4650      	mov	r0, sl
   baf04:	4659      	mov	r1, fp
   baf06:	b1c3      	cbz	r3, baf3a <_strtod_l+0x93a>
   baf08:	f7ff fb5b 	bl	ba5c2 <sulp>
   baf0c:	4602      	mov	r2, r0
   baf0e:	460b      	mov	r3, r1
   baf10:	ec51 0b18 	vmov	r0, r1, d8
   baf14:	f7fe f9f2 	bl	b92fc <__adddf3>
   baf18:	4682      	mov	sl, r0
   baf1a:	468b      	mov	fp, r1
   baf1c:	e7df      	b.n	baede <_strtod_l+0x8de>
   baf1e:	4013      	ands	r3, r2
   baf20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   baf24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   baf28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   baf2c:	f04f 3aff 	mov.w	sl, #4294967295
   baf30:	e7d5      	b.n	baede <_strtod_l+0x8de>
   baf32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   baf34:	ea13 0f0a 	tst.w	r3, sl
   baf38:	e7e0      	b.n	baefc <_strtod_l+0x8fc>
   baf3a:	f7ff fb42 	bl	ba5c2 <sulp>
   baf3e:	4602      	mov	r2, r0
   baf40:	460b      	mov	r3, r1
   baf42:	ec51 0b18 	vmov	r0, r1, d8
   baf46:	f7fe f9d7 	bl	b92f8 <__aeabi_dsub>
   baf4a:	2200      	movs	r2, #0
   baf4c:	2300      	movs	r3, #0
   baf4e:	4682      	mov	sl, r0
   baf50:	468b      	mov	fp, r1
   baf52:	f7fe fdf1 	bl	b9b38 <__aeabi_dcmpeq>
   baf56:	2800      	cmp	r0, #0
   baf58:	d0c1      	beq.n	baede <_strtod_l+0x8de>
   baf5a:	e611      	b.n	bab80 <_strtod_l+0x580>
   baf5c:	fffffc02 	.word	0xfffffc02
   baf60:	7ff00000 	.word	0x7ff00000
   baf64:	39500000 	.word	0x39500000
   baf68:	000fffff 	.word	0x000fffff
   baf6c:	7fefffff 	.word	0x7fefffff
   baf70:	000bd330 	.word	0x000bd330
   baf74:	4631      	mov	r1, r6
   baf76:	4628      	mov	r0, r5
   baf78:	f001 f920 	bl	bc1bc <__ratio>
   baf7c:	ec59 8b10 	vmov	r8, r9, d0
   baf80:	ee10 0a10 	vmov	r0, s0
   baf84:	2200      	movs	r2, #0
   baf86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   baf8a:	4649      	mov	r1, r9
   baf8c:	f7fe fde8 	bl	b9b60 <__aeabi_dcmple>
   baf90:	2800      	cmp	r0, #0
   baf92:	d07a      	beq.n	bb08a <_strtod_l+0xa8a>
   baf94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baf96:	2b00      	cmp	r3, #0
   baf98:	d04a      	beq.n	bb030 <_strtod_l+0xa30>
   baf9a:	4b95      	ldr	r3, [pc, #596]	; (bb1f0 <_strtod_l+0xbf0>)
   baf9c:	2200      	movs	r2, #0
   baf9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bafa2:	f8df 924c 	ldr.w	r9, [pc, #588]	; bb1f0 <_strtod_l+0xbf0>
   bafa6:	f04f 0800 	mov.w	r8, #0
   bafaa:	4b92      	ldr	r3, [pc, #584]	; (bb1f4 <_strtod_l+0xbf4>)
   bafac:	403b      	ands	r3, r7
   bafae:	930d      	str	r3, [sp, #52]	; 0x34
   bafb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bafb2:	4b91      	ldr	r3, [pc, #580]	; (bb1f8 <_strtod_l+0xbf8>)
   bafb4:	429a      	cmp	r2, r3
   bafb6:	f040 80b0 	bne.w	bb11a <_strtod_l+0xb1a>
   bafba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bafbe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bafc2:	ec4b ab10 	vmov	d0, sl, fp
   bafc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bafca:	f001 f81f 	bl	bc00c <__ulp>
   bafce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bafd2:	ec53 2b10 	vmov	r2, r3, d0
   bafd6:	f7fe fb47 	bl	b9668 <__aeabi_dmul>
   bafda:	4652      	mov	r2, sl
   bafdc:	465b      	mov	r3, fp
   bafde:	f7fe f98d 	bl	b92fc <__adddf3>
   bafe2:	460b      	mov	r3, r1
   bafe4:	4983      	ldr	r1, [pc, #524]	; (bb1f4 <_strtod_l+0xbf4>)
   bafe6:	4a85      	ldr	r2, [pc, #532]	; (bb1fc <_strtod_l+0xbfc>)
   bafe8:	4019      	ands	r1, r3
   bafea:	4291      	cmp	r1, r2
   bafec:	4682      	mov	sl, r0
   bafee:	d960      	bls.n	bb0b2 <_strtod_l+0xab2>
   baff0:	ee18 3a90 	vmov	r3, s17
   baff4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   baff8:	4293      	cmp	r3, r2
   baffa:	d104      	bne.n	bb006 <_strtod_l+0xa06>
   baffc:	ee18 3a10 	vmov	r3, s16
   bb000:	3301      	adds	r3, #1
   bb002:	f43f ad45 	beq.w	baa90 <_strtod_l+0x490>
   bb006:	f8df b200 	ldr.w	fp, [pc, #512]	; bb208 <_strtod_l+0xc08>
   bb00a:	f04f 3aff 	mov.w	sl, #4294967295
   bb00e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb010:	4620      	mov	r0, r4
   bb012:	f000 fcc9 	bl	bb9a8 <_Bfree>
   bb016:	9905      	ldr	r1, [sp, #20]
   bb018:	4620      	mov	r0, r4
   bb01a:	f000 fcc5 	bl	bb9a8 <_Bfree>
   bb01e:	4631      	mov	r1, r6
   bb020:	4620      	mov	r0, r4
   bb022:	f000 fcc1 	bl	bb9a8 <_Bfree>
   bb026:	4629      	mov	r1, r5
   bb028:	4620      	mov	r0, r4
   bb02a:	f000 fcbd 	bl	bb9a8 <_Bfree>
   bb02e:	e61a      	b.n	bac66 <_strtod_l+0x666>
   bb030:	f1ba 0f00 	cmp.w	sl, #0
   bb034:	d11b      	bne.n	bb06e <_strtod_l+0xa6e>
   bb036:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb03a:	b9f3      	cbnz	r3, bb07a <_strtod_l+0xa7a>
   bb03c:	4b6c      	ldr	r3, [pc, #432]	; (bb1f0 <_strtod_l+0xbf0>)
   bb03e:	2200      	movs	r2, #0
   bb040:	4640      	mov	r0, r8
   bb042:	4649      	mov	r1, r9
   bb044:	f7fe fd82 	bl	b9b4c <__aeabi_dcmplt>
   bb048:	b9d0      	cbnz	r0, bb080 <_strtod_l+0xa80>
   bb04a:	4640      	mov	r0, r8
   bb04c:	4649      	mov	r1, r9
   bb04e:	4b6c      	ldr	r3, [pc, #432]	; (bb200 <_strtod_l+0xc00>)
   bb050:	2200      	movs	r2, #0
   bb052:	f7fe fb09 	bl	b9668 <__aeabi_dmul>
   bb056:	4680      	mov	r8, r0
   bb058:	4689      	mov	r9, r1
   bb05a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bb05e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bb062:	9315      	str	r3, [sp, #84]	; 0x54
   bb064:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bb068:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb06c:	e79d      	b.n	bafaa <_strtod_l+0x9aa>
   bb06e:	f1ba 0f01 	cmp.w	sl, #1
   bb072:	d102      	bne.n	bb07a <_strtod_l+0xa7a>
   bb074:	2f00      	cmp	r7, #0
   bb076:	f43f ad83 	beq.w	bab80 <_strtod_l+0x580>
   bb07a:	4b62      	ldr	r3, [pc, #392]	; (bb204 <_strtod_l+0xc04>)
   bb07c:	2200      	movs	r2, #0
   bb07e:	e78e      	b.n	baf9e <_strtod_l+0x99e>
   bb080:	f8df 917c 	ldr.w	r9, [pc, #380]	; bb200 <_strtod_l+0xc00>
   bb084:	f04f 0800 	mov.w	r8, #0
   bb088:	e7e7      	b.n	bb05a <_strtod_l+0xa5a>
   bb08a:	4b5d      	ldr	r3, [pc, #372]	; (bb200 <_strtod_l+0xc00>)
   bb08c:	4640      	mov	r0, r8
   bb08e:	4649      	mov	r1, r9
   bb090:	2200      	movs	r2, #0
   bb092:	f7fe fae9 	bl	b9668 <__aeabi_dmul>
   bb096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb098:	4680      	mov	r8, r0
   bb09a:	4689      	mov	r9, r1
   bb09c:	b933      	cbnz	r3, bb0ac <_strtod_l+0xaac>
   bb09e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb0a2:	900e      	str	r0, [sp, #56]	; 0x38
   bb0a4:	930f      	str	r3, [sp, #60]	; 0x3c
   bb0a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bb0aa:	e7dd      	b.n	bb068 <_strtod_l+0xa68>
   bb0ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bb0b0:	e7f9      	b.n	bb0a6 <_strtod_l+0xaa6>
   bb0b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bb0b6:	9b04      	ldr	r3, [sp, #16]
   bb0b8:	2b00      	cmp	r3, #0
   bb0ba:	d1a8      	bne.n	bb00e <_strtod_l+0xa0e>
   bb0bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb0c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb0c2:	0d1b      	lsrs	r3, r3, #20
   bb0c4:	051b      	lsls	r3, r3, #20
   bb0c6:	429a      	cmp	r2, r3
   bb0c8:	d1a1      	bne.n	bb00e <_strtod_l+0xa0e>
   bb0ca:	4640      	mov	r0, r8
   bb0cc:	4649      	mov	r1, r9
   bb0ce:	f001 f909 	bl	bc2e4 <__aeabi_d2lz>
   bb0d2:	f7fe fa9b 	bl	b960c <__aeabi_l2d>
   bb0d6:	4602      	mov	r2, r0
   bb0d8:	460b      	mov	r3, r1
   bb0da:	4640      	mov	r0, r8
   bb0dc:	4649      	mov	r1, r9
   bb0de:	f7fe f90b 	bl	b92f8 <__aeabi_dsub>
   bb0e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb0e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb0e8:	ea43 030a 	orr.w	r3, r3, sl
   bb0ec:	4313      	orrs	r3, r2
   bb0ee:	4680      	mov	r8, r0
   bb0f0:	4689      	mov	r9, r1
   bb0f2:	d055      	beq.n	bb1a0 <_strtod_l+0xba0>
   bb0f4:	a336      	add	r3, pc, #216	; (adr r3, bb1d0 <_strtod_l+0xbd0>)
   bb0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb0fa:	f7fe fd27 	bl	b9b4c <__aeabi_dcmplt>
   bb0fe:	2800      	cmp	r0, #0
   bb100:	f47f acd0 	bne.w	baaa4 <_strtod_l+0x4a4>
   bb104:	a334      	add	r3, pc, #208	; (adr r3, bb1d8 <_strtod_l+0xbd8>)
   bb106:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb10a:	4640      	mov	r0, r8
   bb10c:	4649      	mov	r1, r9
   bb10e:	f7fe fd3b 	bl	b9b88 <__aeabi_dcmpgt>
   bb112:	2800      	cmp	r0, #0
   bb114:	f43f af7b 	beq.w	bb00e <_strtod_l+0xa0e>
   bb118:	e4c4      	b.n	baaa4 <_strtod_l+0x4a4>
   bb11a:	9b04      	ldr	r3, [sp, #16]
   bb11c:	b333      	cbz	r3, bb16c <_strtod_l+0xb6c>
   bb11e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb120:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb124:	d822      	bhi.n	bb16c <_strtod_l+0xb6c>
   bb126:	a32e      	add	r3, pc, #184	; (adr r3, bb1e0 <_strtod_l+0xbe0>)
   bb128:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb12c:	4640      	mov	r0, r8
   bb12e:	4649      	mov	r1, r9
   bb130:	f7fe fd16 	bl	b9b60 <__aeabi_dcmple>
   bb134:	b1a0      	cbz	r0, bb160 <_strtod_l+0xb60>
   bb136:	4649      	mov	r1, r9
   bb138:	4640      	mov	r0, r8
   bb13a:	f7fe fd6d 	bl	b9c18 <__aeabi_d2uiz>
   bb13e:	2801      	cmp	r0, #1
   bb140:	bf38      	it	cc
   bb142:	2001      	movcc	r0, #1
   bb144:	f7fe fa16 	bl	b9574 <__aeabi_ui2d>
   bb148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb14a:	4680      	mov	r8, r0
   bb14c:	4689      	mov	r9, r1
   bb14e:	bb23      	cbnz	r3, bb19a <_strtod_l+0xb9a>
   bb150:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb154:	9010      	str	r0, [sp, #64]	; 0x40
   bb156:	9311      	str	r3, [sp, #68]	; 0x44
   bb158:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bb15c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb160:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bb162:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb164:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bb168:	1a9b      	subs	r3, r3, r2
   bb16a:	9309      	str	r3, [sp, #36]	; 0x24
   bb16c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb170:	eeb0 0a48 	vmov.f32	s0, s16
   bb174:	eef0 0a68 	vmov.f32	s1, s17
   bb178:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb17c:	f000 ff46 	bl	bc00c <__ulp>
   bb180:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb184:	ec53 2b10 	vmov	r2, r3, d0
   bb188:	f7fe fa6e 	bl	b9668 <__aeabi_dmul>
   bb18c:	ec53 2b18 	vmov	r2, r3, d8
   bb190:	f7fe f8b4 	bl	b92fc <__adddf3>
   bb194:	4682      	mov	sl, r0
   bb196:	468b      	mov	fp, r1
   bb198:	e78d      	b.n	bb0b6 <_strtod_l+0xab6>
   bb19a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bb19e:	e7db      	b.n	bb158 <_strtod_l+0xb58>
   bb1a0:	a311      	add	r3, pc, #68	; (adr r3, bb1e8 <_strtod_l+0xbe8>)
   bb1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb1a6:	f7fe fcd1 	bl	b9b4c <__aeabi_dcmplt>
   bb1aa:	e7b2      	b.n	bb112 <_strtod_l+0xb12>
   bb1ac:	2300      	movs	r3, #0
   bb1ae:	930a      	str	r3, [sp, #40]	; 0x28
   bb1b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb1b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb1b4:	6013      	str	r3, [r2, #0]
   bb1b6:	f7ff ba6b 	b.w	ba690 <_strtod_l+0x90>
   bb1ba:	2a65      	cmp	r2, #101	; 0x65
   bb1bc:	f43f ab5f 	beq.w	ba87e <_strtod_l+0x27e>
   bb1c0:	2a45      	cmp	r2, #69	; 0x45
   bb1c2:	f43f ab5c 	beq.w	ba87e <_strtod_l+0x27e>
   bb1c6:	2301      	movs	r3, #1
   bb1c8:	f7ff bb94 	b.w	ba8f4 <_strtod_l+0x2f4>
   bb1cc:	f3af 8000 	nop.w
   bb1d0:	94a03595 	.word	0x94a03595
   bb1d4:	3fdfffff 	.word	0x3fdfffff
   bb1d8:	35afe535 	.word	0x35afe535
   bb1dc:	3fe00000 	.word	0x3fe00000
   bb1e0:	ffc00000 	.word	0xffc00000
   bb1e4:	41dfffff 	.word	0x41dfffff
   bb1e8:	94a03595 	.word	0x94a03595
   bb1ec:	3fcfffff 	.word	0x3fcfffff
   bb1f0:	3ff00000 	.word	0x3ff00000
   bb1f4:	7ff00000 	.word	0x7ff00000
   bb1f8:	7fe00000 	.word	0x7fe00000
   bb1fc:	7c9fffff 	.word	0x7c9fffff
   bb200:	3fe00000 	.word	0x3fe00000
   bb204:	bff00000 	.word	0xbff00000
   bb208:	7fefffff 	.word	0x7fefffff

000bb20c <strtod>:
   bb20c:	460a      	mov	r2, r1
   bb20e:	4601      	mov	r1, r0
   bb210:	4802      	ldr	r0, [pc, #8]	; (bb21c <strtod+0x10>)
   bb212:	4b03      	ldr	r3, [pc, #12]	; (bb220 <strtod+0x14>)
   bb214:	6800      	ldr	r0, [r0, #0]
   bb216:	f7ff b9f3 	b.w	ba600 <_strtod_l>
   bb21a:	bf00      	nop
   bb21c:	2003e030 	.word	0x2003e030
   bb220:	2003e098 	.word	0x2003e098

000bb224 <rshift>:
   bb224:	6903      	ldr	r3, [r0, #16]
   bb226:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bb22a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb22e:	ea4f 1261 	mov.w	r2, r1, asr #5
   bb232:	f100 0414 	add.w	r4, r0, #20
   bb236:	dd45      	ble.n	bb2c4 <rshift+0xa0>
   bb238:	f011 011f 	ands.w	r1, r1, #31
   bb23c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bb240:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bb244:	d10c      	bne.n	bb260 <rshift+0x3c>
   bb246:	f100 0710 	add.w	r7, r0, #16
   bb24a:	4629      	mov	r1, r5
   bb24c:	42b1      	cmp	r1, r6
   bb24e:	d334      	bcc.n	bb2ba <rshift+0x96>
   bb250:	1a9b      	subs	r3, r3, r2
   bb252:	009b      	lsls	r3, r3, #2
   bb254:	1eea      	subs	r2, r5, #3
   bb256:	4296      	cmp	r6, r2
   bb258:	bf38      	it	cc
   bb25a:	2300      	movcc	r3, #0
   bb25c:	4423      	add	r3, r4
   bb25e:	e015      	b.n	bb28c <rshift+0x68>
   bb260:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bb264:	f1c1 0820 	rsb	r8, r1, #32
   bb268:	40cf      	lsrs	r7, r1
   bb26a:	f105 0e04 	add.w	lr, r5, #4
   bb26e:	46a1      	mov	r9, r4
   bb270:	4576      	cmp	r6, lr
   bb272:	46f4      	mov	ip, lr
   bb274:	d815      	bhi.n	bb2a2 <rshift+0x7e>
   bb276:	1a9a      	subs	r2, r3, r2
   bb278:	0092      	lsls	r2, r2, #2
   bb27a:	3a04      	subs	r2, #4
   bb27c:	3501      	adds	r5, #1
   bb27e:	42ae      	cmp	r6, r5
   bb280:	bf38      	it	cc
   bb282:	2200      	movcc	r2, #0
   bb284:	18a3      	adds	r3, r4, r2
   bb286:	50a7      	str	r7, [r4, r2]
   bb288:	b107      	cbz	r7, bb28c <rshift+0x68>
   bb28a:	3304      	adds	r3, #4
   bb28c:	1b1a      	subs	r2, r3, r4
   bb28e:	42a3      	cmp	r3, r4
   bb290:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bb294:	bf08      	it	eq
   bb296:	2300      	moveq	r3, #0
   bb298:	6102      	str	r2, [r0, #16]
   bb29a:	bf08      	it	eq
   bb29c:	6143      	streq	r3, [r0, #20]
   bb29e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb2a2:	f8dc c000 	ldr.w	ip, [ip]
   bb2a6:	fa0c fc08 	lsl.w	ip, ip, r8
   bb2aa:	ea4c 0707 	orr.w	r7, ip, r7
   bb2ae:	f849 7b04 	str.w	r7, [r9], #4
   bb2b2:	f85e 7b04 	ldr.w	r7, [lr], #4
   bb2b6:	40cf      	lsrs	r7, r1
   bb2b8:	e7da      	b.n	bb270 <rshift+0x4c>
   bb2ba:	f851 cb04 	ldr.w	ip, [r1], #4
   bb2be:	f847 cf04 	str.w	ip, [r7, #4]!
   bb2c2:	e7c3      	b.n	bb24c <rshift+0x28>
   bb2c4:	4623      	mov	r3, r4
   bb2c6:	e7e1      	b.n	bb28c <rshift+0x68>

000bb2c8 <__hexdig_fun>:
   bb2c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb2cc:	2b09      	cmp	r3, #9
   bb2ce:	d802      	bhi.n	bb2d6 <__hexdig_fun+0xe>
   bb2d0:	3820      	subs	r0, #32
   bb2d2:	b2c0      	uxtb	r0, r0
   bb2d4:	4770      	bx	lr
   bb2d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bb2da:	2b05      	cmp	r3, #5
   bb2dc:	d801      	bhi.n	bb2e2 <__hexdig_fun+0x1a>
   bb2de:	3847      	subs	r0, #71	; 0x47
   bb2e0:	e7f7      	b.n	bb2d2 <__hexdig_fun+0xa>
   bb2e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bb2e6:	2b05      	cmp	r3, #5
   bb2e8:	d801      	bhi.n	bb2ee <__hexdig_fun+0x26>
   bb2ea:	3827      	subs	r0, #39	; 0x27
   bb2ec:	e7f1      	b.n	bb2d2 <__hexdig_fun+0xa>
   bb2ee:	2000      	movs	r0, #0
   bb2f0:	4770      	bx	lr
	...

000bb2f4 <__gethex>:
   bb2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb2f8:	ed2d 8b02 	vpush	{d8}
   bb2fc:	b089      	sub	sp, #36	; 0x24
   bb2fe:	ee08 0a10 	vmov	s16, r0
   bb302:	9304      	str	r3, [sp, #16]
   bb304:	4bb4      	ldr	r3, [pc, #720]	; (bb5d8 <__gethex+0x2e4>)
   bb306:	681b      	ldr	r3, [r3, #0]
   bb308:	9301      	str	r3, [sp, #4]
   bb30a:	4618      	mov	r0, r3
   bb30c:	468b      	mov	fp, r1
   bb30e:	4690      	mov	r8, r2
   bb310:	f7ff f906 	bl	ba520 <strlen>
   bb314:	9b01      	ldr	r3, [sp, #4]
   bb316:	f8db 2000 	ldr.w	r2, [fp]
   bb31a:	4403      	add	r3, r0
   bb31c:	4682      	mov	sl, r0
   bb31e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bb322:	9305      	str	r3, [sp, #20]
   bb324:	1c93      	adds	r3, r2, #2
   bb326:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bb32a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bb32e:	32fe      	adds	r2, #254	; 0xfe
   bb330:	18d1      	adds	r1, r2, r3
   bb332:	461f      	mov	r7, r3
   bb334:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb338:	9100      	str	r1, [sp, #0]
   bb33a:	2830      	cmp	r0, #48	; 0x30
   bb33c:	d0f8      	beq.n	bb330 <__gethex+0x3c>
   bb33e:	f7ff ffc3 	bl	bb2c8 <__hexdig_fun>
   bb342:	4604      	mov	r4, r0
   bb344:	2800      	cmp	r0, #0
   bb346:	d13a      	bne.n	bb3be <__gethex+0xca>
   bb348:	9901      	ldr	r1, [sp, #4]
   bb34a:	4652      	mov	r2, sl
   bb34c:	4638      	mov	r0, r7
   bb34e:	f7ff f911 	bl	ba574 <strncmp>
   bb352:	4605      	mov	r5, r0
   bb354:	2800      	cmp	r0, #0
   bb356:	d168      	bne.n	bb42a <__gethex+0x136>
   bb358:	f817 000a 	ldrb.w	r0, [r7, sl]
   bb35c:	eb07 060a 	add.w	r6, r7, sl
   bb360:	f7ff ffb2 	bl	bb2c8 <__hexdig_fun>
   bb364:	2800      	cmp	r0, #0
   bb366:	d062      	beq.n	bb42e <__gethex+0x13a>
   bb368:	4633      	mov	r3, r6
   bb36a:	7818      	ldrb	r0, [r3, #0]
   bb36c:	2830      	cmp	r0, #48	; 0x30
   bb36e:	461f      	mov	r7, r3
   bb370:	f103 0301 	add.w	r3, r3, #1
   bb374:	d0f9      	beq.n	bb36a <__gethex+0x76>
   bb376:	f7ff ffa7 	bl	bb2c8 <__hexdig_fun>
   bb37a:	2301      	movs	r3, #1
   bb37c:	fab0 f480 	clz	r4, r0
   bb380:	0964      	lsrs	r4, r4, #5
   bb382:	4635      	mov	r5, r6
   bb384:	9300      	str	r3, [sp, #0]
   bb386:	463a      	mov	r2, r7
   bb388:	4616      	mov	r6, r2
   bb38a:	3201      	adds	r2, #1
   bb38c:	7830      	ldrb	r0, [r6, #0]
   bb38e:	f7ff ff9b 	bl	bb2c8 <__hexdig_fun>
   bb392:	2800      	cmp	r0, #0
   bb394:	d1f8      	bne.n	bb388 <__gethex+0x94>
   bb396:	9901      	ldr	r1, [sp, #4]
   bb398:	4652      	mov	r2, sl
   bb39a:	4630      	mov	r0, r6
   bb39c:	f7ff f8ea 	bl	ba574 <strncmp>
   bb3a0:	b980      	cbnz	r0, bb3c4 <__gethex+0xd0>
   bb3a2:	b94d      	cbnz	r5, bb3b8 <__gethex+0xc4>
   bb3a4:	eb06 050a 	add.w	r5, r6, sl
   bb3a8:	462a      	mov	r2, r5
   bb3aa:	4616      	mov	r6, r2
   bb3ac:	3201      	adds	r2, #1
   bb3ae:	7830      	ldrb	r0, [r6, #0]
   bb3b0:	f7ff ff8a 	bl	bb2c8 <__hexdig_fun>
   bb3b4:	2800      	cmp	r0, #0
   bb3b6:	d1f8      	bne.n	bb3aa <__gethex+0xb6>
   bb3b8:	1bad      	subs	r5, r5, r6
   bb3ba:	00ad      	lsls	r5, r5, #2
   bb3bc:	e004      	b.n	bb3c8 <__gethex+0xd4>
   bb3be:	2400      	movs	r4, #0
   bb3c0:	4625      	mov	r5, r4
   bb3c2:	e7e0      	b.n	bb386 <__gethex+0x92>
   bb3c4:	2d00      	cmp	r5, #0
   bb3c6:	d1f7      	bne.n	bb3b8 <__gethex+0xc4>
   bb3c8:	7833      	ldrb	r3, [r6, #0]
   bb3ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb3ce:	2b50      	cmp	r3, #80	; 0x50
   bb3d0:	d13b      	bne.n	bb44a <__gethex+0x156>
   bb3d2:	7873      	ldrb	r3, [r6, #1]
   bb3d4:	2b2b      	cmp	r3, #43	; 0x2b
   bb3d6:	d02c      	beq.n	bb432 <__gethex+0x13e>
   bb3d8:	2b2d      	cmp	r3, #45	; 0x2d
   bb3da:	d02e      	beq.n	bb43a <__gethex+0x146>
   bb3dc:	1c71      	adds	r1, r6, #1
   bb3de:	f04f 0900 	mov.w	r9, #0
   bb3e2:	7808      	ldrb	r0, [r1, #0]
   bb3e4:	f7ff ff70 	bl	bb2c8 <__hexdig_fun>
   bb3e8:	1e43      	subs	r3, r0, #1
   bb3ea:	b2db      	uxtb	r3, r3
   bb3ec:	2b18      	cmp	r3, #24
   bb3ee:	d82c      	bhi.n	bb44a <__gethex+0x156>
   bb3f0:	f1a0 0210 	sub.w	r2, r0, #16
   bb3f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bb3f8:	f7ff ff66 	bl	bb2c8 <__hexdig_fun>
   bb3fc:	1e43      	subs	r3, r0, #1
   bb3fe:	b2db      	uxtb	r3, r3
   bb400:	2b18      	cmp	r3, #24
   bb402:	d91d      	bls.n	bb440 <__gethex+0x14c>
   bb404:	f1b9 0f00 	cmp.w	r9, #0
   bb408:	d000      	beq.n	bb40c <__gethex+0x118>
   bb40a:	4252      	negs	r2, r2
   bb40c:	4415      	add	r5, r2
   bb40e:	f8cb 1000 	str.w	r1, [fp]
   bb412:	b1e4      	cbz	r4, bb44e <__gethex+0x15a>
   bb414:	9b00      	ldr	r3, [sp, #0]
   bb416:	2b00      	cmp	r3, #0
   bb418:	bf14      	ite	ne
   bb41a:	2700      	movne	r7, #0
   bb41c:	2706      	moveq	r7, #6
   bb41e:	4638      	mov	r0, r7
   bb420:	b009      	add	sp, #36	; 0x24
   bb422:	ecbd 8b02 	vpop	{d8}
   bb426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb42a:	463e      	mov	r6, r7
   bb42c:	4625      	mov	r5, r4
   bb42e:	2401      	movs	r4, #1
   bb430:	e7ca      	b.n	bb3c8 <__gethex+0xd4>
   bb432:	f04f 0900 	mov.w	r9, #0
   bb436:	1cb1      	adds	r1, r6, #2
   bb438:	e7d3      	b.n	bb3e2 <__gethex+0xee>
   bb43a:	f04f 0901 	mov.w	r9, #1
   bb43e:	e7fa      	b.n	bb436 <__gethex+0x142>
   bb440:	230a      	movs	r3, #10
   bb442:	fb03 0202 	mla	r2, r3, r2, r0
   bb446:	3a10      	subs	r2, #16
   bb448:	e7d4      	b.n	bb3f4 <__gethex+0x100>
   bb44a:	4631      	mov	r1, r6
   bb44c:	e7df      	b.n	bb40e <__gethex+0x11a>
   bb44e:	1bf3      	subs	r3, r6, r7
   bb450:	3b01      	subs	r3, #1
   bb452:	4621      	mov	r1, r4
   bb454:	2b07      	cmp	r3, #7
   bb456:	dc0b      	bgt.n	bb470 <__gethex+0x17c>
   bb458:	ee18 0a10 	vmov	r0, s16
   bb45c:	f000 fa64 	bl	bb928 <_Balloc>
   bb460:	4604      	mov	r4, r0
   bb462:	b940      	cbnz	r0, bb476 <__gethex+0x182>
   bb464:	4b5d      	ldr	r3, [pc, #372]	; (bb5dc <__gethex+0x2e8>)
   bb466:	4602      	mov	r2, r0
   bb468:	21de      	movs	r1, #222	; 0xde
   bb46a:	485d      	ldr	r0, [pc, #372]	; (bb5e0 <__gethex+0x2ec>)
   bb46c:	f7fc f98e 	bl	b778c <__assert_func>
   bb470:	3101      	adds	r1, #1
   bb472:	105b      	asrs	r3, r3, #1
   bb474:	e7ee      	b.n	bb454 <__gethex+0x160>
   bb476:	f100 0914 	add.w	r9, r0, #20
   bb47a:	f04f 0b00 	mov.w	fp, #0
   bb47e:	f1ca 0301 	rsb	r3, sl, #1
   bb482:	f8cd 9008 	str.w	r9, [sp, #8]
   bb486:	f8cd b000 	str.w	fp, [sp]
   bb48a:	9306      	str	r3, [sp, #24]
   bb48c:	42b7      	cmp	r7, r6
   bb48e:	d340      	bcc.n	bb512 <__gethex+0x21e>
   bb490:	9802      	ldr	r0, [sp, #8]
   bb492:	9b00      	ldr	r3, [sp, #0]
   bb494:	f840 3b04 	str.w	r3, [r0], #4
   bb498:	eba0 0009 	sub.w	r0, r0, r9
   bb49c:	1080      	asrs	r0, r0, #2
   bb49e:	0146      	lsls	r6, r0, #5
   bb4a0:	6120      	str	r0, [r4, #16]
   bb4a2:	4618      	mov	r0, r3
   bb4a4:	f000 fb32 	bl	bbb0c <__hi0bits>
   bb4a8:	1a30      	subs	r0, r6, r0
   bb4aa:	f8d8 6000 	ldr.w	r6, [r8]
   bb4ae:	42b0      	cmp	r0, r6
   bb4b0:	dd63      	ble.n	bb57a <__gethex+0x286>
   bb4b2:	1b87      	subs	r7, r0, r6
   bb4b4:	4639      	mov	r1, r7
   bb4b6:	4620      	mov	r0, r4
   bb4b8:	f000 fed6 	bl	bc268 <__any_on>
   bb4bc:	4682      	mov	sl, r0
   bb4be:	b1a8      	cbz	r0, bb4ec <__gethex+0x1f8>
   bb4c0:	1e7b      	subs	r3, r7, #1
   bb4c2:	1159      	asrs	r1, r3, #5
   bb4c4:	f003 021f 	and.w	r2, r3, #31
   bb4c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bb4cc:	f04f 0a01 	mov.w	sl, #1
   bb4d0:	fa0a f202 	lsl.w	r2, sl, r2
   bb4d4:	420a      	tst	r2, r1
   bb4d6:	d009      	beq.n	bb4ec <__gethex+0x1f8>
   bb4d8:	4553      	cmp	r3, sl
   bb4da:	dd05      	ble.n	bb4e8 <__gethex+0x1f4>
   bb4dc:	1eb9      	subs	r1, r7, #2
   bb4de:	4620      	mov	r0, r4
   bb4e0:	f000 fec2 	bl	bc268 <__any_on>
   bb4e4:	2800      	cmp	r0, #0
   bb4e6:	d145      	bne.n	bb574 <__gethex+0x280>
   bb4e8:	f04f 0a02 	mov.w	sl, #2
   bb4ec:	4639      	mov	r1, r7
   bb4ee:	4620      	mov	r0, r4
   bb4f0:	f7ff fe98 	bl	bb224 <rshift>
   bb4f4:	443d      	add	r5, r7
   bb4f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb4fa:	42ab      	cmp	r3, r5
   bb4fc:	da4c      	bge.n	bb598 <__gethex+0x2a4>
   bb4fe:	ee18 0a10 	vmov	r0, s16
   bb502:	4621      	mov	r1, r4
   bb504:	f000 fa50 	bl	bb9a8 <_Bfree>
   bb508:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb50a:	2300      	movs	r3, #0
   bb50c:	6013      	str	r3, [r2, #0]
   bb50e:	27a3      	movs	r7, #163	; 0xa3
   bb510:	e785      	b.n	bb41e <__gethex+0x12a>
   bb512:	1e73      	subs	r3, r6, #1
   bb514:	9a05      	ldr	r2, [sp, #20]
   bb516:	9303      	str	r3, [sp, #12]
   bb518:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bb51c:	4293      	cmp	r3, r2
   bb51e:	d019      	beq.n	bb554 <__gethex+0x260>
   bb520:	f1bb 0f20 	cmp.w	fp, #32
   bb524:	d107      	bne.n	bb536 <__gethex+0x242>
   bb526:	9b02      	ldr	r3, [sp, #8]
   bb528:	9a00      	ldr	r2, [sp, #0]
   bb52a:	f843 2b04 	str.w	r2, [r3], #4
   bb52e:	9302      	str	r3, [sp, #8]
   bb530:	2300      	movs	r3, #0
   bb532:	9300      	str	r3, [sp, #0]
   bb534:	469b      	mov	fp, r3
   bb536:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bb53a:	f7ff fec5 	bl	bb2c8 <__hexdig_fun>
   bb53e:	9b00      	ldr	r3, [sp, #0]
   bb540:	f000 000f 	and.w	r0, r0, #15
   bb544:	fa00 f00b 	lsl.w	r0, r0, fp
   bb548:	4303      	orrs	r3, r0
   bb54a:	9300      	str	r3, [sp, #0]
   bb54c:	f10b 0b04 	add.w	fp, fp, #4
   bb550:	9b03      	ldr	r3, [sp, #12]
   bb552:	e00d      	b.n	bb570 <__gethex+0x27c>
   bb554:	9b03      	ldr	r3, [sp, #12]
   bb556:	9a06      	ldr	r2, [sp, #24]
   bb558:	4413      	add	r3, r2
   bb55a:	42bb      	cmp	r3, r7
   bb55c:	d3e0      	bcc.n	bb520 <__gethex+0x22c>
   bb55e:	4618      	mov	r0, r3
   bb560:	9901      	ldr	r1, [sp, #4]
   bb562:	9307      	str	r3, [sp, #28]
   bb564:	4652      	mov	r2, sl
   bb566:	f7ff f805 	bl	ba574 <strncmp>
   bb56a:	9b07      	ldr	r3, [sp, #28]
   bb56c:	2800      	cmp	r0, #0
   bb56e:	d1d7      	bne.n	bb520 <__gethex+0x22c>
   bb570:	461e      	mov	r6, r3
   bb572:	e78b      	b.n	bb48c <__gethex+0x198>
   bb574:	f04f 0a03 	mov.w	sl, #3
   bb578:	e7b8      	b.n	bb4ec <__gethex+0x1f8>
   bb57a:	da0a      	bge.n	bb592 <__gethex+0x29e>
   bb57c:	1a37      	subs	r7, r6, r0
   bb57e:	4621      	mov	r1, r4
   bb580:	ee18 0a10 	vmov	r0, s16
   bb584:	463a      	mov	r2, r7
   bb586:	f000 fc2b 	bl	bbde0 <__lshift>
   bb58a:	1bed      	subs	r5, r5, r7
   bb58c:	4604      	mov	r4, r0
   bb58e:	f100 0914 	add.w	r9, r0, #20
   bb592:	f04f 0a00 	mov.w	sl, #0
   bb596:	e7ae      	b.n	bb4f6 <__gethex+0x202>
   bb598:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bb59c:	42a8      	cmp	r0, r5
   bb59e:	dd72      	ble.n	bb686 <__gethex+0x392>
   bb5a0:	1b45      	subs	r5, r0, r5
   bb5a2:	42ae      	cmp	r6, r5
   bb5a4:	dc36      	bgt.n	bb614 <__gethex+0x320>
   bb5a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb5aa:	2b02      	cmp	r3, #2
   bb5ac:	d02a      	beq.n	bb604 <__gethex+0x310>
   bb5ae:	2b03      	cmp	r3, #3
   bb5b0:	d02c      	beq.n	bb60c <__gethex+0x318>
   bb5b2:	2b01      	cmp	r3, #1
   bb5b4:	d11c      	bne.n	bb5f0 <__gethex+0x2fc>
   bb5b6:	42ae      	cmp	r6, r5
   bb5b8:	d11a      	bne.n	bb5f0 <__gethex+0x2fc>
   bb5ba:	2e01      	cmp	r6, #1
   bb5bc:	d112      	bne.n	bb5e4 <__gethex+0x2f0>
   bb5be:	9a04      	ldr	r2, [sp, #16]
   bb5c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb5c4:	6013      	str	r3, [r2, #0]
   bb5c6:	2301      	movs	r3, #1
   bb5c8:	6123      	str	r3, [r4, #16]
   bb5ca:	f8c9 3000 	str.w	r3, [r9]
   bb5ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb5d0:	2762      	movs	r7, #98	; 0x62
   bb5d2:	601c      	str	r4, [r3, #0]
   bb5d4:	e723      	b.n	bb41e <__gethex+0x12a>
   bb5d6:	bf00      	nop
   bb5d8:	000bd4f0 	.word	0x000bd4f0
   bb5dc:	000bd459 	.word	0x000bd459
   bb5e0:	000bd46a 	.word	0x000bd46a
   bb5e4:	1e71      	subs	r1, r6, #1
   bb5e6:	4620      	mov	r0, r4
   bb5e8:	f000 fe3e 	bl	bc268 <__any_on>
   bb5ec:	2800      	cmp	r0, #0
   bb5ee:	d1e6      	bne.n	bb5be <__gethex+0x2ca>
   bb5f0:	ee18 0a10 	vmov	r0, s16
   bb5f4:	4621      	mov	r1, r4
   bb5f6:	f000 f9d7 	bl	bb9a8 <_Bfree>
   bb5fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb5fc:	2300      	movs	r3, #0
   bb5fe:	6013      	str	r3, [r2, #0]
   bb600:	2750      	movs	r7, #80	; 0x50
   bb602:	e70c      	b.n	bb41e <__gethex+0x12a>
   bb604:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb606:	2b00      	cmp	r3, #0
   bb608:	d1f2      	bne.n	bb5f0 <__gethex+0x2fc>
   bb60a:	e7d8      	b.n	bb5be <__gethex+0x2ca>
   bb60c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb60e:	2b00      	cmp	r3, #0
   bb610:	d1d5      	bne.n	bb5be <__gethex+0x2ca>
   bb612:	e7ed      	b.n	bb5f0 <__gethex+0x2fc>
   bb614:	1e6f      	subs	r7, r5, #1
   bb616:	f1ba 0f00 	cmp.w	sl, #0
   bb61a:	d131      	bne.n	bb680 <__gethex+0x38c>
   bb61c:	b127      	cbz	r7, bb628 <__gethex+0x334>
   bb61e:	4639      	mov	r1, r7
   bb620:	4620      	mov	r0, r4
   bb622:	f000 fe21 	bl	bc268 <__any_on>
   bb626:	4682      	mov	sl, r0
   bb628:	117b      	asrs	r3, r7, #5
   bb62a:	2101      	movs	r1, #1
   bb62c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bb630:	f007 071f 	and.w	r7, r7, #31
   bb634:	fa01 f707 	lsl.w	r7, r1, r7
   bb638:	421f      	tst	r7, r3
   bb63a:	4629      	mov	r1, r5
   bb63c:	4620      	mov	r0, r4
   bb63e:	bf18      	it	ne
   bb640:	f04a 0a02 	orrne.w	sl, sl, #2
   bb644:	1b76      	subs	r6, r6, r5
   bb646:	f7ff fded 	bl	bb224 <rshift>
   bb64a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bb64e:	2702      	movs	r7, #2
   bb650:	f1ba 0f00 	cmp.w	sl, #0
   bb654:	d048      	beq.n	bb6e8 <__gethex+0x3f4>
   bb656:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb65a:	2b02      	cmp	r3, #2
   bb65c:	d015      	beq.n	bb68a <__gethex+0x396>
   bb65e:	2b03      	cmp	r3, #3
   bb660:	d017      	beq.n	bb692 <__gethex+0x39e>
   bb662:	2b01      	cmp	r3, #1
   bb664:	d109      	bne.n	bb67a <__gethex+0x386>
   bb666:	f01a 0f02 	tst.w	sl, #2
   bb66a:	d006      	beq.n	bb67a <__gethex+0x386>
   bb66c:	f8d9 0000 	ldr.w	r0, [r9]
   bb670:	ea4a 0a00 	orr.w	sl, sl, r0
   bb674:	f01a 0f01 	tst.w	sl, #1
   bb678:	d10e      	bne.n	bb698 <__gethex+0x3a4>
   bb67a:	f047 0710 	orr.w	r7, r7, #16
   bb67e:	e033      	b.n	bb6e8 <__gethex+0x3f4>
   bb680:	f04f 0a01 	mov.w	sl, #1
   bb684:	e7d0      	b.n	bb628 <__gethex+0x334>
   bb686:	2701      	movs	r7, #1
   bb688:	e7e2      	b.n	bb650 <__gethex+0x35c>
   bb68a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb68c:	f1c3 0301 	rsb	r3, r3, #1
   bb690:	9315      	str	r3, [sp, #84]	; 0x54
   bb692:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb694:	2b00      	cmp	r3, #0
   bb696:	d0f0      	beq.n	bb67a <__gethex+0x386>
   bb698:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bb69c:	f104 0314 	add.w	r3, r4, #20
   bb6a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bb6a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bb6a8:	f04f 0c00 	mov.w	ip, #0
   bb6ac:	4618      	mov	r0, r3
   bb6ae:	f853 2b04 	ldr.w	r2, [r3], #4
   bb6b2:	f1b2 3fff 	cmp.w	r2, #4294967295
   bb6b6:	d01c      	beq.n	bb6f2 <__gethex+0x3fe>
   bb6b8:	3201      	adds	r2, #1
   bb6ba:	6002      	str	r2, [r0, #0]
   bb6bc:	2f02      	cmp	r7, #2
   bb6be:	f104 0314 	add.w	r3, r4, #20
   bb6c2:	d13f      	bne.n	bb744 <__gethex+0x450>
   bb6c4:	f8d8 2000 	ldr.w	r2, [r8]
   bb6c8:	3a01      	subs	r2, #1
   bb6ca:	42b2      	cmp	r2, r6
   bb6cc:	d10a      	bne.n	bb6e4 <__gethex+0x3f0>
   bb6ce:	1171      	asrs	r1, r6, #5
   bb6d0:	2201      	movs	r2, #1
   bb6d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bb6d6:	f006 061f 	and.w	r6, r6, #31
   bb6da:	fa02 f606 	lsl.w	r6, r2, r6
   bb6de:	421e      	tst	r6, r3
   bb6e0:	bf18      	it	ne
   bb6e2:	4617      	movne	r7, r2
   bb6e4:	f047 0720 	orr.w	r7, r7, #32
   bb6e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb6ea:	601c      	str	r4, [r3, #0]
   bb6ec:	9b04      	ldr	r3, [sp, #16]
   bb6ee:	601d      	str	r5, [r3, #0]
   bb6f0:	e695      	b.n	bb41e <__gethex+0x12a>
   bb6f2:	4299      	cmp	r1, r3
   bb6f4:	f843 cc04 	str.w	ip, [r3, #-4]
   bb6f8:	d8d8      	bhi.n	bb6ac <__gethex+0x3b8>
   bb6fa:	68a3      	ldr	r3, [r4, #8]
   bb6fc:	459b      	cmp	fp, r3
   bb6fe:	db19      	blt.n	bb734 <__gethex+0x440>
   bb700:	6861      	ldr	r1, [r4, #4]
   bb702:	ee18 0a10 	vmov	r0, s16
   bb706:	3101      	adds	r1, #1
   bb708:	f000 f90e 	bl	bb928 <_Balloc>
   bb70c:	4681      	mov	r9, r0
   bb70e:	b918      	cbnz	r0, bb718 <__gethex+0x424>
   bb710:	4b1a      	ldr	r3, [pc, #104]	; (bb77c <__gethex+0x488>)
   bb712:	4602      	mov	r2, r0
   bb714:	2184      	movs	r1, #132	; 0x84
   bb716:	e6a8      	b.n	bb46a <__gethex+0x176>
   bb718:	6922      	ldr	r2, [r4, #16]
   bb71a:	3202      	adds	r2, #2
   bb71c:	f104 010c 	add.w	r1, r4, #12
   bb720:	0092      	lsls	r2, r2, #2
   bb722:	300c      	adds	r0, #12
   bb724:	f7fe fe4e 	bl	ba3c4 <memcpy>
   bb728:	4621      	mov	r1, r4
   bb72a:	ee18 0a10 	vmov	r0, s16
   bb72e:	f000 f93b 	bl	bb9a8 <_Bfree>
   bb732:	464c      	mov	r4, r9
   bb734:	6923      	ldr	r3, [r4, #16]
   bb736:	1c5a      	adds	r2, r3, #1
   bb738:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bb73c:	6122      	str	r2, [r4, #16]
   bb73e:	2201      	movs	r2, #1
   bb740:	615a      	str	r2, [r3, #20]
   bb742:	e7bb      	b.n	bb6bc <__gethex+0x3c8>
   bb744:	6922      	ldr	r2, [r4, #16]
   bb746:	455a      	cmp	r2, fp
   bb748:	dd0b      	ble.n	bb762 <__gethex+0x46e>
   bb74a:	2101      	movs	r1, #1
   bb74c:	4620      	mov	r0, r4
   bb74e:	f7ff fd69 	bl	bb224 <rshift>
   bb752:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb756:	3501      	adds	r5, #1
   bb758:	42ab      	cmp	r3, r5
   bb75a:	f6ff aed0 	blt.w	bb4fe <__gethex+0x20a>
   bb75e:	2701      	movs	r7, #1
   bb760:	e7c0      	b.n	bb6e4 <__gethex+0x3f0>
   bb762:	f016 061f 	ands.w	r6, r6, #31
   bb766:	d0fa      	beq.n	bb75e <__gethex+0x46a>
   bb768:	4453      	add	r3, sl
   bb76a:	f1c6 0620 	rsb	r6, r6, #32
   bb76e:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bb772:	f000 f9cb 	bl	bbb0c <__hi0bits>
   bb776:	42b0      	cmp	r0, r6
   bb778:	dbe7      	blt.n	bb74a <__gethex+0x456>
   bb77a:	e7f0      	b.n	bb75e <__gethex+0x46a>
   bb77c:	000bd459 	.word	0x000bd459

000bb780 <L_shift>:
   bb780:	f1c2 0208 	rsb	r2, r2, #8
   bb784:	0092      	lsls	r2, r2, #2
   bb786:	b570      	push	{r4, r5, r6, lr}
   bb788:	f1c2 0620 	rsb	r6, r2, #32
   bb78c:	6843      	ldr	r3, [r0, #4]
   bb78e:	6804      	ldr	r4, [r0, #0]
   bb790:	fa03 f506 	lsl.w	r5, r3, r6
   bb794:	432c      	orrs	r4, r5
   bb796:	40d3      	lsrs	r3, r2
   bb798:	6004      	str	r4, [r0, #0]
   bb79a:	f840 3f04 	str.w	r3, [r0, #4]!
   bb79e:	4288      	cmp	r0, r1
   bb7a0:	d3f4      	bcc.n	bb78c <L_shift+0xc>
   bb7a2:	bd70      	pop	{r4, r5, r6, pc}

000bb7a4 <__match>:
   bb7a4:	b530      	push	{r4, r5, lr}
   bb7a6:	6803      	ldr	r3, [r0, #0]
   bb7a8:	3301      	adds	r3, #1
   bb7aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb7ae:	b914      	cbnz	r4, bb7b6 <__match+0x12>
   bb7b0:	6003      	str	r3, [r0, #0]
   bb7b2:	2001      	movs	r0, #1
   bb7b4:	bd30      	pop	{r4, r5, pc}
   bb7b6:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb7ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bb7be:	2d19      	cmp	r5, #25
   bb7c0:	bf98      	it	ls
   bb7c2:	3220      	addls	r2, #32
   bb7c4:	42a2      	cmp	r2, r4
   bb7c6:	d0f0      	beq.n	bb7aa <__match+0x6>
   bb7c8:	2000      	movs	r0, #0
   bb7ca:	e7f3      	b.n	bb7b4 <__match+0x10>

000bb7cc <__hexnan>:
   bb7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb7d0:	680b      	ldr	r3, [r1, #0]
   bb7d2:	115e      	asrs	r6, r3, #5
   bb7d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bb7d8:	f013 031f 	ands.w	r3, r3, #31
   bb7dc:	b087      	sub	sp, #28
   bb7de:	bf18      	it	ne
   bb7e0:	3604      	addne	r6, #4
   bb7e2:	2500      	movs	r5, #0
   bb7e4:	1f37      	subs	r7, r6, #4
   bb7e6:	4690      	mov	r8, r2
   bb7e8:	6802      	ldr	r2, [r0, #0]
   bb7ea:	9301      	str	r3, [sp, #4]
   bb7ec:	4682      	mov	sl, r0
   bb7ee:	f846 5c04 	str.w	r5, [r6, #-4]
   bb7f2:	46b9      	mov	r9, r7
   bb7f4:	463c      	mov	r4, r7
   bb7f6:	9502      	str	r5, [sp, #8]
   bb7f8:	46ab      	mov	fp, r5
   bb7fa:	7851      	ldrb	r1, [r2, #1]
   bb7fc:	1c53      	adds	r3, r2, #1
   bb7fe:	9303      	str	r3, [sp, #12]
   bb800:	b341      	cbz	r1, bb854 <__hexnan+0x88>
   bb802:	4608      	mov	r0, r1
   bb804:	9205      	str	r2, [sp, #20]
   bb806:	9104      	str	r1, [sp, #16]
   bb808:	f7ff fd5e 	bl	bb2c8 <__hexdig_fun>
   bb80c:	2800      	cmp	r0, #0
   bb80e:	d14f      	bne.n	bb8b0 <__hexnan+0xe4>
   bb810:	9904      	ldr	r1, [sp, #16]
   bb812:	9a05      	ldr	r2, [sp, #20]
   bb814:	2920      	cmp	r1, #32
   bb816:	d818      	bhi.n	bb84a <__hexnan+0x7e>
   bb818:	9b02      	ldr	r3, [sp, #8]
   bb81a:	459b      	cmp	fp, r3
   bb81c:	dd13      	ble.n	bb846 <__hexnan+0x7a>
   bb81e:	454c      	cmp	r4, r9
   bb820:	d206      	bcs.n	bb830 <__hexnan+0x64>
   bb822:	2d07      	cmp	r5, #7
   bb824:	dc04      	bgt.n	bb830 <__hexnan+0x64>
   bb826:	462a      	mov	r2, r5
   bb828:	4649      	mov	r1, r9
   bb82a:	4620      	mov	r0, r4
   bb82c:	f7ff ffa8 	bl	bb780 <L_shift>
   bb830:	4544      	cmp	r4, r8
   bb832:	d950      	bls.n	bb8d6 <__hexnan+0x10a>
   bb834:	2300      	movs	r3, #0
   bb836:	f1a4 0904 	sub.w	r9, r4, #4
   bb83a:	f844 3c04 	str.w	r3, [r4, #-4]
   bb83e:	f8cd b008 	str.w	fp, [sp, #8]
   bb842:	464c      	mov	r4, r9
   bb844:	461d      	mov	r5, r3
   bb846:	9a03      	ldr	r2, [sp, #12]
   bb848:	e7d7      	b.n	bb7fa <__hexnan+0x2e>
   bb84a:	2929      	cmp	r1, #41	; 0x29
   bb84c:	d156      	bne.n	bb8fc <__hexnan+0x130>
   bb84e:	3202      	adds	r2, #2
   bb850:	f8ca 2000 	str.w	r2, [sl]
   bb854:	f1bb 0f00 	cmp.w	fp, #0
   bb858:	d050      	beq.n	bb8fc <__hexnan+0x130>
   bb85a:	454c      	cmp	r4, r9
   bb85c:	d206      	bcs.n	bb86c <__hexnan+0xa0>
   bb85e:	2d07      	cmp	r5, #7
   bb860:	dc04      	bgt.n	bb86c <__hexnan+0xa0>
   bb862:	462a      	mov	r2, r5
   bb864:	4649      	mov	r1, r9
   bb866:	4620      	mov	r0, r4
   bb868:	f7ff ff8a 	bl	bb780 <L_shift>
   bb86c:	4544      	cmp	r4, r8
   bb86e:	d934      	bls.n	bb8da <__hexnan+0x10e>
   bb870:	f1a8 0204 	sub.w	r2, r8, #4
   bb874:	4623      	mov	r3, r4
   bb876:	f853 1b04 	ldr.w	r1, [r3], #4
   bb87a:	f842 1f04 	str.w	r1, [r2, #4]!
   bb87e:	429f      	cmp	r7, r3
   bb880:	d2f9      	bcs.n	bb876 <__hexnan+0xaa>
   bb882:	1b3b      	subs	r3, r7, r4
   bb884:	f023 0303 	bic.w	r3, r3, #3
   bb888:	3304      	adds	r3, #4
   bb88a:	3401      	adds	r4, #1
   bb88c:	3e03      	subs	r6, #3
   bb88e:	42b4      	cmp	r4, r6
   bb890:	bf88      	it	hi
   bb892:	2304      	movhi	r3, #4
   bb894:	4443      	add	r3, r8
   bb896:	2200      	movs	r2, #0
   bb898:	f843 2b04 	str.w	r2, [r3], #4
   bb89c:	429f      	cmp	r7, r3
   bb89e:	d2fb      	bcs.n	bb898 <__hexnan+0xcc>
   bb8a0:	683b      	ldr	r3, [r7, #0]
   bb8a2:	b91b      	cbnz	r3, bb8ac <__hexnan+0xe0>
   bb8a4:	4547      	cmp	r7, r8
   bb8a6:	d127      	bne.n	bb8f8 <__hexnan+0x12c>
   bb8a8:	2301      	movs	r3, #1
   bb8aa:	603b      	str	r3, [r7, #0]
   bb8ac:	2005      	movs	r0, #5
   bb8ae:	e026      	b.n	bb8fe <__hexnan+0x132>
   bb8b0:	3501      	adds	r5, #1
   bb8b2:	2d08      	cmp	r5, #8
   bb8b4:	f10b 0b01 	add.w	fp, fp, #1
   bb8b8:	dd06      	ble.n	bb8c8 <__hexnan+0xfc>
   bb8ba:	4544      	cmp	r4, r8
   bb8bc:	d9c3      	bls.n	bb846 <__hexnan+0x7a>
   bb8be:	2300      	movs	r3, #0
   bb8c0:	f844 3c04 	str.w	r3, [r4, #-4]
   bb8c4:	2501      	movs	r5, #1
   bb8c6:	3c04      	subs	r4, #4
   bb8c8:	6822      	ldr	r2, [r4, #0]
   bb8ca:	f000 000f 	and.w	r0, r0, #15
   bb8ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bb8d2:	6022      	str	r2, [r4, #0]
   bb8d4:	e7b7      	b.n	bb846 <__hexnan+0x7a>
   bb8d6:	2508      	movs	r5, #8
   bb8d8:	e7b5      	b.n	bb846 <__hexnan+0x7a>
   bb8da:	9b01      	ldr	r3, [sp, #4]
   bb8dc:	2b00      	cmp	r3, #0
   bb8de:	d0df      	beq.n	bb8a0 <__hexnan+0xd4>
   bb8e0:	f04f 32ff 	mov.w	r2, #4294967295
   bb8e4:	f1c3 0320 	rsb	r3, r3, #32
   bb8e8:	fa22 f303 	lsr.w	r3, r2, r3
   bb8ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bb8f0:	401a      	ands	r2, r3
   bb8f2:	f846 2c04 	str.w	r2, [r6, #-4]
   bb8f6:	e7d3      	b.n	bb8a0 <__hexnan+0xd4>
   bb8f8:	3f04      	subs	r7, #4
   bb8fa:	e7d1      	b.n	bb8a0 <__hexnan+0xd4>
   bb8fc:	2004      	movs	r0, #4
   bb8fe:	b007      	add	sp, #28
   bb900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb904 <__ascii_mbtowc>:
   bb904:	b082      	sub	sp, #8
   bb906:	b901      	cbnz	r1, bb90a <__ascii_mbtowc+0x6>
   bb908:	a901      	add	r1, sp, #4
   bb90a:	b142      	cbz	r2, bb91e <__ascii_mbtowc+0x1a>
   bb90c:	b14b      	cbz	r3, bb922 <__ascii_mbtowc+0x1e>
   bb90e:	7813      	ldrb	r3, [r2, #0]
   bb910:	600b      	str	r3, [r1, #0]
   bb912:	7812      	ldrb	r2, [r2, #0]
   bb914:	1e10      	subs	r0, r2, #0
   bb916:	bf18      	it	ne
   bb918:	2001      	movne	r0, #1
   bb91a:	b002      	add	sp, #8
   bb91c:	4770      	bx	lr
   bb91e:	4610      	mov	r0, r2
   bb920:	e7fb      	b.n	bb91a <__ascii_mbtowc+0x16>
   bb922:	f06f 0001 	mvn.w	r0, #1
   bb926:	e7f8      	b.n	bb91a <__ascii_mbtowc+0x16>

000bb928 <_Balloc>:
   bb928:	b570      	push	{r4, r5, r6, lr}
   bb92a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb92c:	4604      	mov	r4, r0
   bb92e:	460d      	mov	r5, r1
   bb930:	b976      	cbnz	r6, bb950 <_Balloc+0x28>
   bb932:	2010      	movs	r0, #16
   bb934:	f7fb feea 	bl	b770c <malloc>
   bb938:	4602      	mov	r2, r0
   bb93a:	6260      	str	r0, [r4, #36]	; 0x24
   bb93c:	b920      	cbnz	r0, bb948 <_Balloc+0x20>
   bb93e:	4b18      	ldr	r3, [pc, #96]	; (bb9a0 <_Balloc+0x78>)
   bb940:	4818      	ldr	r0, [pc, #96]	; (bb9a4 <_Balloc+0x7c>)
   bb942:	2166      	movs	r1, #102	; 0x66
   bb944:	f7fb ff22 	bl	b778c <__assert_func>
   bb948:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bb94c:	6006      	str	r6, [r0, #0]
   bb94e:	60c6      	str	r6, [r0, #12]
   bb950:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bb952:	68f3      	ldr	r3, [r6, #12]
   bb954:	b183      	cbz	r3, bb978 <_Balloc+0x50>
   bb956:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb958:	68db      	ldr	r3, [r3, #12]
   bb95a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bb95e:	b9b8      	cbnz	r0, bb990 <_Balloc+0x68>
   bb960:	2101      	movs	r1, #1
   bb962:	fa01 f605 	lsl.w	r6, r1, r5
   bb966:	1d72      	adds	r2, r6, #5
   bb968:	0092      	lsls	r2, r2, #2
   bb96a:	4620      	mov	r0, r4
   bb96c:	f000 fc9d 	bl	bc2aa <_calloc_r>
   bb970:	b160      	cbz	r0, bb98c <_Balloc+0x64>
   bb972:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bb976:	e00e      	b.n	bb996 <_Balloc+0x6e>
   bb978:	2221      	movs	r2, #33	; 0x21
   bb97a:	2104      	movs	r1, #4
   bb97c:	4620      	mov	r0, r4
   bb97e:	f000 fc94 	bl	bc2aa <_calloc_r>
   bb982:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb984:	60f0      	str	r0, [r6, #12]
   bb986:	68db      	ldr	r3, [r3, #12]
   bb988:	2b00      	cmp	r3, #0
   bb98a:	d1e4      	bne.n	bb956 <_Balloc+0x2e>
   bb98c:	2000      	movs	r0, #0
   bb98e:	bd70      	pop	{r4, r5, r6, pc}
   bb990:	6802      	ldr	r2, [r0, #0]
   bb992:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bb996:	2300      	movs	r3, #0
   bb998:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bb99c:	e7f7      	b.n	bb98e <_Balloc+0x66>
   bb99e:	bf00      	nop
   bb9a0:	000bd26e 	.word	0x000bd26e
   bb9a4:	000bd504 	.word	0x000bd504

000bb9a8 <_Bfree>:
   bb9a8:	b570      	push	{r4, r5, r6, lr}
   bb9aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb9ac:	4605      	mov	r5, r0
   bb9ae:	460c      	mov	r4, r1
   bb9b0:	b976      	cbnz	r6, bb9d0 <_Bfree+0x28>
   bb9b2:	2010      	movs	r0, #16
   bb9b4:	f7fb feaa 	bl	b770c <malloc>
   bb9b8:	4602      	mov	r2, r0
   bb9ba:	6268      	str	r0, [r5, #36]	; 0x24
   bb9bc:	b920      	cbnz	r0, bb9c8 <_Bfree+0x20>
   bb9be:	4b09      	ldr	r3, [pc, #36]	; (bb9e4 <_Bfree+0x3c>)
   bb9c0:	4809      	ldr	r0, [pc, #36]	; (bb9e8 <_Bfree+0x40>)
   bb9c2:	218a      	movs	r1, #138	; 0x8a
   bb9c4:	f7fb fee2 	bl	b778c <__assert_func>
   bb9c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bb9cc:	6006      	str	r6, [r0, #0]
   bb9ce:	60c6      	str	r6, [r0, #12]
   bb9d0:	b13c      	cbz	r4, bb9e2 <_Bfree+0x3a>
   bb9d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bb9d4:	6862      	ldr	r2, [r4, #4]
   bb9d6:	68db      	ldr	r3, [r3, #12]
   bb9d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bb9dc:	6021      	str	r1, [r4, #0]
   bb9de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bb9e2:	bd70      	pop	{r4, r5, r6, pc}
   bb9e4:	000bd26e 	.word	0x000bd26e
   bb9e8:	000bd504 	.word	0x000bd504

000bb9ec <__multadd>:
   bb9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb9f0:	690d      	ldr	r5, [r1, #16]
   bb9f2:	4607      	mov	r7, r0
   bb9f4:	460c      	mov	r4, r1
   bb9f6:	461e      	mov	r6, r3
   bb9f8:	f101 0c14 	add.w	ip, r1, #20
   bb9fc:	2000      	movs	r0, #0
   bb9fe:	f8dc 3000 	ldr.w	r3, [ip]
   bba02:	b299      	uxth	r1, r3
   bba04:	fb02 6101 	mla	r1, r2, r1, r6
   bba08:	0c1e      	lsrs	r6, r3, #16
   bba0a:	0c0b      	lsrs	r3, r1, #16
   bba0c:	fb02 3306 	mla	r3, r2, r6, r3
   bba10:	b289      	uxth	r1, r1
   bba12:	3001      	adds	r0, #1
   bba14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bba18:	4285      	cmp	r5, r0
   bba1a:	f84c 1b04 	str.w	r1, [ip], #4
   bba1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bba22:	dcec      	bgt.n	bb9fe <__multadd+0x12>
   bba24:	b30e      	cbz	r6, bba6a <__multadd+0x7e>
   bba26:	68a3      	ldr	r3, [r4, #8]
   bba28:	42ab      	cmp	r3, r5
   bba2a:	dc19      	bgt.n	bba60 <__multadd+0x74>
   bba2c:	6861      	ldr	r1, [r4, #4]
   bba2e:	4638      	mov	r0, r7
   bba30:	3101      	adds	r1, #1
   bba32:	f7ff ff79 	bl	bb928 <_Balloc>
   bba36:	4680      	mov	r8, r0
   bba38:	b928      	cbnz	r0, bba46 <__multadd+0x5a>
   bba3a:	4602      	mov	r2, r0
   bba3c:	4b0c      	ldr	r3, [pc, #48]	; (bba70 <__multadd+0x84>)
   bba3e:	480d      	ldr	r0, [pc, #52]	; (bba74 <__multadd+0x88>)
   bba40:	21b5      	movs	r1, #181	; 0xb5
   bba42:	f7fb fea3 	bl	b778c <__assert_func>
   bba46:	6922      	ldr	r2, [r4, #16]
   bba48:	3202      	adds	r2, #2
   bba4a:	f104 010c 	add.w	r1, r4, #12
   bba4e:	0092      	lsls	r2, r2, #2
   bba50:	300c      	adds	r0, #12
   bba52:	f7fe fcb7 	bl	ba3c4 <memcpy>
   bba56:	4621      	mov	r1, r4
   bba58:	4638      	mov	r0, r7
   bba5a:	f7ff ffa5 	bl	bb9a8 <_Bfree>
   bba5e:	4644      	mov	r4, r8
   bba60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bba64:	3501      	adds	r5, #1
   bba66:	615e      	str	r6, [r3, #20]
   bba68:	6125      	str	r5, [r4, #16]
   bba6a:	4620      	mov	r0, r4
   bba6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bba70:	000bd459 	.word	0x000bd459
   bba74:	000bd504 	.word	0x000bd504

000bba78 <__s2b>:
   bba78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bba7c:	460c      	mov	r4, r1
   bba7e:	4615      	mov	r5, r2
   bba80:	461f      	mov	r7, r3
   bba82:	2209      	movs	r2, #9
   bba84:	3308      	adds	r3, #8
   bba86:	4606      	mov	r6, r0
   bba88:	fb93 f3f2 	sdiv	r3, r3, r2
   bba8c:	2100      	movs	r1, #0
   bba8e:	2201      	movs	r2, #1
   bba90:	429a      	cmp	r2, r3
   bba92:	db09      	blt.n	bbaa8 <__s2b+0x30>
   bba94:	4630      	mov	r0, r6
   bba96:	f7ff ff47 	bl	bb928 <_Balloc>
   bba9a:	b940      	cbnz	r0, bbaae <__s2b+0x36>
   bba9c:	4602      	mov	r2, r0
   bba9e:	4b19      	ldr	r3, [pc, #100]	; (bbb04 <__s2b+0x8c>)
   bbaa0:	4819      	ldr	r0, [pc, #100]	; (bbb08 <__s2b+0x90>)
   bbaa2:	21ce      	movs	r1, #206	; 0xce
   bbaa4:	f7fb fe72 	bl	b778c <__assert_func>
   bbaa8:	0052      	lsls	r2, r2, #1
   bbaaa:	3101      	adds	r1, #1
   bbaac:	e7f0      	b.n	bba90 <__s2b+0x18>
   bbaae:	9b08      	ldr	r3, [sp, #32]
   bbab0:	6143      	str	r3, [r0, #20]
   bbab2:	2d09      	cmp	r5, #9
   bbab4:	f04f 0301 	mov.w	r3, #1
   bbab8:	6103      	str	r3, [r0, #16]
   bbaba:	dd16      	ble.n	bbaea <__s2b+0x72>
   bbabc:	f104 0909 	add.w	r9, r4, #9
   bbac0:	46c8      	mov	r8, r9
   bbac2:	442c      	add	r4, r5
   bbac4:	f818 3b01 	ldrb.w	r3, [r8], #1
   bbac8:	4601      	mov	r1, r0
   bbaca:	3b30      	subs	r3, #48	; 0x30
   bbacc:	220a      	movs	r2, #10
   bbace:	4630      	mov	r0, r6
   bbad0:	f7ff ff8c 	bl	bb9ec <__multadd>
   bbad4:	45a0      	cmp	r8, r4
   bbad6:	d1f5      	bne.n	bbac4 <__s2b+0x4c>
   bbad8:	f1a5 0408 	sub.w	r4, r5, #8
   bbadc:	444c      	add	r4, r9
   bbade:	1b2d      	subs	r5, r5, r4
   bbae0:	1963      	adds	r3, r4, r5
   bbae2:	42bb      	cmp	r3, r7
   bbae4:	db04      	blt.n	bbaf0 <__s2b+0x78>
   bbae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbaea:	340a      	adds	r4, #10
   bbaec:	2509      	movs	r5, #9
   bbaee:	e7f6      	b.n	bbade <__s2b+0x66>
   bbaf0:	f814 3b01 	ldrb.w	r3, [r4], #1
   bbaf4:	4601      	mov	r1, r0
   bbaf6:	3b30      	subs	r3, #48	; 0x30
   bbaf8:	220a      	movs	r2, #10
   bbafa:	4630      	mov	r0, r6
   bbafc:	f7ff ff76 	bl	bb9ec <__multadd>
   bbb00:	e7ee      	b.n	bbae0 <__s2b+0x68>
   bbb02:	bf00      	nop
   bbb04:	000bd459 	.word	0x000bd459
   bbb08:	000bd504 	.word	0x000bd504

000bbb0c <__hi0bits>:
   bbb0c:	0c03      	lsrs	r3, r0, #16
   bbb0e:	041b      	lsls	r3, r3, #16
   bbb10:	b9d3      	cbnz	r3, bbb48 <__hi0bits+0x3c>
   bbb12:	0400      	lsls	r0, r0, #16
   bbb14:	2310      	movs	r3, #16
   bbb16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bbb1a:	bf04      	itt	eq
   bbb1c:	0200      	lsleq	r0, r0, #8
   bbb1e:	3308      	addeq	r3, #8
   bbb20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bbb24:	bf04      	itt	eq
   bbb26:	0100      	lsleq	r0, r0, #4
   bbb28:	3304      	addeq	r3, #4
   bbb2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bbb2e:	bf04      	itt	eq
   bbb30:	0080      	lsleq	r0, r0, #2
   bbb32:	3302      	addeq	r3, #2
   bbb34:	2800      	cmp	r0, #0
   bbb36:	db05      	blt.n	bbb44 <__hi0bits+0x38>
   bbb38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bbb3c:	f103 0301 	add.w	r3, r3, #1
   bbb40:	bf08      	it	eq
   bbb42:	2320      	moveq	r3, #32
   bbb44:	4618      	mov	r0, r3
   bbb46:	4770      	bx	lr
   bbb48:	2300      	movs	r3, #0
   bbb4a:	e7e4      	b.n	bbb16 <__hi0bits+0xa>

000bbb4c <__lo0bits>:
   bbb4c:	6803      	ldr	r3, [r0, #0]
   bbb4e:	f013 0207 	ands.w	r2, r3, #7
   bbb52:	4601      	mov	r1, r0
   bbb54:	d00b      	beq.n	bbb6e <__lo0bits+0x22>
   bbb56:	07da      	lsls	r2, r3, #31
   bbb58:	d423      	bmi.n	bbba2 <__lo0bits+0x56>
   bbb5a:	0798      	lsls	r0, r3, #30
   bbb5c:	bf49      	itett	mi
   bbb5e:	085b      	lsrmi	r3, r3, #1
   bbb60:	089b      	lsrpl	r3, r3, #2
   bbb62:	2001      	movmi	r0, #1
   bbb64:	600b      	strmi	r3, [r1, #0]
   bbb66:	bf5c      	itt	pl
   bbb68:	600b      	strpl	r3, [r1, #0]
   bbb6a:	2002      	movpl	r0, #2
   bbb6c:	4770      	bx	lr
   bbb6e:	b298      	uxth	r0, r3
   bbb70:	b9a8      	cbnz	r0, bbb9e <__lo0bits+0x52>
   bbb72:	0c1b      	lsrs	r3, r3, #16
   bbb74:	2010      	movs	r0, #16
   bbb76:	b2da      	uxtb	r2, r3
   bbb78:	b90a      	cbnz	r2, bbb7e <__lo0bits+0x32>
   bbb7a:	3008      	adds	r0, #8
   bbb7c:	0a1b      	lsrs	r3, r3, #8
   bbb7e:	071a      	lsls	r2, r3, #28
   bbb80:	bf04      	itt	eq
   bbb82:	091b      	lsreq	r3, r3, #4
   bbb84:	3004      	addeq	r0, #4
   bbb86:	079a      	lsls	r2, r3, #30
   bbb88:	bf04      	itt	eq
   bbb8a:	089b      	lsreq	r3, r3, #2
   bbb8c:	3002      	addeq	r0, #2
   bbb8e:	07da      	lsls	r2, r3, #31
   bbb90:	d403      	bmi.n	bbb9a <__lo0bits+0x4e>
   bbb92:	085b      	lsrs	r3, r3, #1
   bbb94:	f100 0001 	add.w	r0, r0, #1
   bbb98:	d005      	beq.n	bbba6 <__lo0bits+0x5a>
   bbb9a:	600b      	str	r3, [r1, #0]
   bbb9c:	4770      	bx	lr
   bbb9e:	4610      	mov	r0, r2
   bbba0:	e7e9      	b.n	bbb76 <__lo0bits+0x2a>
   bbba2:	2000      	movs	r0, #0
   bbba4:	4770      	bx	lr
   bbba6:	2020      	movs	r0, #32
   bbba8:	4770      	bx	lr
	...

000bbbac <__i2b>:
   bbbac:	b510      	push	{r4, lr}
   bbbae:	460c      	mov	r4, r1
   bbbb0:	2101      	movs	r1, #1
   bbbb2:	f7ff feb9 	bl	bb928 <_Balloc>
   bbbb6:	4602      	mov	r2, r0
   bbbb8:	b928      	cbnz	r0, bbbc6 <__i2b+0x1a>
   bbbba:	4b05      	ldr	r3, [pc, #20]	; (bbbd0 <__i2b+0x24>)
   bbbbc:	4805      	ldr	r0, [pc, #20]	; (bbbd4 <__i2b+0x28>)
   bbbbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bbbc2:	f7fb fde3 	bl	b778c <__assert_func>
   bbbc6:	2301      	movs	r3, #1
   bbbc8:	6144      	str	r4, [r0, #20]
   bbbca:	6103      	str	r3, [r0, #16]
   bbbcc:	bd10      	pop	{r4, pc}
   bbbce:	bf00      	nop
   bbbd0:	000bd459 	.word	0x000bd459
   bbbd4:	000bd504 	.word	0x000bd504

000bbbd8 <__multiply>:
   bbbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbbdc:	4691      	mov	r9, r2
   bbbde:	690a      	ldr	r2, [r1, #16]
   bbbe0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bbbe4:	429a      	cmp	r2, r3
   bbbe6:	bfb8      	it	lt
   bbbe8:	460b      	movlt	r3, r1
   bbbea:	460c      	mov	r4, r1
   bbbec:	bfbc      	itt	lt
   bbbee:	464c      	movlt	r4, r9
   bbbf0:	4699      	movlt	r9, r3
   bbbf2:	6927      	ldr	r7, [r4, #16]
   bbbf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bbbf8:	68a3      	ldr	r3, [r4, #8]
   bbbfa:	6861      	ldr	r1, [r4, #4]
   bbbfc:	eb07 060a 	add.w	r6, r7, sl
   bbc00:	42b3      	cmp	r3, r6
   bbc02:	b085      	sub	sp, #20
   bbc04:	bfb8      	it	lt
   bbc06:	3101      	addlt	r1, #1
   bbc08:	f7ff fe8e 	bl	bb928 <_Balloc>
   bbc0c:	b930      	cbnz	r0, bbc1c <__multiply+0x44>
   bbc0e:	4602      	mov	r2, r0
   bbc10:	4b44      	ldr	r3, [pc, #272]	; (bbd24 <__multiply+0x14c>)
   bbc12:	4845      	ldr	r0, [pc, #276]	; (bbd28 <__multiply+0x150>)
   bbc14:	f240 115d 	movw	r1, #349	; 0x15d
   bbc18:	f7fb fdb8 	bl	b778c <__assert_func>
   bbc1c:	f100 0514 	add.w	r5, r0, #20
   bbc20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bbc24:	462b      	mov	r3, r5
   bbc26:	2200      	movs	r2, #0
   bbc28:	4543      	cmp	r3, r8
   bbc2a:	d321      	bcc.n	bbc70 <__multiply+0x98>
   bbc2c:	f104 0314 	add.w	r3, r4, #20
   bbc30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bbc34:	f109 0314 	add.w	r3, r9, #20
   bbc38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bbc3c:	9202      	str	r2, [sp, #8]
   bbc3e:	1b3a      	subs	r2, r7, r4
   bbc40:	3a15      	subs	r2, #21
   bbc42:	f022 0203 	bic.w	r2, r2, #3
   bbc46:	3204      	adds	r2, #4
   bbc48:	f104 0115 	add.w	r1, r4, #21
   bbc4c:	428f      	cmp	r7, r1
   bbc4e:	bf38      	it	cc
   bbc50:	2204      	movcc	r2, #4
   bbc52:	9201      	str	r2, [sp, #4]
   bbc54:	9a02      	ldr	r2, [sp, #8]
   bbc56:	9303      	str	r3, [sp, #12]
   bbc58:	429a      	cmp	r2, r3
   bbc5a:	d80c      	bhi.n	bbc76 <__multiply+0x9e>
   bbc5c:	2e00      	cmp	r6, #0
   bbc5e:	dd03      	ble.n	bbc68 <__multiply+0x90>
   bbc60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bbc64:	2b00      	cmp	r3, #0
   bbc66:	d05a      	beq.n	bbd1e <__multiply+0x146>
   bbc68:	6106      	str	r6, [r0, #16]
   bbc6a:	b005      	add	sp, #20
   bbc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbc70:	f843 2b04 	str.w	r2, [r3], #4
   bbc74:	e7d8      	b.n	bbc28 <__multiply+0x50>
   bbc76:	f8b3 a000 	ldrh.w	sl, [r3]
   bbc7a:	f1ba 0f00 	cmp.w	sl, #0
   bbc7e:	d024      	beq.n	bbcca <__multiply+0xf2>
   bbc80:	f104 0e14 	add.w	lr, r4, #20
   bbc84:	46a9      	mov	r9, r5
   bbc86:	f04f 0c00 	mov.w	ip, #0
   bbc8a:	f85e 2b04 	ldr.w	r2, [lr], #4
   bbc8e:	f8d9 1000 	ldr.w	r1, [r9]
   bbc92:	fa1f fb82 	uxth.w	fp, r2
   bbc96:	b289      	uxth	r1, r1
   bbc98:	fb0a 110b 	mla	r1, sl, fp, r1
   bbc9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bbca0:	f8d9 2000 	ldr.w	r2, [r9]
   bbca4:	4461      	add	r1, ip
   bbca6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbcaa:	fb0a c20b 	mla	r2, sl, fp, ip
   bbcae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bbcb2:	b289      	uxth	r1, r1
   bbcb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bbcb8:	4577      	cmp	r7, lr
   bbcba:	f849 1b04 	str.w	r1, [r9], #4
   bbcbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbcc2:	d8e2      	bhi.n	bbc8a <__multiply+0xb2>
   bbcc4:	9a01      	ldr	r2, [sp, #4]
   bbcc6:	f845 c002 	str.w	ip, [r5, r2]
   bbcca:	9a03      	ldr	r2, [sp, #12]
   bbccc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bbcd0:	3304      	adds	r3, #4
   bbcd2:	f1b9 0f00 	cmp.w	r9, #0
   bbcd6:	d020      	beq.n	bbd1a <__multiply+0x142>
   bbcd8:	6829      	ldr	r1, [r5, #0]
   bbcda:	f104 0c14 	add.w	ip, r4, #20
   bbcde:	46ae      	mov	lr, r5
   bbce0:	f04f 0a00 	mov.w	sl, #0
   bbce4:	f8bc b000 	ldrh.w	fp, [ip]
   bbce8:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bbcec:	fb09 220b 	mla	r2, r9, fp, r2
   bbcf0:	4492      	add	sl, r2
   bbcf2:	b289      	uxth	r1, r1
   bbcf4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bbcf8:	f84e 1b04 	str.w	r1, [lr], #4
   bbcfc:	f85c 2b04 	ldr.w	r2, [ip], #4
   bbd00:	f8be 1000 	ldrh.w	r1, [lr]
   bbd04:	0c12      	lsrs	r2, r2, #16
   bbd06:	fb09 1102 	mla	r1, r9, r2, r1
   bbd0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bbd0e:	4567      	cmp	r7, ip
   bbd10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bbd14:	d8e6      	bhi.n	bbce4 <__multiply+0x10c>
   bbd16:	9a01      	ldr	r2, [sp, #4]
   bbd18:	50a9      	str	r1, [r5, r2]
   bbd1a:	3504      	adds	r5, #4
   bbd1c:	e79a      	b.n	bbc54 <__multiply+0x7c>
   bbd1e:	3e01      	subs	r6, #1
   bbd20:	e79c      	b.n	bbc5c <__multiply+0x84>
   bbd22:	bf00      	nop
   bbd24:	000bd459 	.word	0x000bd459
   bbd28:	000bd504 	.word	0x000bd504

000bbd2c <__pow5mult>:
   bbd2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbd30:	4615      	mov	r5, r2
   bbd32:	f012 0203 	ands.w	r2, r2, #3
   bbd36:	4606      	mov	r6, r0
   bbd38:	460f      	mov	r7, r1
   bbd3a:	d007      	beq.n	bbd4c <__pow5mult+0x20>
   bbd3c:	4c25      	ldr	r4, [pc, #148]	; (bbdd4 <__pow5mult+0xa8>)
   bbd3e:	3a01      	subs	r2, #1
   bbd40:	2300      	movs	r3, #0
   bbd42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bbd46:	f7ff fe51 	bl	bb9ec <__multadd>
   bbd4a:	4607      	mov	r7, r0
   bbd4c:	10ad      	asrs	r5, r5, #2
   bbd4e:	d03d      	beq.n	bbdcc <__pow5mult+0xa0>
   bbd50:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bbd52:	b97c      	cbnz	r4, bbd74 <__pow5mult+0x48>
   bbd54:	2010      	movs	r0, #16
   bbd56:	f7fb fcd9 	bl	b770c <malloc>
   bbd5a:	4602      	mov	r2, r0
   bbd5c:	6270      	str	r0, [r6, #36]	; 0x24
   bbd5e:	b928      	cbnz	r0, bbd6c <__pow5mult+0x40>
   bbd60:	4b1d      	ldr	r3, [pc, #116]	; (bbdd8 <__pow5mult+0xac>)
   bbd62:	481e      	ldr	r0, [pc, #120]	; (bbddc <__pow5mult+0xb0>)
   bbd64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bbd68:	f7fb fd10 	bl	b778c <__assert_func>
   bbd6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bbd70:	6004      	str	r4, [r0, #0]
   bbd72:	60c4      	str	r4, [r0, #12]
   bbd74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bbd78:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bbd7c:	b94c      	cbnz	r4, bbd92 <__pow5mult+0x66>
   bbd7e:	f240 2171 	movw	r1, #625	; 0x271
   bbd82:	4630      	mov	r0, r6
   bbd84:	f7ff ff12 	bl	bbbac <__i2b>
   bbd88:	2300      	movs	r3, #0
   bbd8a:	f8c8 0008 	str.w	r0, [r8, #8]
   bbd8e:	4604      	mov	r4, r0
   bbd90:	6003      	str	r3, [r0, #0]
   bbd92:	f04f 0900 	mov.w	r9, #0
   bbd96:	07eb      	lsls	r3, r5, #31
   bbd98:	d50a      	bpl.n	bbdb0 <__pow5mult+0x84>
   bbd9a:	4639      	mov	r1, r7
   bbd9c:	4622      	mov	r2, r4
   bbd9e:	4630      	mov	r0, r6
   bbda0:	f7ff ff1a 	bl	bbbd8 <__multiply>
   bbda4:	4639      	mov	r1, r7
   bbda6:	4680      	mov	r8, r0
   bbda8:	4630      	mov	r0, r6
   bbdaa:	f7ff fdfd 	bl	bb9a8 <_Bfree>
   bbdae:	4647      	mov	r7, r8
   bbdb0:	106d      	asrs	r5, r5, #1
   bbdb2:	d00b      	beq.n	bbdcc <__pow5mult+0xa0>
   bbdb4:	6820      	ldr	r0, [r4, #0]
   bbdb6:	b938      	cbnz	r0, bbdc8 <__pow5mult+0x9c>
   bbdb8:	4622      	mov	r2, r4
   bbdba:	4621      	mov	r1, r4
   bbdbc:	4630      	mov	r0, r6
   bbdbe:	f7ff ff0b 	bl	bbbd8 <__multiply>
   bbdc2:	6020      	str	r0, [r4, #0]
   bbdc4:	f8c0 9000 	str.w	r9, [r0]
   bbdc8:	4604      	mov	r4, r0
   bbdca:	e7e4      	b.n	bbd96 <__pow5mult+0x6a>
   bbdcc:	4638      	mov	r0, r7
   bbdce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbdd2:	bf00      	nop
   bbdd4:	000bd678 	.word	0x000bd678
   bbdd8:	000bd26e 	.word	0x000bd26e
   bbddc:	000bd504 	.word	0x000bd504

000bbde0 <__lshift>:
   bbde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbde4:	460c      	mov	r4, r1
   bbde6:	6849      	ldr	r1, [r1, #4]
   bbde8:	6923      	ldr	r3, [r4, #16]
   bbdea:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bbdee:	68a3      	ldr	r3, [r4, #8]
   bbdf0:	4607      	mov	r7, r0
   bbdf2:	4691      	mov	r9, r2
   bbdf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bbdf8:	f108 0601 	add.w	r6, r8, #1
   bbdfc:	42b3      	cmp	r3, r6
   bbdfe:	db0b      	blt.n	bbe18 <__lshift+0x38>
   bbe00:	4638      	mov	r0, r7
   bbe02:	f7ff fd91 	bl	bb928 <_Balloc>
   bbe06:	4605      	mov	r5, r0
   bbe08:	b948      	cbnz	r0, bbe1e <__lshift+0x3e>
   bbe0a:	4602      	mov	r2, r0
   bbe0c:	4b2a      	ldr	r3, [pc, #168]	; (bbeb8 <__lshift+0xd8>)
   bbe0e:	482b      	ldr	r0, [pc, #172]	; (bbebc <__lshift+0xdc>)
   bbe10:	f240 11d9 	movw	r1, #473	; 0x1d9
   bbe14:	f7fb fcba 	bl	b778c <__assert_func>
   bbe18:	3101      	adds	r1, #1
   bbe1a:	005b      	lsls	r3, r3, #1
   bbe1c:	e7ee      	b.n	bbdfc <__lshift+0x1c>
   bbe1e:	2300      	movs	r3, #0
   bbe20:	f100 0114 	add.w	r1, r0, #20
   bbe24:	f100 0210 	add.w	r2, r0, #16
   bbe28:	4618      	mov	r0, r3
   bbe2a:	4553      	cmp	r3, sl
   bbe2c:	db37      	blt.n	bbe9e <__lshift+0xbe>
   bbe2e:	6920      	ldr	r0, [r4, #16]
   bbe30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bbe34:	f104 0314 	add.w	r3, r4, #20
   bbe38:	f019 091f 	ands.w	r9, r9, #31
   bbe3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bbe40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bbe44:	d02f      	beq.n	bbea6 <__lshift+0xc6>
   bbe46:	f1c9 0e20 	rsb	lr, r9, #32
   bbe4a:	468a      	mov	sl, r1
   bbe4c:	f04f 0c00 	mov.w	ip, #0
   bbe50:	681a      	ldr	r2, [r3, #0]
   bbe52:	fa02 f209 	lsl.w	r2, r2, r9
   bbe56:	ea42 020c 	orr.w	r2, r2, ip
   bbe5a:	f84a 2b04 	str.w	r2, [sl], #4
   bbe5e:	f853 2b04 	ldr.w	r2, [r3], #4
   bbe62:	4298      	cmp	r0, r3
   bbe64:	fa22 fc0e 	lsr.w	ip, r2, lr
   bbe68:	d8f2      	bhi.n	bbe50 <__lshift+0x70>
   bbe6a:	1b03      	subs	r3, r0, r4
   bbe6c:	3b15      	subs	r3, #21
   bbe6e:	f023 0303 	bic.w	r3, r3, #3
   bbe72:	3304      	adds	r3, #4
   bbe74:	f104 0215 	add.w	r2, r4, #21
   bbe78:	4290      	cmp	r0, r2
   bbe7a:	bf38      	it	cc
   bbe7c:	2304      	movcc	r3, #4
   bbe7e:	f841 c003 	str.w	ip, [r1, r3]
   bbe82:	f1bc 0f00 	cmp.w	ip, #0
   bbe86:	d001      	beq.n	bbe8c <__lshift+0xac>
   bbe88:	f108 0602 	add.w	r6, r8, #2
   bbe8c:	3e01      	subs	r6, #1
   bbe8e:	4638      	mov	r0, r7
   bbe90:	612e      	str	r6, [r5, #16]
   bbe92:	4621      	mov	r1, r4
   bbe94:	f7ff fd88 	bl	bb9a8 <_Bfree>
   bbe98:	4628      	mov	r0, r5
   bbe9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbe9e:	f842 0f04 	str.w	r0, [r2, #4]!
   bbea2:	3301      	adds	r3, #1
   bbea4:	e7c1      	b.n	bbe2a <__lshift+0x4a>
   bbea6:	3904      	subs	r1, #4
   bbea8:	f853 2b04 	ldr.w	r2, [r3], #4
   bbeac:	f841 2f04 	str.w	r2, [r1, #4]!
   bbeb0:	4298      	cmp	r0, r3
   bbeb2:	d8f9      	bhi.n	bbea8 <__lshift+0xc8>
   bbeb4:	e7ea      	b.n	bbe8c <__lshift+0xac>
   bbeb6:	bf00      	nop
   bbeb8:	000bd459 	.word	0x000bd459
   bbebc:	000bd504 	.word	0x000bd504

000bbec0 <__mcmp>:
   bbec0:	b530      	push	{r4, r5, lr}
   bbec2:	6902      	ldr	r2, [r0, #16]
   bbec4:	690c      	ldr	r4, [r1, #16]
   bbec6:	1b12      	subs	r2, r2, r4
   bbec8:	d10e      	bne.n	bbee8 <__mcmp+0x28>
   bbeca:	f100 0314 	add.w	r3, r0, #20
   bbece:	3114      	adds	r1, #20
   bbed0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bbed4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bbed8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bbedc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bbee0:	42a5      	cmp	r5, r4
   bbee2:	d003      	beq.n	bbeec <__mcmp+0x2c>
   bbee4:	d305      	bcc.n	bbef2 <__mcmp+0x32>
   bbee6:	2201      	movs	r2, #1
   bbee8:	4610      	mov	r0, r2
   bbeea:	bd30      	pop	{r4, r5, pc}
   bbeec:	4283      	cmp	r3, r0
   bbeee:	d3f3      	bcc.n	bbed8 <__mcmp+0x18>
   bbef0:	e7fa      	b.n	bbee8 <__mcmp+0x28>
   bbef2:	f04f 32ff 	mov.w	r2, #4294967295
   bbef6:	e7f7      	b.n	bbee8 <__mcmp+0x28>

000bbef8 <__mdiff>:
   bbef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbefc:	460c      	mov	r4, r1
   bbefe:	4606      	mov	r6, r0
   bbf00:	4611      	mov	r1, r2
   bbf02:	4620      	mov	r0, r4
   bbf04:	4690      	mov	r8, r2
   bbf06:	f7ff ffdb 	bl	bbec0 <__mcmp>
   bbf0a:	1e05      	subs	r5, r0, #0
   bbf0c:	d110      	bne.n	bbf30 <__mdiff+0x38>
   bbf0e:	4629      	mov	r1, r5
   bbf10:	4630      	mov	r0, r6
   bbf12:	f7ff fd09 	bl	bb928 <_Balloc>
   bbf16:	b930      	cbnz	r0, bbf26 <__mdiff+0x2e>
   bbf18:	4b3a      	ldr	r3, [pc, #232]	; (bc004 <__mdiff+0x10c>)
   bbf1a:	4602      	mov	r2, r0
   bbf1c:	f240 2132 	movw	r1, #562	; 0x232
   bbf20:	4839      	ldr	r0, [pc, #228]	; (bc008 <__mdiff+0x110>)
   bbf22:	f7fb fc33 	bl	b778c <__assert_func>
   bbf26:	2301      	movs	r3, #1
   bbf28:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bbf2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbf30:	bfa4      	itt	ge
   bbf32:	4643      	movge	r3, r8
   bbf34:	46a0      	movge	r8, r4
   bbf36:	4630      	mov	r0, r6
   bbf38:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bbf3c:	bfa6      	itte	ge
   bbf3e:	461c      	movge	r4, r3
   bbf40:	2500      	movge	r5, #0
   bbf42:	2501      	movlt	r5, #1
   bbf44:	f7ff fcf0 	bl	bb928 <_Balloc>
   bbf48:	b920      	cbnz	r0, bbf54 <__mdiff+0x5c>
   bbf4a:	4b2e      	ldr	r3, [pc, #184]	; (bc004 <__mdiff+0x10c>)
   bbf4c:	4602      	mov	r2, r0
   bbf4e:	f44f 7110 	mov.w	r1, #576	; 0x240
   bbf52:	e7e5      	b.n	bbf20 <__mdiff+0x28>
   bbf54:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bbf58:	6926      	ldr	r6, [r4, #16]
   bbf5a:	60c5      	str	r5, [r0, #12]
   bbf5c:	f104 0914 	add.w	r9, r4, #20
   bbf60:	f108 0514 	add.w	r5, r8, #20
   bbf64:	f100 0e14 	add.w	lr, r0, #20
   bbf68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bbf6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bbf70:	f108 0210 	add.w	r2, r8, #16
   bbf74:	46f2      	mov	sl, lr
   bbf76:	2100      	movs	r1, #0
   bbf78:	f859 3b04 	ldr.w	r3, [r9], #4
   bbf7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bbf80:	fa1f f883 	uxth.w	r8, r3
   bbf84:	fa11 f18b 	uxtah	r1, r1, fp
   bbf88:	0c1b      	lsrs	r3, r3, #16
   bbf8a:	eba1 0808 	sub.w	r8, r1, r8
   bbf8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bbf92:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bbf96:	fa1f f888 	uxth.w	r8, r8
   bbf9a:	1419      	asrs	r1, r3, #16
   bbf9c:	454e      	cmp	r6, r9
   bbf9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bbfa2:	f84a 3b04 	str.w	r3, [sl], #4
   bbfa6:	d8e7      	bhi.n	bbf78 <__mdiff+0x80>
   bbfa8:	1b33      	subs	r3, r6, r4
   bbfaa:	3b15      	subs	r3, #21
   bbfac:	f023 0303 	bic.w	r3, r3, #3
   bbfb0:	3304      	adds	r3, #4
   bbfb2:	3415      	adds	r4, #21
   bbfb4:	42a6      	cmp	r6, r4
   bbfb6:	bf38      	it	cc
   bbfb8:	2304      	movcc	r3, #4
   bbfba:	441d      	add	r5, r3
   bbfbc:	4473      	add	r3, lr
   bbfbe:	469e      	mov	lr, r3
   bbfc0:	462e      	mov	r6, r5
   bbfc2:	4566      	cmp	r6, ip
   bbfc4:	d30e      	bcc.n	bbfe4 <__mdiff+0xec>
   bbfc6:	f10c 0203 	add.w	r2, ip, #3
   bbfca:	1b52      	subs	r2, r2, r5
   bbfcc:	f022 0203 	bic.w	r2, r2, #3
   bbfd0:	3d03      	subs	r5, #3
   bbfd2:	45ac      	cmp	ip, r5
   bbfd4:	bf38      	it	cc
   bbfd6:	2200      	movcc	r2, #0
   bbfd8:	441a      	add	r2, r3
   bbfda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bbfde:	b17b      	cbz	r3, bc000 <__mdiff+0x108>
   bbfe0:	6107      	str	r7, [r0, #16]
   bbfe2:	e7a3      	b.n	bbf2c <__mdiff+0x34>
   bbfe4:	f856 8b04 	ldr.w	r8, [r6], #4
   bbfe8:	fa11 f288 	uxtah	r2, r1, r8
   bbfec:	1414      	asrs	r4, r2, #16
   bbfee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bbff2:	b292      	uxth	r2, r2
   bbff4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bbff8:	f84e 2b04 	str.w	r2, [lr], #4
   bbffc:	1421      	asrs	r1, r4, #16
   bbffe:	e7e0      	b.n	bbfc2 <__mdiff+0xca>
   bc000:	3f01      	subs	r7, #1
   bc002:	e7ea      	b.n	bbfda <__mdiff+0xe2>
   bc004:	000bd459 	.word	0x000bd459
   bc008:	000bd504 	.word	0x000bd504

000bc00c <__ulp>:
   bc00c:	b082      	sub	sp, #8
   bc00e:	ed8d 0b00 	vstr	d0, [sp]
   bc012:	9b01      	ldr	r3, [sp, #4]
   bc014:	4912      	ldr	r1, [pc, #72]	; (bc060 <__ulp+0x54>)
   bc016:	4019      	ands	r1, r3
   bc018:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bc01c:	2900      	cmp	r1, #0
   bc01e:	dd05      	ble.n	bc02c <__ulp+0x20>
   bc020:	2200      	movs	r2, #0
   bc022:	460b      	mov	r3, r1
   bc024:	ec43 2b10 	vmov	d0, r2, r3
   bc028:	b002      	add	sp, #8
   bc02a:	4770      	bx	lr
   bc02c:	4249      	negs	r1, r1
   bc02e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bc032:	ea4f 5021 	mov.w	r0, r1, asr #20
   bc036:	f04f 0200 	mov.w	r2, #0
   bc03a:	f04f 0300 	mov.w	r3, #0
   bc03e:	da04      	bge.n	bc04a <__ulp+0x3e>
   bc040:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bc044:	fa41 f300 	asr.w	r3, r1, r0
   bc048:	e7ec      	b.n	bc024 <__ulp+0x18>
   bc04a:	f1a0 0114 	sub.w	r1, r0, #20
   bc04e:	291e      	cmp	r1, #30
   bc050:	bfda      	itte	le
   bc052:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bc056:	fa20 f101 	lsrle.w	r1, r0, r1
   bc05a:	2101      	movgt	r1, #1
   bc05c:	460a      	mov	r2, r1
   bc05e:	e7e1      	b.n	bc024 <__ulp+0x18>
   bc060:	7ff00000 	.word	0x7ff00000

000bc064 <__b2d>:
   bc064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc066:	6905      	ldr	r5, [r0, #16]
   bc068:	f100 0714 	add.w	r7, r0, #20
   bc06c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bc070:	1f2e      	subs	r6, r5, #4
   bc072:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bc076:	4620      	mov	r0, r4
   bc078:	f7ff fd48 	bl	bbb0c <__hi0bits>
   bc07c:	f1c0 0320 	rsb	r3, r0, #32
   bc080:	280a      	cmp	r0, #10
   bc082:	f8df c07c 	ldr.w	ip, [pc, #124]	; bc100 <__b2d+0x9c>
   bc086:	600b      	str	r3, [r1, #0]
   bc088:	dc14      	bgt.n	bc0b4 <__b2d+0x50>
   bc08a:	f1c0 0e0b 	rsb	lr, r0, #11
   bc08e:	fa24 f10e 	lsr.w	r1, r4, lr
   bc092:	42b7      	cmp	r7, r6
   bc094:	ea41 030c 	orr.w	r3, r1, ip
   bc098:	bf34      	ite	cc
   bc09a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc09e:	2100      	movcs	r1, #0
   bc0a0:	3015      	adds	r0, #21
   bc0a2:	fa04 f000 	lsl.w	r0, r4, r0
   bc0a6:	fa21 f10e 	lsr.w	r1, r1, lr
   bc0aa:	ea40 0201 	orr.w	r2, r0, r1
   bc0ae:	ec43 2b10 	vmov	d0, r2, r3
   bc0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc0b4:	42b7      	cmp	r7, r6
   bc0b6:	bf3a      	itte	cc
   bc0b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc0bc:	f1a5 0608 	subcc.w	r6, r5, #8
   bc0c0:	2100      	movcs	r1, #0
   bc0c2:	380b      	subs	r0, #11
   bc0c4:	d017      	beq.n	bc0f6 <__b2d+0x92>
   bc0c6:	f1c0 0c20 	rsb	ip, r0, #32
   bc0ca:	fa04 f500 	lsl.w	r5, r4, r0
   bc0ce:	42be      	cmp	r6, r7
   bc0d0:	fa21 f40c 	lsr.w	r4, r1, ip
   bc0d4:	ea45 0504 	orr.w	r5, r5, r4
   bc0d8:	bf8c      	ite	hi
   bc0da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bc0de:	2400      	movls	r4, #0
   bc0e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bc0e4:	fa01 f000 	lsl.w	r0, r1, r0
   bc0e8:	fa24 f40c 	lsr.w	r4, r4, ip
   bc0ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bc0f0:	ea40 0204 	orr.w	r2, r0, r4
   bc0f4:	e7db      	b.n	bc0ae <__b2d+0x4a>
   bc0f6:	ea44 030c 	orr.w	r3, r4, ip
   bc0fa:	460a      	mov	r2, r1
   bc0fc:	e7d7      	b.n	bc0ae <__b2d+0x4a>
   bc0fe:	bf00      	nop
   bc100:	3ff00000 	.word	0x3ff00000

000bc104 <__d2b>:
   bc104:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bc108:	4689      	mov	r9, r1
   bc10a:	2101      	movs	r1, #1
   bc10c:	ec57 6b10 	vmov	r6, r7, d0
   bc110:	4690      	mov	r8, r2
   bc112:	f7ff fc09 	bl	bb928 <_Balloc>
   bc116:	4604      	mov	r4, r0
   bc118:	b930      	cbnz	r0, bc128 <__d2b+0x24>
   bc11a:	4602      	mov	r2, r0
   bc11c:	4b25      	ldr	r3, [pc, #148]	; (bc1b4 <__d2b+0xb0>)
   bc11e:	4826      	ldr	r0, [pc, #152]	; (bc1b8 <__d2b+0xb4>)
   bc120:	f240 310a 	movw	r1, #778	; 0x30a
   bc124:	f7fb fb32 	bl	b778c <__assert_func>
   bc128:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bc12c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bc130:	bb35      	cbnz	r5, bc180 <__d2b+0x7c>
   bc132:	2e00      	cmp	r6, #0
   bc134:	9301      	str	r3, [sp, #4]
   bc136:	d028      	beq.n	bc18a <__d2b+0x86>
   bc138:	4668      	mov	r0, sp
   bc13a:	9600      	str	r6, [sp, #0]
   bc13c:	f7ff fd06 	bl	bbb4c <__lo0bits>
   bc140:	9900      	ldr	r1, [sp, #0]
   bc142:	b300      	cbz	r0, bc186 <__d2b+0x82>
   bc144:	9a01      	ldr	r2, [sp, #4]
   bc146:	f1c0 0320 	rsb	r3, r0, #32
   bc14a:	fa02 f303 	lsl.w	r3, r2, r3
   bc14e:	430b      	orrs	r3, r1
   bc150:	40c2      	lsrs	r2, r0
   bc152:	6163      	str	r3, [r4, #20]
   bc154:	9201      	str	r2, [sp, #4]
   bc156:	9b01      	ldr	r3, [sp, #4]
   bc158:	61a3      	str	r3, [r4, #24]
   bc15a:	2b00      	cmp	r3, #0
   bc15c:	bf14      	ite	ne
   bc15e:	2202      	movne	r2, #2
   bc160:	2201      	moveq	r2, #1
   bc162:	6122      	str	r2, [r4, #16]
   bc164:	b1d5      	cbz	r5, bc19c <__d2b+0x98>
   bc166:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bc16a:	4405      	add	r5, r0
   bc16c:	f8c9 5000 	str.w	r5, [r9]
   bc170:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bc174:	f8c8 0000 	str.w	r0, [r8]
   bc178:	4620      	mov	r0, r4
   bc17a:	b003      	add	sp, #12
   bc17c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc184:	e7d5      	b.n	bc132 <__d2b+0x2e>
   bc186:	6161      	str	r1, [r4, #20]
   bc188:	e7e5      	b.n	bc156 <__d2b+0x52>
   bc18a:	a801      	add	r0, sp, #4
   bc18c:	f7ff fcde 	bl	bbb4c <__lo0bits>
   bc190:	9b01      	ldr	r3, [sp, #4]
   bc192:	6163      	str	r3, [r4, #20]
   bc194:	2201      	movs	r2, #1
   bc196:	6122      	str	r2, [r4, #16]
   bc198:	3020      	adds	r0, #32
   bc19a:	e7e3      	b.n	bc164 <__d2b+0x60>
   bc19c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bc1a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bc1a4:	f8c9 0000 	str.w	r0, [r9]
   bc1a8:	6918      	ldr	r0, [r3, #16]
   bc1aa:	f7ff fcaf 	bl	bbb0c <__hi0bits>
   bc1ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bc1b2:	e7df      	b.n	bc174 <__d2b+0x70>
   bc1b4:	000bd459 	.word	0x000bd459
   bc1b8:	000bd504 	.word	0x000bd504

000bc1bc <__ratio>:
   bc1bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc1c0:	4688      	mov	r8, r1
   bc1c2:	4669      	mov	r1, sp
   bc1c4:	4681      	mov	r9, r0
   bc1c6:	f7ff ff4d 	bl	bc064 <__b2d>
   bc1ca:	a901      	add	r1, sp, #4
   bc1cc:	4640      	mov	r0, r8
   bc1ce:	ec55 4b10 	vmov	r4, r5, d0
   bc1d2:	f7ff ff47 	bl	bc064 <__b2d>
   bc1d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc1da:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bc1de:	eba3 0c02 	sub.w	ip, r3, r2
   bc1e2:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc1e6:	1a9b      	subs	r3, r3, r2
   bc1e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bc1ec:	ec51 0b10 	vmov	r0, r1, d0
   bc1f0:	2b00      	cmp	r3, #0
   bc1f2:	bfd6      	itet	le
   bc1f4:	460a      	movle	r2, r1
   bc1f6:	462a      	movgt	r2, r5
   bc1f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bc1fc:	468b      	mov	fp, r1
   bc1fe:	462f      	mov	r7, r5
   bc200:	bfd4      	ite	le
   bc202:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bc206:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bc20a:	4620      	mov	r0, r4
   bc20c:	ee10 2a10 	vmov	r2, s0
   bc210:	465b      	mov	r3, fp
   bc212:	4639      	mov	r1, r7
   bc214:	f7fd fb52 	bl	b98bc <__aeabi_ddiv>
   bc218:	ec41 0b10 	vmov	d0, r0, r1
   bc21c:	b003      	add	sp, #12
   bc21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc222 <__copybits>:
   bc222:	3901      	subs	r1, #1
   bc224:	b570      	push	{r4, r5, r6, lr}
   bc226:	1149      	asrs	r1, r1, #5
   bc228:	6914      	ldr	r4, [r2, #16]
   bc22a:	3101      	adds	r1, #1
   bc22c:	f102 0314 	add.w	r3, r2, #20
   bc230:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bc234:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bc238:	1f05      	subs	r5, r0, #4
   bc23a:	42a3      	cmp	r3, r4
   bc23c:	d30c      	bcc.n	bc258 <__copybits+0x36>
   bc23e:	1aa3      	subs	r3, r4, r2
   bc240:	3b11      	subs	r3, #17
   bc242:	f023 0303 	bic.w	r3, r3, #3
   bc246:	3211      	adds	r2, #17
   bc248:	42a2      	cmp	r2, r4
   bc24a:	bf88      	it	hi
   bc24c:	2300      	movhi	r3, #0
   bc24e:	4418      	add	r0, r3
   bc250:	2300      	movs	r3, #0
   bc252:	4288      	cmp	r0, r1
   bc254:	d305      	bcc.n	bc262 <__copybits+0x40>
   bc256:	bd70      	pop	{r4, r5, r6, pc}
   bc258:	f853 6b04 	ldr.w	r6, [r3], #4
   bc25c:	f845 6f04 	str.w	r6, [r5, #4]!
   bc260:	e7eb      	b.n	bc23a <__copybits+0x18>
   bc262:	f840 3b04 	str.w	r3, [r0], #4
   bc266:	e7f4      	b.n	bc252 <__copybits+0x30>

000bc268 <__any_on>:
   bc268:	f100 0214 	add.w	r2, r0, #20
   bc26c:	6900      	ldr	r0, [r0, #16]
   bc26e:	114b      	asrs	r3, r1, #5
   bc270:	4298      	cmp	r0, r3
   bc272:	b510      	push	{r4, lr}
   bc274:	db11      	blt.n	bc29a <__any_on+0x32>
   bc276:	dd0a      	ble.n	bc28e <__any_on+0x26>
   bc278:	f011 011f 	ands.w	r1, r1, #31
   bc27c:	d007      	beq.n	bc28e <__any_on+0x26>
   bc27e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bc282:	fa24 f001 	lsr.w	r0, r4, r1
   bc286:	fa00 f101 	lsl.w	r1, r0, r1
   bc28a:	428c      	cmp	r4, r1
   bc28c:	d10b      	bne.n	bc2a6 <__any_on+0x3e>
   bc28e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bc292:	4293      	cmp	r3, r2
   bc294:	d803      	bhi.n	bc29e <__any_on+0x36>
   bc296:	2000      	movs	r0, #0
   bc298:	bd10      	pop	{r4, pc}
   bc29a:	4603      	mov	r3, r0
   bc29c:	e7f7      	b.n	bc28e <__any_on+0x26>
   bc29e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bc2a2:	2900      	cmp	r1, #0
   bc2a4:	d0f5      	beq.n	bc292 <__any_on+0x2a>
   bc2a6:	2001      	movs	r0, #1
   bc2a8:	e7f6      	b.n	bc298 <__any_on+0x30>

000bc2aa <_calloc_r>:
   bc2aa:	b513      	push	{r0, r1, r4, lr}
   bc2ac:	434a      	muls	r2, r1
   bc2ae:	4611      	mov	r1, r2
   bc2b0:	9201      	str	r2, [sp, #4]
   bc2b2:	f7fb fa5b 	bl	b776c <_malloc_r>
   bc2b6:	4604      	mov	r4, r0
   bc2b8:	b118      	cbz	r0, bc2c2 <_calloc_r+0x18>
   bc2ba:	9a01      	ldr	r2, [sp, #4]
   bc2bc:	2100      	movs	r1, #0
   bc2be:	f7fe f8a9 	bl	ba414 <memset>
   bc2c2:	4620      	mov	r0, r4
   bc2c4:	b002      	add	sp, #8
   bc2c6:	bd10      	pop	{r4, pc}

000bc2c8 <__ascii_wctomb>:
   bc2c8:	b149      	cbz	r1, bc2de <__ascii_wctomb+0x16>
   bc2ca:	2aff      	cmp	r2, #255	; 0xff
   bc2cc:	bf85      	ittet	hi
   bc2ce:	238a      	movhi	r3, #138	; 0x8a
   bc2d0:	6003      	strhi	r3, [r0, #0]
   bc2d2:	700a      	strbls	r2, [r1, #0]
   bc2d4:	f04f 30ff 	movhi.w	r0, #4294967295
   bc2d8:	bf98      	it	ls
   bc2da:	2001      	movls	r0, #1
   bc2dc:	4770      	bx	lr
   bc2de:	4608      	mov	r0, r1
   bc2e0:	4770      	bx	lr
	...

000bc2e4 <__aeabi_d2lz>:
   bc2e4:	b538      	push	{r3, r4, r5, lr}
   bc2e6:	2200      	movs	r2, #0
   bc2e8:	2300      	movs	r3, #0
   bc2ea:	4604      	mov	r4, r0
   bc2ec:	460d      	mov	r5, r1
   bc2ee:	f7fd fc2d 	bl	b9b4c <__aeabi_dcmplt>
   bc2f2:	b928      	cbnz	r0, bc300 <__aeabi_d2lz+0x1c>
   bc2f4:	4620      	mov	r0, r4
   bc2f6:	4629      	mov	r1, r5
   bc2f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc2fc:	f7fd be8e 	b.w	ba01c <__aeabi_d2ulz>
   bc300:	4620      	mov	r0, r4
   bc302:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bc306:	f7fd fe89 	bl	ba01c <__aeabi_d2ulz>
   bc30a:	4240      	negs	r0, r0
   bc30c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc310:	bd38      	pop	{r3, r4, r5, pc}
   bc312:	bf00      	nop

000bc314 <dynalib_user>:
   bc314:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc324:	0000 0000 6157 6574 5472 5344 2020 203d     ....WaterTDS  = 
   bc334:	2000 7070 0a6d 5700 7461 7265 7020 2048     . ppm..Water pH 
   bc344:	3d20 2520 332e 0a66 6157 6574 2072 4345      = %.3f.Water EC
   bc354:	2020 203d 2e25 6632 570a 7461 7265 524f       = %.2f.WaterOR
   bc364:	2050 3d20 2520 6d69 0a56 6157 6574 5472     P  = %imV.WaterT
   bc374:	6d65 2070 203d 2e25 6632 0a46 4100 7269     emp = %.2fF..Air
   bc384:	5420 6d65 2070 3d20 2520 322e 4666 480a      Temp  = %.2fF.H
   bc394:	6d75 6469 7469 2079 3d20 2520 322e 2566     umidity  = %.2f%
   bc3a4:	0a63 6941 5072 6572 7373 7275 2065 203d     c.AirPressure = 
   bc3b4:	2e25 6632 000a 6157 6574 2072 4454 2053     %.2f..Water TDS 
   bc3c4:	203d 2000 7070 2c6d 0020 6157 6574 2072     = . ppm, .Water 
   bc3d4:	4870 3d20 2520 332e 2c66 5720 7461 7265     pH = %.3f, Water
   bc3e4:	5420 6d65 6570 6172 7574 6572 3d20 2520      Temperature = %
   bc3f4:	322e 2066 0a46 4100 7269 5420 6d65 2070     .2f F..Air Temp 
   bc404:	203d 2e25 6632 202c 6552 616c 6974 6576     = %.2f, Relative
   bc414:	4820 6d75 6469 7469 2079 203d 2e25 6632      Humidity = %.2f
   bc424:	202c 6941 2072 7250 7365 7573 6572 3d20     , Air Pressure =
   bc434:	2520 322e 2066 6e49 4748 0a0a 4100 6464      %.2f InHG...Add
   bc444:	6465 7020 2048 6f44 6e77 000a 6441 6564     ed pH Down..Adde
   bc454:	2064 754e 7274 6569 746e 0a73 4300 6e6f     d Nutrients..Con
   bc464:	656e 7463 6e69 2067 6f74 4d20 5451 2e54     necting to MQTT.
   bc474:	2e2e 0020 7325 000a 6552 7274 6979 676e     .. .%s..Retrying
   bc484:	4d20 5451 2054 6f63 6e6e 6365 6974 6e6f      MQTT connection
   bc494:	6920 206e 2035 6573 6f63 646e 2e73 0a2e      in 5 seconds...
   bc4a4:	4d00 5451 2054 6f43 6e6e 6365 6574 2164     .MQTT Connected!
   bc4b4:	000a 6950 676e 6e69 2067 514d 5454 0a20     ..Pinging MQTT .
   bc4c4:	4400 7369 6f63 6e6e 6365 6974 676e 0a20     .Disconnecting .
   bc4d4:	5300 6f74 2070 7550 706d 000a 7264 6574     .Stop Pump..drte
   bc4e4:	7465 0068 6f69 612e 6164 7266 6975 2e74     eth.io.adafruit.
   bc4f4:	6f63 006d 6961 5f6f 4f6a 7673 3933 4653     com.aio_jOsv39SF
   bc504:	4e63 6563 3566 6279 557a 4459 536f 695a     cNcef5ybzUYDoSZi
   bc514:	4c6a 3733 6400 7472 6565 6874 662f 6565     jL37.drteeth/fee
   bc524:	7364 682f 6479 6f72 6f70 696e 2d63 6164     ds/hydroponic-da
   bc534:	6174 742e 7364 6566 6465 6400 7472 6565     ta.tdsfeed.drtee
   bc544:	6874 662f 6565 7364 682f 6479 6f72 6f70     th/feeds/hydropo
   bc554:	696e 2d63 6164 6174 702e 6668 6565 0064     nic-data.phfeed.
   bc564:	7264 6574 7465 2f68 6566 6465 2f73 7968     drteeth/feeds/hy
   bc574:	7264 706f 6e6f 6369 642d 7461 2e61 6577     droponic-data.we
   bc584:	7474 6d65 6670 6565 0064 7264 6574 7465     ttempfeed.drteet
   bc594:	2f68 6566 6465 2f73 7968 7264 706f 6e6f     h/feeds/hydropon
   bc5a4:	6369 642d 7461 2e61 6177 6574 4572 6643     ic-data.waterECf
   bc5b4:	6565 0064 7264 6574 7465 2f68 6566 6465     eed.drteeth/feed
   bc5c4:	2f73 7968 7264 706f 6e6f 6369 642d 7461     s/hydroponic-dat
   bc5d4:	2e61 6177 6574 4f72 5052 6566 6465 6400     a.waterORPfeed.d
   bc5e4:	7472 6565 6874 662f 6565 7364 682f 6479     rteeth/feeds/hyd
   bc5f4:	6f72 6f70 696e 2d63 6164 6174 612e 7269     roponic-data.air
   bc604:	6574 706d 6566 6465 6400 7472 6565 6874     tempfeed.drteeth
   bc614:	662f 6565 7364 682f 6479 6f72 6f70 696e     /feeds/hydroponi
   bc624:	2d63 6164 6174 612e 7269 7270 7365 7573     c-data.airpressu
   bc634:	6572 6566 6465 6400 7472 6565 6874 662f     refeed.drteeth/f
   bc644:	6565 7364 682f 6479 6f72 6f70 696e 2d63     eeds/hydroponic-
   bc654:	6164 6174 612e 7269 7568 696d 6964 7974     data.airhumidity
   bc664:	6566 6465 6400 7472 6565 6874 662f 6565     feed.drteeth/fee
   bc674:	7364 682f 6479 6f72 6f70 696e 2d63 6164     ds/hydroponic-da
   bc684:	6174 702e 6468 776f 006e 7264 6574 7465     ta.phdown.drteet
   bc694:	2f68 6566 6465 2f73 7968 7264 706f 6e6f     h/feeds/hydropon
   bc6a4:	6369 642d 7461 2e61 756e 7274 6569 746e     ic-data.nutrient
   bc6b4:	6461 0064 7264 6574 7465 2f68 6566 6465     add.drteeth/feed
   bc6c4:	2f73 7968 7264 706f 6e6f 6369 642d 7461     s/hydroponic-dat
   bc6d4:	2e61 7570 706d 6f43 746e 6f72 006c 0000     a.pumpControl...

000bc6e4 <_ZTV5Timer>:
	...
   bc6ec:	41bd 000b 4211 000b 40f9 000b 6564 6166     .A...B...@..defa
   bc6fc:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   bc70c:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   bc71c:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   bc72c:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000bc73c <_ZTVN8particle11SPISettingsE>:
	...
   bc744:	560d 000b 55fd 000b 55ff 000b               .V...U...U..

000bc750 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   bc758:	40cb 000b 4c97 000b 5f15 000b 5fc1 000b     .@...L..._..._..
   bc768:	5ff3 000b 5f29 000b 5f69 000b 7244 706f     ._..)_..i_..Drop
   bc778:	6570 2064 2061 6170 6b63 7465 5500 6b6e     ped a packet.Unk
   bc788:	6f6e 6e77 6520 7272 726f 4d00 5451 0054     nown error.MQTT.
   bc798:	2525 6425 252e 6664 4600 6961 656c 2064     %%%d.%df.Failed 
   bc7a8:	6f74 7320 6275 6373 6972 6562 4300 6e6f     to subscribe.Con
   bc7b8:	656e 7463 6f69 206e 6166 6c69 6465 5400     nection failed.T
   bc7c8:	6568 5320 7265 6576 2072 6f64 7365 6e20     he Server does n
   bc7d8:	746f 7320 7075 6f70 7472 7420 6568 6c20     ot support the l
   bc7e8:	7665 6c65 6f20 2066 6874 2065 514d 5454     evel of the MQTT
   bc7f8:	7020 6f72 6f74 6f63 206c 6572 7571 7365      protocol reques
   bc808:	6574 0064 6854 2065 6c43 6569 746e 6920     ted.The Client i
   bc818:	6564 746e 6669 6569 2072 7369 6320 726f     dentifier is cor
   bc828:	6572 7463 5520 4654 382d 6220 7475 6e20     rect UTF-8 but n
   bc838:	746f 6120 6c6c 776f 6465 6220 2079 6874     ot allowed by th
   bc848:	2065 6553 7672 7265 5400 6568 4d20 5451     e Server.The MQT
   bc858:	2054 6573 7672 6369 2065 7369 7520 616e     T service is una
   bc868:	6176 6c69 6261 656c 5400 6568 6420 7461     vailable.The dat
   bc878:	2061 6e69 7420 6568 7520 6573 2072 616e     a in the user na
   bc888:	656d 6f20 2072 6170 7373 6f77 6472 6920     me or password i
   bc898:	2073 616d 666c 726f 656d 0064 6f4e 2074     s malformed.Not 
   bc8a8:	7561 6874 726f 7a69 6465 7420 206f 6f63     authorized to co
   bc8b8:	6e6e 6365 0074 7845 6563 6465 6465 7220     nnect.Exceeded r
   bc8c8:	6365 6e6f 656e 7463 7220 7461 2065 696c     econnect rate li
   bc8d8:	696d 2e74 5020 656c 7361 2065 7274 2079     mit. Please try 
   bc8e8:	6761 6961 206e 616c 6574 2e72 5900 756f     again later..You
   bc8f8:	6820 7661 2065 6562 6e65 6220 6e61 656e      have been banne
   bc908:	2064 7266 6d6f 6320 6e6f 656e 7463 6e69     d from connectin
   bc918:	2e67 5020 656c 7361 2065 6f63 746e 6361     g. Please contac
   bc928:	2074 6874 2065 514d 5454 7320 7265 6576     t the MQTT serve
   bc938:	2072 6461 696d 696e 7473 6172 6f74 2072     r administrator 
   bc948:	6f66 2072 6f6d 6572 6420 7465 6961 736c     for more details
   bc958:	002e 0000                                   ....

000bc95c <_ZTV13Adafruit_MQTT>:
	...
   bc96c:	40a5 000b 40a5 000b 40a5 000b 40a5 000b     .@...@...@...@..
   bc97c:	40a5 000b                                   .@..

000bc980 <CSWTCH.44>:
   bc980:	c7a1 000b c7b5 000b c785 000b c7c7 000b     ................
   bc990:	c80c 000b c851 000b c871 000b c8a4 000b     ....Q...q.......
   bc9a0:	c8be 000b c8f5 000b                         ........

000bc9a8 <_ZTV16Adafruit_SSD1306>:
	...
   bc9b0:	40c9 000b 4c89 000b 7049 000b 7ce1 000b     .@...L..Ip...|..
   bc9c0:	6961 000b 6d61 000b 67ed 000b 667d 000b     ai..am...g..}f..
   bc9d0:	6e1f 000b 6ebd 000b 6ef3 000b 6f0f 000b     .n...n...n...o..

000bc9e0 <_ZL4font>:
   bc9e0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bc9f0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bca00:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bca10:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bca20:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bca30:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bca40:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bca50:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bca60:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bca70:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bca80:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bca90:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bcaa0:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bcab0:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bcac0:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bcad0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bcae0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bcaf0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bcb00:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bcb10:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bcb20:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bcb30:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bcb40:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bcb50:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bcb60:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bcb70:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bcb80:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bcb90:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bcba0:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bcbb0:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bcbc0:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bcbd0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bcbe0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bcbf0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bcc00:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bcc10:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bcc20:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bcc30:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bcc40:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bcc50:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bcc60:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bcc70:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   bcc80:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bcc90:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bcca0:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   bccb0:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bccc0:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   bccd0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   bcce0:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   bccf0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bcd00:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bcd10:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bcd20:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bcd30:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bcd40:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bcd50:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   bcd60:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   bcd70:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   bcd80:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   bcd90:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   bcda0:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   bcdb0:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   bcdc0:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   bcdd0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   bcde0:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   bcdf0:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   bce00:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   bce10:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   bce20:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   bce30:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   bce40:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   bce50:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   bce60:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   bce70:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   bce80:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   bce90:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   bcea0:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   bceb0:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   bcec0:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   bced0:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000bcedc <_ZTV12Adafruit_GFX>:
	...
   bceec:	7049 000b 7ce1 000b 40a5 000b 6d61 000b     Ip...|...@..am..
   bcefc:	6e87 000b 6ea3 000b 6e1f 000b 6ebd 000b     .n...n...n...n..
   bcf0c:	6ef3 000b 6f0f 000b                         .n...o..

000bcf14 <_ZTVN5spark13EthernetClassE>:
	...
   bcf1c:	781b 000b 7811 000b 7807 000b 77fd 000b     .x...x...x...w..
   bcf2c:	77f1 000b 77e5 000b 8da1 000b 8da9 000b     .w...w..........
   bcf3c:	77d9 000b 77d1 000b 77c7 000b 77bd 000b     .w...w...w...w..
   bcf4c:	8dd9 000b                                   ....

000bcf50 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bcf50:	0800 1810 2820 3830                         .... (08

000bcf58 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bcf60:	616e 006e 6e69 0066 766f 0066 7061 0070     nan.inf.ovf.app.
   bcf70:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   bcf80:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000bcf8c <_ZTV9IPAddress>:
	...
   bcf94:	8315 000b 8305 000b 8307 000b               ............

000bcfa0 <_ZTV9USBSerial>:
	...
   bcfa8:	8425 000b 848d 000b 8463 000b 7ce1 000b     %.......c....|..
   bcfb8:	8455 000b 8427 000b 8437 000b 8487 000b     U...'...7.......
   bcfc8:	8447 000b 8421 000b                         G...!...

000bcfd0 <_ZTV11USARTSerial>:
	...
   bcfd8:	8539 000b 85a5 000b 857d 000b 7ce1 000b     9.......}....|..
   bcfe8:	854d 000b 8569 000b 855b 000b 8577 000b     M...i...[...w...
   bcff8:	853b 000b 853f 000b                         ;...?...

000bd000 <_ZTV7TwoWire>:
	...
   bd008:	8635 000b 867f 000b 8657 000b 8637 000b     5.......W...7...
   bd018:	865f 000b 8667 000b 866f 000b 8677 000b     _...g...o...w...
   bd028:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bd038:	2072 203d 6425 0000                         r = %d..

000bd040 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd048:	87df 000b 8801 000b 8ceb 000b 880f 000b     ................
   bd058:	87e1 000b                                   ....

000bd05c <_ZTV9TCPClient>:
	...
   bd064:	4141 000b 4225 000b 875b 000b 8775 000b     AA..%B..[...u...
   bd074:	8b81 000b 879f 000b 89f7 000b 87d3 000b     ................
   bd084:	8a89 000b 88c9 000b 8a25 000b 8c35 000b     ........%...5...
   bd094:	89c5 000b 87d5 000b 8787 000b 8815 000b     ................
   bd0a4:	88a9 000b                                   ....

000bd0a8 <_ZTVN5spark9WiFiClassE>:
	...
   bd0b0:	8d43 000b 8d39 000b 8d2f 000b 8cf1 000b     C...9.../.......
   bd0c0:	7fb9 000b 8d23 000b 8da1 000b 8da9 000b     ....#...........
   bd0d0:	8d17 000b 8d0f 000b 8d05 000b 8cfb 000b     ................
   bd0e0:	8dd9 000b                                   ....

000bd0e4 <_ZTVN5spark12NetworkClassE>:
	...
   bd0ec:	8d61 000b 8d6b 000b 8d75 000b 8d7f 000b     a...k...u.......
   bd0fc:	8d89 000b 8d95 000b 8da1 000b 8da9 000b     ................
   bd10c:	8db1 000b 8dbd 000b 8dc5 000b 8dcf 000b     ................
   bd11c:	8dd9 000b                                   ....

000bd120 <_ZSt7nothrow>:
	...

000bd121 <_ZTSSt19_Sp_make_shared_tag>:
   bd121:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bd131:	6572 5f64 6174 0067 0000                     red_tag....

000bd13c <_ZTISt19_Sp_make_shared_tag>:
   bd13c:	d17c 000b d121 000b                         |...!...

000bd144 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bd144:	d1dc 000b d150 000b d200 000b               ....P.......

000bd150 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bd150:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bd160:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bd170:	0045 0000                                   E...

000bd174 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bd174:	0000 0000 d144 000b 9109 000b 911d 000b     ....D...........
   bd184:	92b1 000b 92b1 000b 9187 000b 90c9 000b     ................
   bd194:	916f 000b 9131 000b 90fb 000b               o...1.......

000bd1a0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bd1a0:	d1dc 000b d1ac 000b d144 000b               ........D...

000bd1ac <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bd1ac:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bd1bc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bd1cc:	666e 456f 0000 0000                         nfoE....

000bd1d4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bd1d4:	0000 0000 d1a0 000b 91b1 000b 91c5 000b     ................
   bd1e4:	92b1 000b 92b1 000b 9187 000b 90c9 000b     ................
   bd1f4:	9285 000b 9211 000b 91d9 000b               ............

000bd200 <_ZTISt9type_info>:
   bd200:	d17c 000b d208 000b                         |.......

000bd208 <_ZTSSt9type_info>:
   bd208:	7453 7439 7079 5f65 6e69 6f66 2500 332e     St9type_info.%.3
   bd218:	2073 2e25 7333 3325 2064 2e25 6432 253a     s %.3s%3d %.2d:%
   bd228:	322e 3a64 2e25 6432 2520 0a64                .2d:%.2d %d..

000bd235 <day_name.1>:
   bd235:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bd245:	6972 6153                                    riSat

000bd24a <mon_name.0>:
   bd24a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bd25a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bd26a:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bd27a:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   bd28a:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   bd29a:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   bd2aa:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   bd2ba:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   bd2ca:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   bd2da:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   bd2ea:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   bd2fa:	722f 6e61 2e64 0063 6e69 7469 0079          /rand.c.inity.

000bd308 <fpi.1>:
   bd308:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bd318:	0000 0000                                   ....

000bd31c <fpinan.0>:
   bd31c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bd32c:	0000 0000                                   ....

000bd330 <tinytens>:
   bd330:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bd340:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bd350:	6f43 64ac 0628 1168                         Co.d(.h.

000bd358 <_ctype_>:
   bd358:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd368:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd378:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd388:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd398:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd3a8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd3b8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd3c8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd3d8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bd458:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bd468:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bd478:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bd488:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bd498:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bd4a8:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bd4b8:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bd4c8:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bd4d8:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bd4e8:	6874 7865 632e 0000                         thex.c..

000bd4f0 <_C_numeric_locale>:
   bd4f0:	c8f3 000b c440 000b e094 2003 0043 4f50     ....@...... C.PO
   bd500:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bd510:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bd520:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bd530:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bd540:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bd550:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bd560:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bd570:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bd580:	0063 0000 0000 0000                         c.......

000bd588 <__mprec_bigtens>:
   bd588:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bd598:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bd5a8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bd5b0 <__mprec_tens>:
   bd5b0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bd5c0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bd5d0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bd5e0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bd5f0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bd600:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bd610:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bd620:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bd630:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bd640:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bd650:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bd660:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bd670:	9db4 79d9 7843 44ea                         ...yCx.D

000bd678 <p05.0>:
   bd678:	0005 0000 0019 0000 007d 0000               ........}...

000bd684 <link_const_variable_data_end>:
   bd684:	000b4ca5 	.word	0x000b4ca5
   bd688:	000b7825 	.word	0x000b7825
   bd68c:	000b7a9d 	.word	0x000b7a9d
   bd690:	000b7cb9 	.word	0x000b7cb9
   bd694:	000b7fc5 	.word	0x000b7fc5
   bd698:	000b8105 	.word	0x000b8105
   bd69c:	000b81b1 	.word	0x000b81b1
   bd6a0:	000b8d4d 	.word	0x000b8d4d
   bd6a4:	000b8eb1 	.word	0x000b8eb1

000bd6a8 <link_constructors_end>:
	...
